{"pageProps":{"data":{"component":"ServerError","slug":"server-error","code":"import { createStyles, Title, Text, Button, Container, Group, rem } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  root: {\n    paddingTop: rem(80),\n    paddingBottom: rem(120),\n    backgroundColor: theme.fn.variant({ variant: 'filled', color: theme.primaryColor }).background,\n  },\n\n  label: {\n    textAlign: 'center',\n    fontWeight: 900,\n    fontSize: rem(220),\n    lineHeight: 1,\n    marginBottom: `calc(${theme.spacing.xl} * 1.5)`,\n    color: theme.colors[theme.primaryColor][3],\n\n    [theme.fn.smallerThan('sm')]: {\n      fontSize: rem(120),\n    },\n  },\n\n  title: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    textAlign: 'center',\n    fontWeight: 900,\n    fontSize: rem(38),\n    color: theme.white,\n\n    [theme.fn.smallerThan('sm')]: {\n      fontSize: rem(32),\n    },\n  },\n\n  description: {\n    maxWidth: rem(540),\n    margin: 'auto',\n    marginTop: theme.spacing.xl,\n    marginBottom: `calc(${theme.spacing.xl} * 1.5)`,\n    color: theme.colors[theme.primaryColor][1],\n  },\n}));\n\nexport function ServerError() {\n  const { classes } = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Container>\n        <div className={classes.label}>500</div>\n        <Title className={classes.title}>Something bad just happened...</Title>\n        <Text size=\"lg\" align=\"center\" className={classes.description}>\n          Our servers could not handle your request. Don&apos;t worry, our development team was\n          already notified. Try refreshing the page.\n        </Text>\n        <Group position=\"center\">\n          <Button variant=\"white\" size=\"md\">\n            Refresh the page\n          </Button>\n        </Group>\n      </Container>\n    </div>\n  );\n}\n","attributes":{"title":"500 page","category":"error-pages","author":"rtivital","withColor":true,"responsive":true,"dependencies":["/core/title/","/core/text/","/core/button/","/core/group/","/core/container/"],"canvas":{"center":false}}},"allComponents":[{"component":"ActionToggle","slug":"action-toggle","code":"import { useMantineColorScheme, ActionIcon, Group } from '@mantine/core';\nimport { IconSun, IconMoonStars } from '@tabler/icons-react';\n\nexport function ActionToggle() {\n  const { colorScheme, toggleColorScheme } = useMantineColorScheme();\n\n  return (\n    <Group position=\"center\" my=\"xl\">\n      <ActionIcon\n        onClick={() => toggleColorScheme()}\n        size=\"lg\"\n        sx={(theme) => ({\n          backgroundColor:\n            theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n          color: theme.colorScheme === 'dark' ? theme.colors.yellow[4] : theme.colors.blue[6],\n        })}\n      >\n        {colorScheme === 'dark' ? <IconSun size=\"1.2rem\" /> : <IconMoonStars size=\"1.2rem\" />}\n      </ActionIcon>\n    </Group>\n  );\n}\n","attributes":{"title":"Simple color scheme toggle","category":"color-scheme","author":"rtivital","dependencies":["/core/action-icon/","@tabler/icons-react"],"canvas":{"center":false}}},{"component":"ActionsGrid","slug":"actions-grid","code":"import {\n  createStyles,\n  Card,\n  Text,\n  SimpleGrid,\n  UnstyledButton,\n  Anchor,\n  Group,\n  rem,\n} from '@mantine/core';\nimport {\n  IconCreditCard,\n  IconBuildingBank,\n  IconRepeat,\n  IconReceiptRefund,\n  IconReceipt,\n  IconReceiptTax,\n  IconReport,\n  IconCashBanknote,\n  IconCoin,\n} from '@tabler/icons-react';\n\nconst mockdata = [\n  { title: 'Credit cards', icon: IconCreditCard, color: 'violet' },\n  { title: 'Banks nearby', icon: IconBuildingBank, color: 'indigo' },\n  { title: 'Transfers', icon: IconRepeat, color: 'blue' },\n  { title: 'Refunds', icon: IconReceiptRefund, color: 'green' },\n  { title: 'Receipts', icon: IconReceipt, color: 'teal' },\n  { title: 'Taxes', icon: IconReceiptTax, color: 'cyan' },\n  { title: 'Reports', icon: IconReport, color: 'pink' },\n  { title: 'Payments', icon: IconCoin, color: 'red' },\n  { title: 'Cashback', icon: IconCashBanknote, color: 'orange' },\n];\n\nconst useStyles = createStyles((theme) => ({\n  card: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n  },\n\n  title: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    fontWeight: 700,\n  },\n\n  item: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    textAlign: 'center',\n    borderRadius: theme.radius.md,\n    height: rem(90),\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n    transition: 'box-shadow 150ms ease, transform 100ms ease',\n\n    '&:hover': {\n      boxShadow: theme.shadows.md,\n      transform: 'scale(1.05)',\n    },\n  },\n}));\n\nexport function ActionsGrid() {\n  const { classes, theme } = useStyles();\n\n  const items = mockdata.map((item) => (\n    <UnstyledButton key={item.title} className={classes.item}>\n      <item.icon color={theme.colors[item.color][6]} size=\"2rem\" />\n      <Text size=\"xs\" mt={7}>\n        {item.title}\n      </Text>\n    </UnstyledButton>\n  ));\n\n  return (\n    <Card withBorder radius=\"md\" className={classes.card}>\n      <Group position=\"apart\">\n        <Text className={classes.title}>Services</Text>\n        <Anchor size=\"xs\" color=\"dimmed\" sx={{ lineHeight: 1 }}>\n          + 21 other services\n        </Anchor>\n      </Group>\n      <SimpleGrid cols={3} mt=\"md\">\n        {items}\n      </SimpleGrid>\n    </Card>\n  );\n}\n","attributes":{"title":"Card with actions grid","category":"app-cards","author":"rtivital","dependencies":["/core/card/","/core/text/","/core/simple-grid/","/core/button/#unstyled-button","/core/anchor/","/core/group/"],"canvas":{"center":true,"maxWidth":420}}},{"component":"ArticleCard","slug":"article-card","code":"import { IconBookmark, IconHeart, IconShare } from '@tabler/icons-react';\nimport {\n  Card,\n  Image,\n  Text,\n  ActionIcon,\n  Badge,\n  Group,\n  Center,\n  Avatar,\n  createStyles,\n  rem,\n} from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  card: {\n    position: 'relative',\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n  },\n\n  rating: {\n    position: 'absolute',\n    top: theme.spacing.xs,\n    right: rem(12),\n    pointerEvents: 'none',\n  },\n\n  title: {\n    display: 'block',\n    marginTop: theme.spacing.md,\n    marginBottom: rem(5),\n  },\n\n  action: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n    ...theme.fn.hover({\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[1],\n    }),\n  },\n\n  footer: {\n    marginTop: theme.spacing.md,\n  },\n}));\n\ninterface ArticleCardProps {\n  image: string;\n  link: string;\n  title: string;\n  description: string;\n  rating: string;\n  author: {\n    name: string;\n    image: string;\n  };\n}\n\nexport function ArticleCard({\n  className,\n  image,\n  link,\n  title,\n  description,\n  author,\n  rating,\n  ...others\n}: ArticleCardProps & Omit<React.ComponentPropsWithoutRef<'div'>, keyof ArticleCardProps>) {\n  const { classes, cx, theme } = useStyles();\n  const linkProps = { href: link, target: '_blank', rel: 'noopener noreferrer' };\n\n  return (\n    <Card withBorder radius=\"md\" className={cx(classes.card, className)} {...others}>\n      <Card.Section>\n        <a {...linkProps}>\n          <Image src={image} height={180} />\n        </a>\n      </Card.Section>\n\n      <Badge className={classes.rating} variant=\"gradient\" gradient={{ from: 'yellow', to: 'red' }}>\n        {rating}\n      </Badge>\n\n      <Text className={classes.title} fw={500} component=\"a\" {...linkProps}>\n        {title}\n      </Text>\n\n      <Text fz=\"sm\" color=\"dimmed\" lineClamp={4}>\n        {description}\n      </Text>\n\n      <Group position=\"apart\" className={classes.footer}>\n        <Center>\n          <Avatar src={author.image} size={24} radius=\"xl\" mr=\"xs\" />\n          <Text fz=\"sm\" inline>\n            {author.name}\n          </Text>\n        </Center>\n\n        <Group spacing={8} mr={0}>\n          <ActionIcon className={classes.action}>\n            <IconHeart size=\"1rem\" color={theme.colors.red[6]} />\n          </ActionIcon>\n          <ActionIcon className={classes.action}>\n            <IconBookmark size=\"1rem\" color={theme.colors.yellow[7]} />\n          </ActionIcon>\n          <ActionIcon className={classes.action}>\n            <IconShare size=\"1rem\" />\n          </ActionIcon>\n        </Group>\n      </Group>\n    </Card>\n  );\n}\n","attributes":{"title":"Article card with image","category":"article-cards","author":"rtivital","dimmed":true,"dependencies":["/core/card/","/core/text/","/core/group/","/core/center/","/core/avatar/","/core/badge/","/core/image/","/core/action-icon/","@tabler/icons-react"],"props":{"image":"https://i.imgur.com/Cij5vdL.png","link":"https://mantine.dev/","title":"Resident Evil Village review","rating":"outstanding","description":"Resident Evil Village is a direct sequel to 2017’s Resident Evil 7, but takes a very different direction to its predecessor, namely the fact that this time round instead of fighting against various mutated zombies, you’re now dealing with more occult enemies like werewolves and vampires.","author":{"name":"Bill Wormeater","image":"https://images.unsplash.com/photo-1593229874334-90d965f27c42?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=200&q=80"}},"canvas":{"center":true,"maxWidth":320}}},{"component":"ArticleCardFooter","slug":"article-card-footer","code":"import {\n  createStyles,\n  Card,\n  Image,\n  ActionIcon,\n  Group,\n  Text,\n  Avatar,\n  Badge,\n  rem,\n} from '@mantine/core';\nimport { IconHeart, IconBookmark, IconShare } from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  card: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n  },\n\n  title: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n  },\n\n  footer: {\n    padding: `${theme.spacing.xs} ${theme.spacing.lg}`,\n    marginTop: theme.spacing.md,\n    borderTop: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[2]\n    }`,\n  },\n}));\n\ninterface ArticleCardFooterProps {\n  image: string;\n  category: string;\n  title: string;\n  footer: string;\n  author: {\n    name: string;\n    description: string;\n    image: string;\n  };\n}\n\nexport function ArticleCardFooter({\n  image,\n  category,\n  title,\n  footer,\n  author,\n}: ArticleCardFooterProps) {\n  const { classes, theme } = useStyles();\n\n  return (\n    <Card withBorder padding=\"lg\" radius=\"md\" className={classes.card}>\n      <Card.Section mb=\"sm\">\n        <Image src={image} alt={title} height={180} />\n      </Card.Section>\n\n      <Badge>{category}</Badge>\n\n      <Text fw={700} className={classes.title} mt=\"xs\">\n        {title}\n      </Text>\n\n      <Group mt=\"lg\">\n        <Avatar src={author.image} radius=\"sm\" />\n        <div>\n          <Text fw={500}>{author.name}</Text>\n          <Text fz=\"xs\" c=\"dimmed\">\n            {author.description}\n          </Text>\n        </div>\n      </Group>\n\n      <Card.Section className={classes.footer}>\n        <Group position=\"apart\">\n          <Text fz=\"xs\" c=\"dimmed\">\n            {footer}\n          </Text>\n          <Group spacing={0}>\n            <ActionIcon>\n              <IconHeart size=\"1.2rem\" color={theme.colors.red[6]} stroke={1.5} />\n            </ActionIcon>\n            <ActionIcon>\n              <IconBookmark size=\"1.2rem\" color={theme.colors.yellow[6]} stroke={1.5} />\n            </ActionIcon>\n            <ActionIcon>\n              <IconShare size=\"1.2rem\" color={theme.colors.blue[6]} stroke={1.5} />\n            </ActionIcon>\n          </Group>\n        </Group>\n      </Card.Section>\n    </Card>\n  );\n}\n","attributes":{"title":"Article card with footer","category":"article-cards","author":"rtivital","withColor":true,"dimmed":true,"dependencies":["/core/card/","/core/image/","/core/group/","/core/text/","/core/action-icon/","/core/avatar/","/core/badge/","table-icons-react"],"props":{"image":"https://images.unsplash.com/photo-1477554193778-9562c28588c0?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=500&q=80","category":"decorations","title":"Top 50 underrated plants for house decoration","footer":"733 people liked this","author":{"name":"Elsa Gardenowl","description":"posted 34 minutes ago","image":"https://images.unsplash.com/photo-1628890923662-2cb23c2e0cfe?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=200&q=80"}},"canvas":{"center":true,"maxWidth":320}}},{"component":"ArticleCardImage","slug":"article-card-image","code":"import { createStyles, Paper, Text, Title, Button, rem } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  card: {\n    height: rem(440),\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n\n  title: {\n    fontFamily: `Greycliff CF ${theme.fontFamily}`,\n    fontWeight: 900,\n    color: theme.white,\n    lineHeight: 1.2,\n    fontSize: rem(32),\n    marginTop: theme.spacing.xs,\n  },\n\n  category: {\n    color: theme.white,\n    opacity: 0.7,\n    fontWeight: 700,\n    textTransform: 'uppercase',\n  },\n}));\n\ninterface ArticleCardImageProps {\n  image: string;\n  title: string;\n  category: string;\n}\n\nexport function ArticleCardImage({ image, title, category }: ArticleCardImageProps) {\n  const { classes } = useStyles();\n\n  return (\n    <Paper\n      shadow=\"md\"\n      p=\"xl\"\n      radius=\"md\"\n      sx={{ backgroundImage: `url(${image})` }}\n      className={classes.card}\n    >\n      <div>\n        <Text className={classes.category} size=\"xs\">\n          {category}\n        </Text>\n        <Title order={3} className={classes.title}>\n          {title}\n        </Title>\n      </div>\n      <Button variant=\"white\" color=\"dark\">\n        Read article\n      </Button>\n    </Paper>\n  );\n}\n","attributes":{"title":"Card with background image","category":"article-cards","author":"rtivital","dependencies":["/core/paper/","/core/text/","/core/title/","/core/button/"],"props":{"image":"https://images.unsplash.com/photo-1508193638397-1c4234db14d8?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&q=80","title":"Best forests to visit in North America","category":"nature"},"canvas":{"center":true,"maxWidth":320}}},{"component":"ArticleCardVertical","slug":"article-card-vertical","code":"import { createStyles, Card, Image, Avatar, Text, Group } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  card: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n  },\n\n  title: {\n    fontWeight: 700,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    lineHeight: 1.2,\n  },\n\n  body: {\n    padding: theme.spacing.md,\n  },\n}));\n\ninterface ArticleCardVerticalProps {\n  image: string;\n  category: string;\n  title: string;\n  date: string;\n  author: {\n    name: string;\n    avatar: string;\n  };\n}\n\nexport function ArticleCardVertical({\n  image,\n  category,\n  title,\n  date,\n  author,\n}: ArticleCardVerticalProps) {\n  const { classes } = useStyles();\n  return (\n    <Card withBorder radius=\"md\" p={0} className={classes.card}>\n      <Group noWrap spacing={0}>\n        <Image src={image} height={140} width={140} />\n        <div className={classes.body}>\n          <Text transform=\"uppercase\" color=\"dimmed\" weight={700} size=\"xs\">\n            {category}\n          </Text>\n          <Text className={classes.title} mt=\"xs\" mb=\"md\">\n            {title}\n          </Text>\n          <Group noWrap spacing=\"xs\">\n            <Group spacing=\"xs\" noWrap>\n              <Avatar size={20} src={author.avatar} />\n              <Text size=\"xs\">{author.name}</Text>\n            </Group>\n            <Text size=\"xs\" color=\"dimmed\">\n              •\n            </Text>\n            <Text size=\"xs\" color=\"dimmed\">\n              {date}\n            </Text>\n          </Group>\n        </div>\n      </Group>\n    </Card>\n  );\n}\n","attributes":{"title":"Vertical article card","category":"article-cards","author":"rtivital","dimmed":true,"dependencies":["/core/card/","/core/image/","/core/avatar/","/core/text/","/core/avatar/","/core/group/"],"props":{"image":"https://images.unsplash.com/photo-1602080858428-57174f9431cf?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&q=80","category":"technology","title":"The best laptop for Frontend engineers in 2022","date":"Feb 6th","author":{"name":"Elsa Brown","avatar":"https://images.unsplash.com/photo-1628890923662-2cb23c2e0cfe?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=200&q=80"}},"canvas":{"center":true,"maxWidth":420}}},{"component":"ArticlesCardsGrid","slug":"articles-cards-grid","code":"import { createStyles, SimpleGrid, Card, Image, Text, Container, AspectRatio } from '@mantine/core';\n\nconst mockdata = [\n  {\n    title: 'Top 10 places to visit in Norway this summer',\n    image:\n      'https://images.unsplash.com/photo-1527004013197-933c4bb611b3?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80',\n    date: 'August 18, 2022',\n  },\n  {\n    title: 'Best forests to visit in North America',\n    image:\n      'https://images.unsplash.com/photo-1448375240586-882707db888b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80',\n    date: 'August 27, 2022',\n  },\n  {\n    title: 'Hawaii beaches review: better than you think',\n    image:\n      'https://images.unsplash.com/photo-1507525428034-b723cf961d3e?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80',\n    date: 'September 9, 2022',\n  },\n  {\n    title: 'Mountains at night: 12 best locations to enjoy the view',\n    image:\n      'https://images.unsplash.com/photo-1519681393784-d120267933ba?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80',\n    date: 'September 12, 2022',\n  },\n];\n\nconst useStyles = createStyles((theme) => ({\n  card: {\n    transition: 'transform 150ms ease, box-shadow 150ms ease',\n\n    '&:hover': {\n      transform: 'scale(1.01)',\n      boxShadow: theme.shadows.md,\n    },\n  },\n\n  title: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    fontWeight: 600,\n  },\n}));\n\nexport function ArticlesCardsGrid() {\n  const { classes } = useStyles();\n\n  const cards = mockdata.map((article) => (\n    <Card key={article.title} p=\"md\" radius=\"md\" component=\"a\" href=\"#\" className={classes.card}>\n      <AspectRatio ratio={1920 / 1080}>\n        <Image src={article.image} />\n      </AspectRatio>\n      <Text color=\"dimmed\" size=\"xs\" transform=\"uppercase\" weight={700} mt=\"md\">\n        {article.date}\n      </Text>\n      <Text className={classes.title} mt={5}>\n        {article.title}\n      </Text>\n    </Card>\n  ));\n\n  return (\n    <Container py=\"xl\">\n      <SimpleGrid cols={2} breakpoints={[{ maxWidth: 'sm', cols: 1 }]}>\n        {cards}\n      </SimpleGrid>\n    </Container>\n  );\n}\n","attributes":{"title":"Articles cards grid","category":"article-cards","author":"rtivital","changelog":"september-2022","responsive":true,"dependencies":["/core/card/","/core/text/","/core/image/","/core/aspect-ratio/","/core/container/","/core/simple-grid/"],"canvas":{"center":false}}},{"component":"AuthenticationForm","slug":"authentication-form","code":"import { useToggle, upperFirst } from '@mantine/hooks';\nimport { useForm } from '@mantine/form';\nimport {\n  TextInput,\n  PasswordInput,\n  Text,\n  Paper,\n  Group,\n  PaperProps,\n  Button,\n  Divider,\n  Checkbox,\n  Anchor,\n  Stack,\n} from '@mantine/core';\nimport { GoogleButton, TwitterButton } from '../SocialButtons/SocialButtons';\n\nexport function AuthenticationForm(props: PaperProps) {\n  const [type, toggle] = useToggle(['login', 'register']);\n  const form = useForm({\n    initialValues: {\n      email: '',\n      name: '',\n      password: '',\n      terms: true,\n    },\n\n    validate: {\n      email: (val) => (/^\\S+@\\S+$/.test(val) ? null : 'Invalid email'),\n      password: (val) => (val.length <= 6 ? 'Password should include at least 6 characters' : null),\n    },\n  });\n\n  return (\n    <Paper radius=\"md\" p=\"xl\" withBorder {...props}>\n      <Text size=\"lg\" weight={500}>\n        Welcome to Mantine, {type} with\n      </Text>\n\n      <Group grow mb=\"md\" mt=\"md\">\n        <GoogleButton radius=\"xl\">Google</GoogleButton>\n        <TwitterButton radius=\"xl\">Twitter</TwitterButton>\n      </Group>\n\n      <Divider label=\"Or continue with email\" labelPosition=\"center\" my=\"lg\" />\n\n      <form onSubmit={form.onSubmit(() => {})}>\n        <Stack>\n          {type === 'register' && (\n            <TextInput\n              label=\"Name\"\n              placeholder=\"Your name\"\n              value={form.values.name}\n              onChange={(event) => form.setFieldValue('name', event.currentTarget.value)}\n              radius=\"md\"\n            />\n          )}\n\n          <TextInput\n            required\n            label=\"Email\"\n            placeholder=\"hello@mantine.dev\"\n            value={form.values.email}\n            onChange={(event) => form.setFieldValue('email', event.currentTarget.value)}\n            error={form.errors.email && 'Invalid email'}\n            radius=\"md\"\n          />\n\n          <PasswordInput\n            required\n            label=\"Password\"\n            placeholder=\"Your password\"\n            value={form.values.password}\n            onChange={(event) => form.setFieldValue('password', event.currentTarget.value)}\n            error={form.errors.password && 'Password should include at least 6 characters'}\n            radius=\"md\"\n          />\n\n          {type === 'register' && (\n            <Checkbox\n              label=\"I accept terms and conditions\"\n              checked={form.values.terms}\n              onChange={(event) => form.setFieldValue('terms', event.currentTarget.checked)}\n            />\n          )}\n        </Stack>\n\n        <Group position=\"apart\" mt=\"xl\">\n          <Anchor\n            component=\"button\"\n            type=\"button\"\n            color=\"dimmed\"\n            onClick={() => toggle()}\n            size=\"xs\"\n          >\n            {type === 'register'\n              ? 'Already have an account? Login'\n              : \"Don't have an account? Register\"}\n          </Anchor>\n          <Button type=\"submit\" radius=\"xl\">\n            {upperFirst(type)}\n          </Button>\n        </Group>\n      </form>\n    </Paper>\n  );\n}\n","attributes":{"title":"Authentication form","category":"authentication","author":"rtivital","withColor":true,"dimmed":true,"dependencies":["/core/paper/","/core/text-input/","/core/password-input/","/core/checkbox/","/core/text/","/core/button/","/core/group/","/core/divider/","/hooks/use-form/","/hooks/use-toggle/"],"canvas":{"center":true,"maxWidth":420}}},{"component":"AuthenticationImage","slug":"authentication-image","code":"import {\n  Paper,\n  createStyles,\n  TextInput,\n  PasswordInput,\n  Checkbox,\n  Button,\n  Title,\n  Text,\n  Anchor,\n  rem,\n} from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    minHeight: rem(900),\n    backgroundSize: 'cover',\n    backgroundImage:\n      'url(https://images.unsplash.com/photo-1484242857719-4b9144542727?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1280&q=80)',\n  },\n\n  form: {\n    borderRight: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[3]\n    }`,\n    minHeight: rem(900),\n    maxWidth: rem(450),\n    paddingTop: rem(80),\n\n    [theme.fn.smallerThan('sm')]: {\n      maxWidth: '100%',\n    },\n  },\n\n  title: {\n    color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n  },\n}));\n\nexport function AuthenticationImage() {\n  const { classes } = useStyles();\n  return (\n    <div className={classes.wrapper}>\n      <Paper className={classes.form} radius={0} p={30}>\n        <Title order={2} className={classes.title} ta=\"center\" mt=\"md\" mb={50}>\n          Welcome back to Mantine!\n        </Title>\n\n        <TextInput label=\"Email address\" placeholder=\"hello@gmail.com\" size=\"md\" />\n        <PasswordInput label=\"Password\" placeholder=\"Your password\" mt=\"md\" size=\"md\" />\n        <Checkbox label=\"Keep me logged in\" mt=\"xl\" size=\"md\" />\n        <Button fullWidth mt=\"xl\" size=\"md\">\n          Login\n        </Button>\n\n        <Text ta=\"center\" mt=\"md\">\n          Don&apos;t have an account?{' '}\n          <Anchor<'a'> href=\"#\" weight={700} onClick={(event) => event.preventDefault()}>\n            Register\n          </Anchor>\n        </Text>\n      </Paper>\n    </div>\n  );\n}\n","attributes":{"title":"Authentication page with image","category":"authentication","author":"rtivital","withColor":true,"responsive":true,"dependencies":["/core/paper/","/core/title/","/core/text/","/core/text-input/","/core/password-input/","/core/button/","/core/anchor/"],"canvas":{"center":false}}},{"component":"AuthenticationTitle","slug":"authentication-title","code":"import {\n  TextInput,\n  PasswordInput,\n  Checkbox,\n  Anchor,\n  Paper,\n  Title,\n  Text,\n  Container,\n  Group,\n  Button,\n} from '@mantine/core';\n\nexport function AuthenticationTitle() {\n  return (\n    <Container size={420} my={40}>\n      <Title\n        align=\"center\"\n        sx={(theme) => ({ fontFamily: `Greycliff CF, ${theme.fontFamily}`, fontWeight: 900 })}\n      >\n        Welcome back!\n      </Title>\n      <Text color=\"dimmed\" size=\"sm\" align=\"center\" mt={5}>\n        Do not have an account yet?{' '}\n        <Anchor size=\"sm\" component=\"button\">\n          Create account\n        </Anchor>\n      </Text>\n\n      <Paper withBorder shadow=\"md\" p={30} mt={30} radius=\"md\">\n        <TextInput label=\"Email\" placeholder=\"you@mantine.dev\" required />\n        <PasswordInput label=\"Password\" placeholder=\"Your password\" required mt=\"md\" />\n        <Group position=\"apart\" mt=\"lg\">\n          <Checkbox label=\"Remember me\" />\n          <Anchor component=\"button\" size=\"sm\">\n            Forgot password?\n          </Anchor>\n        </Group>\n        <Button fullWidth mt=\"xl\">\n          Sign in\n        </Button>\n      </Paper>\n    </Container>\n  );\n}\n","attributes":{"title":"Authentication form with title","category":"authentication","author":"rtivital","withColor":true,"responsive":true,"dimmed":true,"dependencies":[],"canvas":{"center":false}}},{"component":"AutocompleteLoading","slug":"autocomplete-loading","code":"import { useState, useRef } from 'react';\nimport { Autocomplete, Loader } from '@mantine/core';\n\nexport function AutocompleteLoading() {\n  const timeoutRef = useRef<number>(-1);\n  const [value, setValue] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState<string[]>([]);\n\n  const handleChange = (val: string) => {\n    window.clearTimeout(timeoutRef.current);\n    setValue(val);\n    setData([]);\n\n    if (val.trim().length === 0 || val.includes('@')) {\n      setLoading(false);\n    } else {\n      setLoading(true);\n      timeoutRef.current = window.setTimeout(() => {\n        setLoading(false);\n        setData(['gmail.com', 'outlook.com', 'yahoo.com'].map((provider) => `${val}@${provider}`));\n      }, 1000);\n    }\n  };\n  return (\n    <Autocomplete\n      value={value}\n      data={data}\n      onChange={handleChange}\n      rightSection={loading ? <Loader size=\"1rem\" /> : null}\n      label=\"Async Autocomplete data\"\n      placeholder=\"Your email\"\n    />\n  );\n}\n","attributes":{"title":"Autocomplete async data","category":"inputs","author":"rtivital","dependencies":["/core/autocomplete/","/core/loader/"],"canvas":{"center":true,"maxWidth":420}}},{"component":"BadgeCard","slug":"badge-card","code":"import { IconHeart } from '@tabler/icons-react';\nimport {\n  Card,\n  Image,\n  Text,\n  Group,\n  Badge,\n  Button,\n  ActionIcon,\n  createStyles,\n  rem,\n} from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  card: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n  },\n\n  section: {\n    borderBottom: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n    }`,\n    paddingLeft: theme.spacing.md,\n    paddingRight: theme.spacing.md,\n    paddingBottom: theme.spacing.md,\n  },\n\n  like: {\n    color: theme.colors.red[6],\n  },\n\n  label: {\n    textTransform: 'uppercase',\n    fontSize: theme.fontSizes.xs,\n    fontWeight: 700,\n  },\n}));\n\ninterface BadgeCardProps {\n  image: string;\n  title: string;\n  country: string;\n  description: string;\n  badges: {\n    emoji: string;\n    label: string;\n  }[];\n}\n\nexport function BadgeCard({ image, title, description, country, badges }: BadgeCardProps) {\n  const { classes, theme } = useStyles();\n\n  const features = badges.map((badge) => (\n    <Badge\n      color={theme.colorScheme === 'dark' ? 'dark' : 'gray'}\n      key={badge.label}\n      leftSection={badge.emoji}\n    >\n      {badge.label}\n    </Badge>\n  ));\n\n  return (\n    <Card withBorder radius=\"md\" p=\"md\" className={classes.card}>\n      <Card.Section>\n        <Image src={image} alt={title} height={180} />\n      </Card.Section>\n\n      <Card.Section className={classes.section} mt=\"md\">\n        <Group position=\"apart\">\n          <Text fz=\"lg\" fw={500}>\n            {title}\n          </Text>\n          <Badge size=\"sm\">{country}</Badge>\n        </Group>\n        <Text fz=\"sm\" mt=\"xs\">\n          {description}\n        </Text>\n      </Card.Section>\n\n      <Card.Section className={classes.section}>\n        <Text mt=\"md\" className={classes.label} c=\"dimmed\">\n          Perfect for you, if you enjoy\n        </Text>\n        <Group spacing={7} mt={5}>\n          {features}\n        </Group>\n      </Card.Section>\n\n      <Group mt=\"xs\">\n        <Button radius=\"md\" style={{ flex: 1 }}>\n          Show details\n        </Button>\n        <ActionIcon variant=\"default\" radius=\"md\" size={36}>\n          <IconHeart size=\"1.1rem\" className={classes.like} stroke={1.5} />\n        </ActionIcon>\n      </Group>\n    </Card>\n  );\n}\n","attributes":{"title":"Card with badges","category":"app-cards","author":"rtivital","withColor":true,"dimmed":true,"dependencies":["/core/card/","/core/text/","/core/group/","/core/badge/","/core/image/","/core/action-icon/","/core/button/","@tabler/icons-react"],"props":{"image":"https://images.unsplash.com/photo-1437719417032-8595fd9e9dc6?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=600&q=80","title":"Verudela Beach","country":"Croatia","description":"Completely renovated for the season 2020, Arena Verudela Bech Apartments are fully equipped and modernly furnished 4-star self-service apartments located on the Adriatic coastline by one of the most beautiful beaches in Pula.","badges":[{"emoji":"☀️","label":"Sunny weather"},{"emoji":"🦓","label":"Onsite zoo"},{"emoji":"🌊","label":"Sea"},{"emoji":"🌲","label":"Nature"},{"emoji":"🤽","label":"Water sports"}]},"canvas":{"center":true,"maxWidth":370}}},{"component":"ButtonCopy","slug":"button-copy","code":"import { Button, rem, Tooltip } from '@mantine/core';\nimport { useClipboard } from '@mantine/hooks';\nimport { IconCopy, IconCheck } from '@tabler/icons-react';\n\nexport function ButtonCopy() {\n  const clipboard = useClipboard();\n  return (\n    <Tooltip\n      label=\"Link copied!\"\n      offset={5}\n      position=\"bottom\"\n      radius=\"xl\"\n      transitionProps={{ duration: 100, transition: 'slide-down' }}\n      opened={clipboard.copied}\n    >\n      <Button\n        variant=\"light\"\n        rightIcon={\n          clipboard.copied ? (\n            <IconCheck size=\"1.2rem\" stroke={1.5} />\n          ) : (\n            <IconCopy size=\"1.2rem\" stroke={1.5} />\n          )\n        }\n        radius=\"xl\"\n        size=\"md\"\n        styles={{\n          root: { paddingRight: rem(14), height: rem(48) },\n          rightIcon: { marginLeft: rem(22) },\n        }}\n        onClick={() => clipboard.copy('https://www.youtube.com/watch?v=dQw4w9WgXcQ')}\n      >\n        Copy link to clipboard\n      </Button>\n    </Tooltip>\n  );\n}\n","attributes":{"title":"Copy to clipboard button","category":"buttons","author":"rtivital","withColor":true,"dependencies":["/core/button/","/core/tooltip/","/hooks/use-clipboard/","@tabler/icons-react"],"canvas":{"center":true,"maxWidth":240}}},{"component":"ButtonMenu","slug":"button-menu","code":"import { Button, Menu, Text, useMantineTheme } from '@mantine/core';\nimport {\n  IconSquareCheck,\n  IconPackage,\n  IconUsers,\n  IconCalendar,\n  IconChevronDown,\n} from '@tabler/icons-react';\n\nexport function ButtonMenu() {\n  const theme = useMantineTheme();\n  return (\n    <Menu\n      transitionProps={{ transition: 'pop-top-right' }}\n      position=\"top-end\"\n      width={220}\n      withinPortal\n    >\n      <Menu.Target>\n        <Button rightIcon={<IconChevronDown size=\"1.05rem\" stroke={1.5} />} pr={12}>\n          Create new\n        </Button>\n      </Menu.Target>\n      <Menu.Dropdown>\n        <Menu.Item\n          icon={<IconPackage size=\"1rem\" color={theme.colors.blue[6]} stroke={1.5} />}\n          rightSection={\n            <Text size=\"xs\" transform=\"uppercase\" weight={700} color=\"dimmed\">\n              Ctrl + P\n            </Text>\n          }\n        >\n          Project\n        </Menu.Item>\n        <Menu.Item\n          icon={<IconSquareCheck size=\"1rem\" color={theme.colors.pink[6]} stroke={1.5} />}\n          rightSection={\n            <Text size=\"xs\" transform=\"uppercase\" weight={700} color=\"dimmed\">\n              Ctrl + T\n            </Text>\n          }\n        >\n          Task\n        </Menu.Item>\n        <Menu.Item\n          icon={<IconUsers size=\"1rem\" color={theme.colors.cyan[6]} stroke={1.5} />}\n          rightSection={\n            <Text size=\"xs\" transform=\"uppercase\" weight={700} color=\"dimmed\">\n              Ctrl + U\n            </Text>\n          }\n        >\n          Team\n        </Menu.Item>\n        <Menu.Item\n          icon={<IconCalendar size=\"1rem\" color={theme.colors.violet[6]} stroke={1.5} />}\n          rightSection={\n            <Text size=\"xs\" transform=\"uppercase\" weight={700} color=\"dimmed\">\n              Ctrl + E\n            </Text>\n          }\n        >\n          Event\n        </Menu.Item>\n      </Menu.Dropdown>\n    </Menu>\n  );\n}\n","attributes":{"title":"Button with menu","category":"buttons","author":"rtivital","withColor":true,"dependencies":["/core/button/","/core/menu/","@tabler/icons-react"],"canvas":{"center":true,"maxWidth":120}}},{"component":"ButtonProgress","slug":"button-progress","code":"import { useState } from 'react';\nimport { useInterval } from '@mantine/hooks';\nimport { createStyles, Button, Progress } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  button: {\n    position: 'relative',\n    transition: 'background-color 150ms ease',\n  },\n\n  progress: {\n    ...theme.fn.cover(-1),\n    height: 'auto',\n    backgroundColor: 'transparent',\n    zIndex: 0,\n  },\n\n  label: {\n    position: 'relative',\n    zIndex: 1,\n  },\n}));\n\nexport function ButtonProgress() {\n  const { classes, theme } = useStyles();\n  const [progress, setProgress] = useState(0);\n  const [loaded, setLoaded] = useState(false);\n\n  const interval = useInterval(\n    () =>\n      setProgress((current) => {\n        if (current < 100) {\n          return current + 1;\n        }\n\n        interval.stop();\n        setLoaded(true);\n        return 0;\n      }),\n    20\n  );\n\n  return (\n    <Button\n      fullWidth\n      className={classes.button}\n      onClick={() => (loaded ? setLoaded(false) : !interval.active && interval.start())}\n      color={loaded ? 'teal' : theme.primaryColor}\n    >\n      <div className={classes.label}>\n        {progress !== 0 ? 'Uploading files' : loaded ? 'Files uploaded' : 'Upload files'}\n      </div>\n      {progress !== 0 && (\n        <Progress\n          value={progress}\n          className={classes.progress}\n          color={theme.fn.rgba(theme.colors[theme.primaryColor][2], 0.35)}\n          radius=\"sm\"\n        />\n      )}\n    </Button>\n  );\n}\n","attributes":{"title":"Button with loading progress","category":"buttons","author":"rtivital","withColor":true,"dependencies":["/core/button","/core/progress"],"canvas":{"center":true,"maxWidth":220}}},{"component":"ButtonToggle","slug":"button-toggle","code":"import {\n  createStyles,\n  UnstyledButton,\n  Text,\n  Center,\n  useMantineColorScheme,\n  Group,\n  rem,\n} from '@mantine/core';\nimport { upperFirst } from '@mantine/hooks';\nimport { IconMoon, IconSun } from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  control: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.colors.gray[0],\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    borderRadius: 1000,\n    paddingLeft: theme.spacing.sm,\n    paddingRight: rem(4),\n    width: rem(136),\n    height: rem(36),\n  },\n\n  iconWrapper: {\n    height: rem(28),\n    width: rem(28),\n    borderRadius: rem(28),\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.yellow[4] : theme.colors.dark[4],\n    color: theme.colorScheme === 'dark' ? theme.black : theme.colors.blue[2],\n  },\n\n  value: {\n    lineHeight: 1,\n  },\n}));\n\nexport function ButtonToggle() {\n  const { classes } = useStyles();\n  const { colorScheme, toggleColorScheme } = useMantineColorScheme();\n  const Icon = colorScheme === 'dark' ? IconSun : IconMoon;\n\n  return (\n    <Group position=\"center\" my=\"xl\">\n      <UnstyledButton\n        aria-label=\"Toggle theme\"\n        className={classes.control}\n        onClick={() => toggleColorScheme()}\n        title=\"Ctrl + J\"\n      >\n        <Text size=\"sm\" className={classes.value}>\n          {upperFirst(colorScheme === 'light' ? 'dark' : 'light')} theme\n        </Text>\n\n        <Center className={classes.iconWrapper}>\n          <Icon size=\"1.05rem\" stroke={1.5} />\n        </Center>\n      </UnstyledButton>\n    </Group>\n  );\n}\n","attributes":{"title":"Color scheme toggle button","category":"color-scheme","author":"rtivital","dependencies":["/core/button/#unstyled-button","/core/text/","/core/center/","@tabler/icons-react"],"canvas":{"center":true,"maxWidth":420}}},{"component":"CardGradient","slug":"card-gradient","code":"import { createStyles, Paper, Text, ThemeIcon, rem } from '@mantine/core';\nimport { IconColorSwatch } from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  card: {\n    position: 'relative',\n    cursor: 'pointer',\n    overflow: 'hidden',\n    transition: 'transform 150ms ease, box-shadow 100ms ease',\n    padding: theme.spacing.xl,\n    paddingLeft: `calc(${theme.spacing.xl} * 2)`,\n\n    '&:hover': {\n      boxShadow: theme.shadows.md,\n      transform: 'scale(1.02)',\n    },\n\n    '&::before': {\n      content: '\"\"',\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      left: 0,\n      width: rem(6),\n      backgroundImage: theme.fn.linearGradient(0, theme.colors.pink[6], theme.colors.orange[6]),\n    },\n  },\n}));\n\ninterface CardGradientProps {\n  title: string;\n  description: string;\n}\n\nexport function CardGradient({ title, description }: CardGradientProps) {\n  const { classes } = useStyles();\n  return (\n    <Paper withBorder radius=\"md\" className={classes.card}>\n      <ThemeIcon\n        size=\"xl\"\n        radius=\"md\"\n        variant=\"gradient\"\n        gradient={{ deg: 0, from: 'pink', to: 'orange' }}\n      >\n        <IconColorSwatch size={rem(28)} stroke={1.5} />\n      </ThemeIcon>\n      <Text size=\"xl\" weight={500} mt=\"md\">\n        {title}\n      </Text>\n      <Text size=\"sm\" mt=\"sm\" color=\"dimmed\">\n        {description}\n      </Text>\n    </Paper>\n  );\n}\n","attributes":{"title":"Card with gradient border","category":"article-cards","author":"rtivital","dimmed":true,"dependencies":["/core/paper/","/core/text/","/core/theme-icon/","@tabler/icons-react"],"props":{"title":"Theming documentation","description":"Extend default theme with any amount of additional colors, replace shadows, radius, spacing, fonts and many other properties to match your design requirements. Mantine theme is just an object, you can subscribe to it in any part of application via context and use it to build your own components."},"canvas":{"center":true,"maxWidth":360}}},{"component":"CardWithStats","slug":"card-with-stats","code":"import { createStyles, Card, Image, Text, Group, RingProgress, rem } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  card: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n  },\n\n  footer: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    padding: `${theme.spacing.sm} ${theme.spacing.lg}`,\n    borderTop: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[2]\n    }`,\n  },\n\n  title: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    lineHeight: 1,\n  },\n}));\n\ninterface CardWithStatsProps {\n  image: string;\n  title: string;\n  description: string;\n  stats: {\n    title: string;\n    value: string;\n  }[];\n}\n\nexport function CardWithStats({ image, title, description, stats }: CardWithStatsProps) {\n  const { classes } = useStyles();\n\n  const items = stats.map((stat) => (\n    <div key={stat.title}>\n      <Text size=\"xs\" color=\"dimmed\">\n        {stat.title}\n      </Text>\n      <Text weight={500} size=\"sm\">\n        {stat.value}\n      </Text>\n    </div>\n  ));\n\n  return (\n    <Card withBorder padding=\"lg\" className={classes.card}>\n      <Card.Section>\n        <Image src={image} alt={title} height={100} />\n      </Card.Section>\n\n      <Group position=\"apart\" mt=\"xl\">\n        <Text fz=\"sm\" fw={700} className={classes.title}>\n          {title}\n        </Text>\n        <Group spacing={5}>\n          <Text fz=\"xs\" c=\"dimmed\">\n            80% completed\n          </Text>\n          <RingProgress size={18} sections={[{ value: 80, color: 'blue' }]} />\n        </Group>\n      </Group>\n      <Text mt=\"sm\" mb=\"md\" c=\"dimmed\" fz=\"xs\">\n        {description}\n      </Text>\n      <Card.Section className={classes.footer}>{items}</Card.Section>\n    </Card>\n  );\n}\n","attributes":{"title":"Card with stats","category":"app-cards","author":"rtivital","dimmed":true,"dependencies":["/core/card/","/core/image/","/core/text/","/core/group/","/core/ring-progress/"],"props":{"image":"https://images.unsplash.com/photo-1581889470536-467bdbe30cd0?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80","title":"Running challenge","description":"56 km this month • 17% improvement compared to last month • 443 place in global scoreboard","stats":[{"title":"Distance","value":"27.4 km"},{"title":"Avg. speed","value":"9.6 km/h"},{"title":"Score","value":"88/100"}]},"canvas":{"center":true,"maxWidth":320}}},{"component":"CardsCarousel","slug":"cards-carousel","code":"import { Carousel } from '@mantine/carousel';\nimport { useMediaQuery } from '@mantine/hooks';\nimport { createStyles, Paper, Text, Title, Button, useMantineTheme, rem } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  card: {\n    height: rem(440),\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n\n  title: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    fontWeight: 900,\n    color: theme.white,\n    lineHeight: 1.2,\n    fontSize: rem(32),\n    marginTop: theme.spacing.xs,\n  },\n\n  category: {\n    color: theme.white,\n    opacity: 0.7,\n    fontWeight: 700,\n    textTransform: 'uppercase',\n  },\n}));\n\ninterface CardProps {\n  image: string;\n  title: string;\n  category: string;\n}\n\nfunction Card({ image, title, category }: CardProps) {\n  const { classes } = useStyles();\n\n  return (\n    <Paper\n      shadow=\"md\"\n      p=\"xl\"\n      radius=\"md\"\n      sx={{ backgroundImage: `url(${image})` }}\n      className={classes.card}\n    >\n      <div>\n        <Text className={classes.category} size=\"xs\">\n          {category}\n        </Text>\n        <Title order={3} className={classes.title}>\n          {title}\n        </Title>\n      </div>\n      <Button variant=\"white\" color=\"dark\">\n        Read article\n      </Button>\n    </Paper>\n  );\n}\n\nconst data = [\n  {\n    image:\n      'https://images.unsplash.com/photo-1508193638397-1c4234db14d8?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&q=80',\n    title: 'Best forests to visit in North America',\n    category: 'nature',\n  },\n  {\n    image:\n      'https://images.unsplash.com/photo-1559494007-9f5847c49d94?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&q=80',\n    title: 'Hawaii beaches review: better than you think',\n    category: 'beach',\n  },\n  {\n    image:\n      'https://images.unsplash.com/photo-1608481337062-4093bf3ed404?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&q=80',\n    title: 'Mountains at night: 12 best locations to enjoy the view',\n    category: 'nature',\n  },\n  {\n    image:\n      'https://images.unsplash.com/photo-1507272931001-fc06c17e4f43?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&q=80',\n    title: 'Aurora in Norway: when to visit for best experience',\n    category: 'nature',\n  },\n  {\n    image:\n      'https://images.unsplash.com/photo-1510798831971-661eb04b3739?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&q=80',\n    title: 'Best places to visit this winter',\n    category: 'tourism',\n  },\n  {\n    image:\n      'https://images.unsplash.com/photo-1582721478779-0ae163c05a60?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&q=80',\n    title: 'Active volcanos reviews: travel at your own risk',\n    category: 'nature',\n  },\n];\n\nexport function CardsCarousel() {\n  const theme = useMantineTheme();\n  const mobile = useMediaQuery(`(max-width: ${theme.breakpoints.sm})`);\n  const slides = data.map((item) => (\n    <Carousel.Slide key={item.title}>\n      <Card {...item} />\n    </Carousel.Slide>\n  ));\n\n  return (\n    <Carousel\n      slideSize=\"50%\"\n      breakpoints={[{ maxWidth: 'sm', slideSize: '100%', slideGap: rem(2) }]}\n      slideGap=\"xl\"\n      align=\"start\"\n      slidesToScroll={mobile ? 1 : 2}\n    >\n      {slides}\n    </Carousel>\n  );\n}\n","attributes":{"title":"Carousel with cards","category":"carousels","author":"rtivital","changelog":"september-2022","responsive":true,"dependencies":["/others/carousel","/core/paper/","/core/button/","/core/text/","/core/title/","/hooks/use-media-query/"],"canvas":{"center":true,"maxWidth":820}}},{"component":"CarouselCard","slug":"carousel-card","code":"import { createStyles, Image, Card, Text, Group, Button, getStylesRef, rem } from '@mantine/core';\nimport { Carousel } from '@mantine/carousel';\nimport { IconStar } from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  price: {\n    color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n  },\n\n  carousel: {\n    '&:hover': {\n      [`& .${getStylesRef('carouselControls')}`]: {\n        opacity: 1,\n      },\n    },\n  },\n\n  carouselControls: {\n    ref: getStylesRef('carouselControls'),\n    transition: 'opacity 150ms ease',\n    opacity: 0,\n  },\n\n  carouselIndicator: {\n    width: rem(4),\n    height: rem(4),\n    transition: 'width 250ms ease',\n\n    '&[data-active]': {\n      width: rem(16),\n    },\n  },\n}));\n\nconst images = [\n  'https://images.unsplash.com/photo-1598928506311-c55ded91a20c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80',\n  'https://images.unsplash.com/photo-1567767292278-a4f21aa2d36e?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80',\n  'https://images.unsplash.com/photo-1605774337664-7a846e9cdf17?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80',\n  'https://images.unsplash.com/photo-1554995207-c18c203602cb?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80',\n  'https://images.unsplash.com/photo-1616486029423-aaa4789e8c9a?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80',\n];\n\nexport function CarouselCard() {\n  const { classes } = useStyles();\n\n  const slides = images.map((image) => (\n    <Carousel.Slide key={image}>\n      <Image src={image} height={220} />\n    </Carousel.Slide>\n  ));\n\n  return (\n    <Card radius=\"md\" withBorder padding=\"xl\">\n      <Card.Section>\n        <Carousel\n          withIndicators\n          loop\n          classNames={{\n            root: classes.carousel,\n            controls: classes.carouselControls,\n            indicator: classes.carouselIndicator,\n          }}\n        >\n          {slides}\n        </Carousel>\n      </Card.Section>\n\n      <Group position=\"apart\" mt=\"lg\">\n        <Text fw={500} fz=\"lg\">\n          Forde, Norway\n        </Text>\n\n        <Group spacing={5}>\n          <IconStar size=\"1rem\" />\n          <Text fz=\"xs\" fw={500}>\n            4.78\n          </Text>\n        </Group>\n      </Group>\n\n      <Text fz=\"sm\" c=\"dimmed\" mt=\"sm\">\n        Relax, rejuvenate and unplug in this unique contemporary Birdbox. Feel close to nature in\n        ultimate comfort. Enjoy the view of the epic mountain range of Blegja and the Førdefjord.\n      </Text>\n\n      <Group position=\"apart\" mt=\"md\">\n        <div>\n          <Text fz=\"xl\" span fw={500} className={classes.price}>\n            397$\n          </Text>\n          <Text span fz=\"sm\" c=\"dimmed\">\n            {' '}\n            / night\n          </Text>\n        </div>\n\n        <Button radius=\"md\">Book now</Button>\n      </Group>\n    </Card>\n  );\n}\n","attributes":{"title":"Card with carousel","category":"carousels","author":"rtivital","withColor":true,"changelog":"september-2022","dependencies":["/core/image/","/core/text/","/core/card/","/core/button/","/others/carousel/"],"canvas":{"center":true,"maxWidth":350}}},{"component":"CheckboxCard","slug":"checkbox-card","code":"import { UnstyledButton, Checkbox, Text, createStyles, rem } from '@mantine/core';\nimport { useUncontrolled } from '@mantine/hooks';\n\nconst useStyles = createStyles((theme) => ({\n  button: {\n    display: 'flex',\n    width: '100%',\n    border: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.colors.gray[3]\n    }`,\n    borderRadius: theme.radius.sm,\n    padding: theme.spacing.lg,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.white,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[9] : theme.colors.gray[0],\n    },\n  },\n}));\n\ninterface CheckboxCardProps {\n  checked?: boolean;\n  defaultChecked?: boolean;\n  onChange?(checked: boolean): void;\n  title: React.ReactNode;\n  description: React.ReactNode;\n}\n\nexport function CheckboxCard({\n  checked,\n  defaultChecked,\n  onChange,\n  title,\n  description,\n  className,\n  ...others\n}: CheckboxCardProps & Omit<React.ComponentPropsWithoutRef<'button'>, keyof CheckboxCardProps>) {\n  const { classes, cx } = useStyles();\n\n  const [value, handleChange] = useUncontrolled({\n    value: checked,\n    defaultValue: defaultChecked,\n    finalValue: false,\n    onChange,\n  });\n\n  return (\n    <UnstyledButton\n      {...others}\n      onClick={() => handleChange(!value)}\n      className={cx(classes.button, className)}\n    >\n      <Checkbox\n        checked={value}\n        onChange={() => {}}\n        tabIndex={-1}\n        size=\"md\"\n        mr=\"xl\"\n        styles={{ input: { cursor: 'pointer' } }}\n      />\n\n      <div>\n        <Text fw={500} mb={7} sx={{ lineHeight: 1 }}>\n          {title}\n        </Text>\n        <Text fz=\"sm\" c=\"dimmed\">\n          {description}\n        </Text>\n      </div>\n    </UnstyledButton>\n  );\n}\n","attributes":{"title":"Card with checkbox","category":"inputs","author":"rtivital","withColor":true,"dependencies":["/core/card/","/core/checkbox/","/core/text/","/core/button/#unstyled-button","/hooks/use-uncontrolled/"],"props":{"title":"@mantine/core","description":"Core components library: inputs, buttons, overlays, etc."},"canvas":{"center":true,"maxWidth":400}}},{"component":"CommentHtml","slug":"comment-html","code":"import {\n  createStyles,\n  Text,\n  Avatar,\n  Group,\n  TypographyStylesProvider,\n  Paper,\n  rem,\n} from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  comment: {\n    padding: `${theme.spacing.lg} ${theme.spacing.xl}`,\n  },\n\n  body: {\n    paddingLeft: rem(54),\n    paddingTop: theme.spacing.sm,\n    fontSize: theme.fontSizes.sm,\n  },\n\n  content: {\n    '& > p:last-child': {\n      marginBottom: 0,\n    },\n  },\n}));\n\ninterface CommentHtmlProps {\n  postedAt: string;\n  body: string;\n  author: {\n    name: string;\n    image: string;\n  };\n}\n\nexport function CommentHtml({ postedAt, body, author }: CommentHtmlProps) {\n  const { classes } = useStyles();\n  return (\n    <Paper withBorder radius=\"md\" className={classes.comment}>\n      <Group>\n        <Avatar src={author.image} alt={author.name} radius=\"xl\" />\n        <div>\n          <Text fz=\"sm\">{author.name}</Text>\n          <Text fz=\"xs\" c=\"dimmed\">\n            {postedAt}\n          </Text>\n        </div>\n      </Group>\n      <TypographyStylesProvider className={classes.body}>\n        <div className={classes.content} dangerouslySetInnerHTML={{ __html: body }} />\n      </TypographyStylesProvider>\n    </Paper>\n  );\n}\n","attributes":{"title":"Comment with html content","category":"comments","author":"rtivital","dependencies":["/core/avatar/","/core/text/","/core/group/","/core/typography-styles-provider/"],"props":{"postedAt":"10 minutes ago","body":"<p>I use <a href=\"https://heroku.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Heroku</a> to host my Node.js application, but MongoDB add-on appears to be too <strong>expensive</strong>. I consider switching to <a href=\"https://www.digitalocean.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Digital Ocean</a> VPS to save some cash.</p>","author":{"name":"Jacob Warnhalter","image":"https://images.unsplash.com/photo-1624298357597-fd92dfbec01d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80"}},"canvas":{"center":true,"maxWidth":380}}},{"component":"CommentSimple","slug":"comment-simple","code":"import { createStyles, Text, Avatar, Group, rem } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  body: {\n    paddingLeft: rem(54),\n    paddingTop: theme.spacing.sm,\n  },\n}));\n\ninterface CommentSimpleProps {\n  postedAt: string;\n  body: string;\n  author: {\n    name: string;\n    image: string;\n  };\n}\n\nexport function CommentSimple({ postedAt, body, author }: CommentSimpleProps) {\n  const { classes } = useStyles();\n  return (\n    <div>\n      <Group>\n        <Avatar src={author.image} alt={author.name} radius=\"xl\" />\n        <div>\n          <Text size=\"sm\">{author.name}</Text>\n          <Text size=\"xs\" color=\"dimmed\">\n            {postedAt}\n          </Text>\n        </div>\n      </Group>\n      <Text className={classes.body} size=\"sm\">\n        {body}\n      </Text>\n    </div>\n  );\n}\n","attributes":{"title":"Comment","category":"comments","author":"rtivital","dependencies":["/core/avatar/","/core/text/","/core/group/"],"props":{"postedAt":"10 minutes ago","body":"This Pokémon likes to lick its palms that are sweetened by being soaked in honey. Teddiursa concocts its own honey by blending fruits and pollen collected by Beedrill. Blastoise has water spouts that protrude from its shell. The water spouts are very accurate.","author":{"name":"Jacob Warnhalter","image":"https://images.unsplash.com/photo-1624298357597-fd92dfbec01d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80"}},"canvas":{"center":true,"maxWidth":380}}},{"component":"ContactIcons","slug":"contact-icons","code":"import { createStyles, ThemeIcon, Text, SimpleGrid, Box, Stack } from '@mantine/core';\nimport { IconSun, IconPhone, IconMapPin, IconAt } from '@tabler/icons-react';\n\ntype ContactIconVariant = 'white' | 'gradient';\n\ninterface ContactIconStyles {\n  variant: ContactIconVariant;\n}\n\nconst useStyles = createStyles((theme, { variant }: ContactIconStyles) => ({\n  wrapper: {\n    display: 'flex',\n    alignItems: 'center',\n    color: theme.white,\n  },\n\n  icon: {\n    marginRight: theme.spacing.md,\n    backgroundImage:\n      variant === 'gradient'\n        ? `linear-gradient(135deg, ${theme.colors[theme.primaryColor][4]} 0%, ${\n            theme.colors[theme.primaryColor][6]\n          } 100%)`\n        : 'none',\n    backgroundColor: 'transparent',\n  },\n\n  title: {\n    color: variant === 'gradient' ? theme.colors.gray[6] : theme.colors[theme.primaryColor][0],\n  },\n\n  description: {\n    color: variant === 'gradient' ? theme.black : theme.white,\n  },\n}));\n\ninterface ContactIconProps extends Omit<React.ComponentPropsWithoutRef<'div'>, 'title'> {\n  icon: React.FC<any>;\n  title: React.ReactNode;\n  description: React.ReactNode;\n  variant?: ContactIconVariant;\n}\n\nfunction ContactIcon({\n  icon: Icon,\n  title,\n  description,\n  variant = 'gradient',\n  className,\n  ...others\n}: ContactIconProps) {\n  const { classes, cx } = useStyles({ variant });\n  return (\n    <div className={cx(classes.wrapper, className)} {...others}>\n      {variant === 'gradient' ? (\n        <ThemeIcon size={40} radius=\"md\" className={classes.icon}>\n          <Icon size=\"1.5rem\" />\n        </ThemeIcon>\n      ) : (\n        <Box mr=\"md\">\n          <Icon size=\"1.5rem\" />\n        </Box>\n      )}\n\n      <div>\n        <Text size=\"xs\" className={classes.title}>\n          {title}\n        </Text>\n        <Text className={classes.description}>{description}</Text>\n      </div>\n    </div>\n  );\n}\n\ninterface ContactIconsListProps {\n  data?: ContactIconProps[];\n  variant?: ContactIconVariant;\n}\n\nconst MOCKDATA = [\n  { title: 'Email', description: 'hello@mantine.dev', icon: IconAt },\n  { title: 'Phone', description: '+49 (800) 335 35 35', icon: IconPhone },\n  { title: 'Address', description: '844 Morris Park avenue', icon: IconMapPin },\n  { title: 'Working hours', description: '8 a.m. – 11 p.m.', icon: IconSun },\n];\n\nexport function ContactIconsList({ data = MOCKDATA, variant }: ContactIconsListProps) {\n  const items = data.map((item, index) => <ContactIcon key={index} variant={variant} {...item} />);\n  return <Stack>{items}</Stack>;\n}\n\nexport function ContactIcons() {\n  return (\n    <SimpleGrid cols={2} breakpoints={[{ maxWidth: 755, cols: 1 }]}>\n      <Box\n        sx={(theme) => ({\n          padding: theme.spacing.xl,\n          borderRadius: theme.radius.md,\n          backgroundColor: theme.white,\n        })}\n      >\n        <ContactIconsList />\n      </Box>\n\n      <Box\n        sx={(theme) => ({\n          padding: theme.spacing.xl,\n          borderRadius: theme.radius.md,\n          backgroundImage: `linear-gradient(135deg, ${theme.colors[theme.primaryColor][6]} 0%, ${\n            theme.colors[theme.primaryColor][4]\n          } 100%)`,\n        })}\n      >\n        <ContactIconsList variant=\"white\" />\n      </Box>\n    </SimpleGrid>\n  );\n}\n","attributes":{"title":"Contact information with icons","category":"contact","author":"rtivital","withColor":true,"dependencies":["/core/select/","/core/text-input/","/dates/date-picker/","@tabler/icons-react"],"canvas":{"center":true,"maxWidth":980}}},{"component":"ContactUs","slug":"contact-us","code":"import {\n  createStyles,\n  Text,\n  Title,\n  SimpleGrid,\n  TextInput,\n  Textarea,\n  Button,\n  Group,\n  ActionIcon,\n  rem,\n} from '@mantine/core';\nimport { IconBrandTwitter, IconBrandYoutube, IconBrandInstagram } from '@tabler/icons-react';\nimport { ContactIconsList } from '../ContactIcons/ContactIcons';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    minHeight: 400,\n    boxSizing: 'border-box',\n    backgroundImage: `linear-gradient(-60deg, ${theme.colors[theme.primaryColor][4]} 0%, ${\n      theme.colors[theme.primaryColor][7]\n    } 100%)`,\n    borderRadius: theme.radius.md,\n    padding: `calc(${theme.spacing.xl} * 2.5)`,\n\n    [theme.fn.smallerThan('sm')]: {\n      padding: `calc(${theme.spacing.xl} * 1.5)`,\n    },\n  },\n\n  title: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    color: theme.white,\n    lineHeight: 1,\n  },\n\n  description: {\n    color: theme.colors[theme.primaryColor][0],\n    maxWidth: rem(300),\n\n    [theme.fn.smallerThan('sm')]: {\n      maxWidth: '100%',\n    },\n  },\n\n  form: {\n    backgroundColor: theme.white,\n    padding: theme.spacing.xl,\n    borderRadius: theme.radius.md,\n    boxShadow: theme.shadows.lg,\n  },\n\n  social: {\n    color: theme.white,\n\n    '&:hover': {\n      color: theme.colors[theme.primaryColor][1],\n    },\n  },\n\n  input: {\n    backgroundColor: theme.white,\n    borderColor: theme.colors.gray[4],\n    color: theme.black,\n\n    '&::placeholder': {\n      color: theme.colors.gray[5],\n    },\n  },\n\n  inputLabel: {\n    color: theme.black,\n  },\n\n  control: {\n    backgroundColor: theme.colors[theme.primaryColor][6],\n  },\n}));\n\nconst social = [IconBrandTwitter, IconBrandYoutube, IconBrandInstagram];\n\nexport function ContactUs() {\n  const { classes } = useStyles();\n\n  const icons = social.map((Icon, index) => (\n    <ActionIcon key={index} size={28} className={classes.social} variant=\"transparent\">\n      <Icon size=\"1.4rem\" stroke={1.5} />\n    </ActionIcon>\n  ));\n\n  return (\n    <div className={classes.wrapper}>\n      <SimpleGrid cols={2} spacing={50} breakpoints={[{ maxWidth: 'sm', cols: 1 }]}>\n        <div>\n          <Title className={classes.title}>Contact us</Title>\n          <Text className={classes.description} mt=\"sm\" mb={30}>\n            Leave your email and we will get back to you within 24 hours\n          </Text>\n\n          <ContactIconsList variant=\"white\" />\n\n          <Group mt=\"xl\">{icons}</Group>\n        </div>\n        <div className={classes.form}>\n          <TextInput\n            label=\"Email\"\n            placeholder=\"your@email.com\"\n            required\n            classNames={{ input: classes.input, label: classes.inputLabel }}\n          />\n          <TextInput\n            label=\"Name\"\n            placeholder=\"John Doe\"\n            mt=\"md\"\n            classNames={{ input: classes.input, label: classes.inputLabel }}\n          />\n          <Textarea\n            required\n            label=\"Your message\"\n            placeholder=\"I want to order your goods\"\n            minRows={4}\n            mt=\"md\"\n            classNames={{ input: classes.input, label: classes.inputLabel }}\n          />\n\n          <Group position=\"right\" mt=\"md\">\n            <Button className={classes.control}>Send message</Button>\n          </Group>\n        </div>\n      </SimpleGrid>\n    </div>\n  );\n}\n","attributes":{"title":"Contact us form","category":"contact","author":"rtivital","responsive":true,"withColor":true,"dependencies":["/core/title/","/core/text-input/","/core/textarea/","/core/text/","/core/button/","/core/group/","/core/simple-grid/","/core/action-icon/","/component/contact-icons/","@tabler/icons-react"],"canvas":{"center":true,"maxWidth":1000}}},{"component":"ContainedInputs","slug":"contained-inputs","code":"import { createStyles, rem, Select, TextInput } from '@mantine/core';\nimport { DatePickerInput } from '@mantine/dates';\n\nconst useStyles = createStyles((theme) => ({\n  root: {\n    position: 'relative',\n  },\n\n  input: {\n    height: rem(54),\n    paddingTop: rem(18),\n  },\n\n  label: {\n    position: 'absolute',\n    pointerEvents: 'none',\n    fontSize: theme.fontSizes.xs,\n    paddingLeft: theme.spacing.sm,\n    paddingTop: `calc(${theme.spacing.sm} / 2)`,\n    zIndex: 1,\n  },\n}));\n\nexport function ContainedInputs() {\n  // You can add these classes as classNames to any Mantine input, it will work the same\n  const { classes } = useStyles();\n\n  return (\n    <div>\n      <TextInput label=\"Shipping address\" placeholder=\"15329 Huston 21st\" classNames={classes} />\n\n      <Select\n        mt=\"md\"\n        withinPortal\n        data={['React', 'Angular', 'Svelte', 'Vue']}\n        placeholder=\"Pick one\"\n        label=\"Your favorite library/framework\"\n        classNames={classes}\n      />\n\n      <DatePickerInput\n        mt=\"md\"\n        popoverProps={{ withinPortal: true }}\n        label=\"Departure date\"\n        placeholder=\"When will you leave?\"\n        classNames={classes}\n        clearable={false}\n      />\n    </div>\n  );\n}\n","attributes":{"title":"Inputs with label inside input","category":"inputs","author":"rtivital","dependencies":["/core/select/","/core/text-input/","/dates/date-picker/"],"canvas":{"center":true,"maxWidth":420}}},{"component":"CookiesBanner","slug":"cookies-banner","code":"import { Button, Paper, Text, Group, CloseButton } from '@mantine/core';\n\nexport function CookiesBanner() {\n  return (\n    <Paper withBorder p=\"lg\" radius=\"md\" shadow=\"md\">\n      <Group position=\"apart\" mb=\"xs\">\n        <Text fz=\"md\" fw={500}>\n          Allow cookies\n        </Text>\n        <CloseButton mr={-9} mt={-9} />\n      </Group>\n      <Text c=\"dimmed\" fz=\"xs\">\n        So the deal is, we want to spy on you. We would like to know what did you have for todays\n        breakfast, where do you live, how much do you earn and like 50 other things. To view our\n        landing page you will have to accept all cookies. That&apos;s all, and remember that we are\n        watching...\n      </Text>\n      <Group position=\"right\" mt=\"md\">\n        <Button variant=\"default\" size=\"xs\">\n          Cookies preferences\n        </Button>\n        <Button variant=\"outline\" size=\"xs\">\n          Accept all\n        </Button>\n      </Group>\n    </Paper>\n  );\n}\n","attributes":{"title":"Cookies banner","category":"banners","author":"rtivital","withColor":true,"dimmed":true,"dependencies":[],"canvas":{"center":true,"maxWidth":420}}},{"component":"CurrencyInput","slug":"currency-input","code":"import { NativeSelect, rem, TextInput } from '@mantine/core';\n\nconst data = [\n  { value: 'eur', label: '🇪🇺 EUR' },\n  { value: 'usd', label: '🇺🇸 USD' },\n  { value: 'cad', label: '🇨🇦 CAD' },\n  { value: 'gbp', label: '🇬🇧 GBP' },\n  { value: 'aud', label: '🇦🇺 AUD' },\n];\n\nexport function CurrencyInput() {\n  const select = (\n    <NativeSelect\n      data={data}\n      styles={{\n        input: {\n          fontWeight: 500,\n          borderTopLeftRadius: 0,\n          borderBottomLeftRadius: 0,\n          width: rem(92),\n        },\n      }}\n    />\n  );\n\n  return (\n    <TextInput\n      type=\"number\"\n      placeholder=\"1000\"\n      label=\"Transfer amount\"\n      rightSection={select}\n      rightSectionWidth={92}\n    />\n  );\n}\n","attributes":{"title":"Number input with currency select","category":"inputs","author":"rtivital","dependencies":["/core/text-input/","/core/native-select/"],"canvas":{"center":true,"maxWidth":420}}},{"component":"CustomSwitch","slug":"custom-switch","code":"import { createStyles, Switch, Group, rem } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  body: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n\n  track: {\n    width: rem(40),\n    height: rem(6),\n    overflow: 'visible',\n  },\n\n  thumb: {\n    width: rem(20),\n    height: rem(20),\n    left: rem(-2),\n    transition: 'background-color 100ms ease, left 100ms ease',\n\n    'input:checked + * > &': {\n      backgroundColor: theme.fn.primaryColor(),\n    },\n  },\n}));\n\nexport function CustomSwitch() {\n  const { classes } = useStyles();\n  return (\n    <Group position=\"center\" p=\"md\">\n      <Switch label=\"Custom Switch\" classNames={classes} />\n    </Group>\n  );\n}\n","attributes":{"title":"Custom switch","category":"inputs","author":"rtivital","withColor":true,"dependencies":["/core/switch/"],"changelog":"september-2022","canvas":{"center":true}}},{"component":"DndList","slug":"dnd-list","code":"import { createStyles, Text, rem } from '@mantine/core';\nimport { useListState } from '@mantine/hooks';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\nconst useStyles = createStyles((theme) => ({\n  item: {\n    ...theme.fn.focusStyles(),\n    display: 'flex',\n    alignItems: 'center',\n    borderRadius: theme.radius.md,\n    border: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[2]\n    }`,\n    padding: `${theme.spacing.sm} ${theme.spacing.xl}`,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.white,\n    marginBottom: theme.spacing.sm,\n  },\n\n  itemDragging: {\n    boxShadow: theme.shadows.sm,\n  },\n\n  symbol: {\n    fontSize: rem(30),\n    fontWeight: 700,\n    width: rem(60),\n  },\n}));\n\ninterface DndListProps {\n  data: {\n    position: number;\n    mass: number;\n    symbol: string;\n    name: string;\n  }[];\n}\n\nexport function DndList({ data }: DndListProps) {\n  const { classes, cx } = useStyles();\n  const [state, handlers] = useListState(data);\n\n  const items = state.map((item, index) => (\n    <Draggable key={item.symbol} index={index} draggableId={item.symbol}>\n      {(provided, snapshot) => (\n        <div\n          className={cx(classes.item, { [classes.itemDragging]: snapshot.isDragging })}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n          ref={provided.innerRef}\n        >\n          <Text className={classes.symbol}>{item.symbol}</Text>\n          <div>\n            <Text>{item.name}</Text>\n            <Text color=\"dimmed\" size=\"sm\">\n              Position: {item.position} • Mass: {item.mass}\n            </Text>\n          </div>\n        </div>\n      )}\n    </Draggable>\n  ));\n\n  return (\n    <DragDropContext\n      onDragEnd={({ destination, source }) =>\n        handlers.reorder({ from: source.index, to: destination?.index || 0 })\n      }\n    >\n      <Droppable droppableId=\"dnd-list\" direction=\"vertical\">\n        {(provided) => (\n          <div {...provided.droppableProps} ref={provided.innerRef}>\n            {items}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n}\n","attributes":{"title":"Drag'n'drop list","category":"dnd","author":"rtivital","dependencies":["/core/text/","/hooks/use-list-state/","react-beautiful-dnd"],"props":{"data":[{"position":6,"mass":12.011,"symbol":"C","name":"Carbon"},{"position":7,"mass":14.007,"symbol":"N","name":"Nitrogen"},{"position":39,"mass":88.906,"symbol":"Y","name":"Yttrium"},{"position":56,"mass":137.33,"symbol":"Ba","name":"Barium"},{"position":58,"mass":140.12,"symbol":"Ce","name":"Cerium"}]},"canvas":{"center":true,"maxWidth":420}}},{"component":"DndListHandle","slug":"dnd-list-handle","code":"import { createStyles, rem, Text } from '@mantine/core';\nimport { useListState } from '@mantine/hooks';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { IconGripVertical } from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  item: {\n    display: 'flex',\n    alignItems: 'center',\n    borderRadius: theme.radius.md,\n    border: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[2]\n    }`,\n    padding: `${theme.spacing.sm} ${theme.spacing.xl}`,\n    paddingLeft: `calc(${theme.spacing.xl} - ${theme.spacing.md})`, // to offset drag handle\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.white,\n    marginBottom: theme.spacing.sm,\n  },\n\n  itemDragging: {\n    boxShadow: theme.shadows.sm,\n  },\n\n  symbol: {\n    fontSize: rem(30),\n    fontWeight: 700,\n    width: rem(60),\n  },\n\n  dragHandle: {\n    ...theme.fn.focusStyles(),\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[1] : theme.colors.gray[6],\n    paddingLeft: theme.spacing.md,\n    paddingRight: theme.spacing.md,\n  },\n}));\n\ninterface DndListHandleProps {\n  data: {\n    position: number;\n    mass: number;\n    symbol: string;\n    name: string;\n  }[];\n}\n\nexport function DndListHandle({ data }: DndListHandleProps) {\n  const { classes, cx } = useStyles();\n  const [state, handlers] = useListState(data);\n\n  const items = state.map((item, index) => (\n    <Draggable key={item.symbol} index={index} draggableId={item.symbol}>\n      {(provided, snapshot) => (\n        <div\n          className={cx(classes.item, { [classes.itemDragging]: snapshot.isDragging })}\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n        >\n          <div {...provided.dragHandleProps} className={classes.dragHandle}>\n            <IconGripVertical size=\"1.05rem\" stroke={1.5} />\n          </div>\n          <Text className={classes.symbol}>{item.symbol}</Text>\n          <div>\n            <Text>{item.name}</Text>\n            <Text color=\"dimmed\" size=\"sm\">\n              Position: {item.position} • Mass: {item.mass}\n            </Text>\n          </div>\n        </div>\n      )}\n    </Draggable>\n  ));\n\n  return (\n    <DragDropContext\n      onDragEnd={({ destination, source }) =>\n        handlers.reorder({ from: source.index, to: destination?.index || 0 })\n      }\n    >\n      <Droppable droppableId=\"dnd-list\" direction=\"vertical\">\n        {(provided) => (\n          <div {...provided.droppableProps} ref={provided.innerRef}>\n            {items}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n}\n","attributes":{"title":"Drag'n'drop list with handle","category":"dnd","author":"rtivital","dependencies":["/core/text/","/hooks/use-list-state/","react-beautiful-dnd"],"props":{"data":[{"position":6,"mass":12.011,"symbol":"C","name":"Carbon"},{"position":7,"mass":14.007,"symbol":"N","name":"Nitrogen"},{"position":39,"mass":88.906,"symbol":"Y","name":"Yttrium"},{"position":56,"mass":137.33,"symbol":"Ba","name":"Barium"},{"position":58,"mass":140.12,"symbol":"Ce","name":"Cerium"}]},"canvas":{"center":true,"maxWidth":420}}},{"component":"DndTable","slug":"dnd-table","code":"import { createStyles, Table, ScrollArea, rem } from '@mantine/core';\nimport { useListState } from '@mantine/hooks';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { IconGripVertical } from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  item: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n  },\n\n  dragHandle: {\n    ...theme.fn.focusStyles(),\n    width: rem(40),\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '100%',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[1] : theme.colors.gray[6],\n  },\n}));\n\ninterface DndTableProps {\n  data: {\n    position: number;\n    mass: number;\n    symbol: string;\n    name: string;\n  }[];\n}\n\nexport function DndTable({ data }: DndTableProps) {\n  const { classes } = useStyles();\n  const [state, handlers] = useListState(data);\n\n  const items = state.map((item, index) => (\n    <Draggable key={item.symbol} index={index} draggableId={item.symbol}>\n      {(provided) => (\n        <tr className={classes.item} ref={provided.innerRef} {...provided.draggableProps}>\n          <td>\n            <div className={classes.dragHandle} {...provided.dragHandleProps}>\n              <IconGripVertical size=\"1.05rem\" stroke={1.5} />\n            </div>\n          </td>\n          <td style={{ width: rem(80) }}>{item.position}</td>\n          <td style={{ width: rem(120) }}>{item.name}</td>\n          <td style={{ width: rem(80) }}>{item.symbol}</td>\n          <td>{item.mass}</td>\n        </tr>\n      )}\n    </Draggable>\n  ));\n\n  return (\n    <ScrollArea>\n      <DragDropContext\n        onDragEnd={({ destination, source }) =>\n          handlers.reorder({ from: source.index, to: destination?.index || 0 })\n        }\n      >\n        <Table sx={{ minWidth: rem(420), '& tbody tr td': { borderBottom: 0 } }}>\n          <thead>\n            <tr>\n              <th style={{ width: rem(40) }} />\n              <th style={{ width: rem(80) }}>Position</th>\n              <th style={{ width: rem(120) }}>Name</th>\n              <th style={{ width: rem(40) }}>Symbol</th>\n              <th>Mass</th>\n            </tr>\n          </thead>\n          <Droppable droppableId=\"dnd-list\" direction=\"vertical\">\n            {(provided) => (\n              <tbody {...provided.droppableProps} ref={provided.innerRef}>\n                {items}\n                {provided.placeholder}\n              </tbody>\n            )}\n          </Droppable>\n        </Table>\n      </DragDropContext>\n    </ScrollArea>\n  );\n}\n","attributes":{"title":"Drag'n'drop table","category":"dnd","author":"rtivital","dependencies":["/core/text/","/hooks/use-list-state/","react-beautiful-dnd"],"props":{"data":[{"position":6,"mass":12.011,"symbol":"C","name":"Carbon"},{"position":7,"mass":14.007,"symbol":"N","name":"Nitrogen"},{"position":39,"mass":88.906,"symbol":"Y","name":"Yttrium"},{"position":56,"mass":137.33,"symbol":"Ba","name":"Barium"},{"position":58,"mass":140.12,"symbol":"Ce","name":"Cerium"}]},"canvas":{"center":true,"maxWidth":420}}},{"component":"DoubleHeader","slug":"double-header","code":"import { useState } from 'react';\nimport { createStyles, Header, Container, Anchor, Group, Burger, rem } from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport { MantineLogo } from '@mantine/ds';\n\nconst HEADER_HEIGHT = rem(84);\n\nconst useStyles = createStyles((theme) => ({\n  inner: {\n    height: HEADER_HEIGHT,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n\n  burger: {\n    [theme.fn.largerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  links: {\n    paddingTop: theme.spacing.lg,\n    height: HEADER_HEIGHT,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n\n    [theme.fn.smallerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  mainLinks: {\n    marginRight: `calc(${theme.spacing.sm} * -1)`,\n  },\n\n  mainLink: {\n    textTransform: 'uppercase',\n    fontSize: rem(13),\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[1] : theme.colors.gray[6],\n    padding: `${rem(7)} ${theme.spacing.sm}`,\n    fontWeight: 700,\n    borderBottom: `${rem(2)} solid transparent`,\n    transition: 'border-color 100ms ease, color 100ms ease',\n\n    '&:hover': {\n      color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n      textDecoration: 'none',\n    },\n  },\n\n  secondaryLink: {\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[2] : theme.colors.gray[6],\n    fontSize: theme.fontSizes.xs,\n    textTransform: 'uppercase',\n    transition: 'color 100ms ease',\n\n    '&:hover': {\n      color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n      textDecoration: 'none',\n    },\n  },\n\n  mainLinkActive: {\n    color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    borderBottomColor: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 5 : 6],\n  },\n}));\n\ninterface LinkProps {\n  label: string;\n  link: string;\n}\n\ninterface DoubleHeaderProps {\n  mainLinks: LinkProps[];\n  userLinks: LinkProps[];\n}\n\nexport function DoubleHeader({ mainLinks, userLinks }: DoubleHeaderProps) {\n  const [opened, { toggle }] = useDisclosure(false);\n  const { classes, cx } = useStyles();\n  const [active, setActive] = useState(0);\n\n  const mainItems = mainLinks.map((item, index) => (\n    <Anchor<'a'>\n      href={item.link}\n      key={item.label}\n      className={cx(classes.mainLink, { [classes.mainLinkActive]: index === active })}\n      onClick={(event) => {\n        event.preventDefault();\n        setActive(index);\n      }}\n    >\n      {item.label}\n    </Anchor>\n  ));\n\n  const secondaryItems = userLinks.map((item) => (\n    <Anchor<'a'>\n      href={item.link}\n      key={item.label}\n      onClick={(event) => event.preventDefault()}\n      className={classes.secondaryLink}\n    >\n      {item.label}\n    </Anchor>\n  ));\n\n  return (\n    <Header height={HEADER_HEIGHT} mb={120}>\n      <Container className={classes.inner}>\n        <MantineLogo size={34} />\n        <div className={classes.links}>\n          <Group position=\"right\">{secondaryItems}</Group>\n          <Group spacing={0} position=\"right\" className={classes.mainLinks}>\n            {mainItems}\n          </Group>\n        </div>\n        <Burger opened={opened} onClick={toggle} className={classes.burger} size=\"sm\" />\n      </Container>\n    </Header>\n  );\n}\n","attributes":{"title":"Header with multiple layers","category":"headers","author":"rtivital","withColor":true,"responsive":true,"dependencies":["/core/app-shell/","/core/button/#unstyled-button"],"props":{"userLinks":[{"link":"#","label":"Privacy & Security"},{"link":"#","label":"Account settings"},{"link":"#","label":"Support options"}],"mainLinks":[{"link":"#","label":"Book a demo"},{"link":"#","label":"Documentation"},{"link":"#","label":"Community"},{"link":"#","label":"Academy"},{"link":"#","label":"Forums"}]},"canvas":{"center":false}}},{"component":"DoubleHeaderColored","slug":"double-header-colored","code":"import { useState } from 'react';\nimport { createStyles, Header, Container, Anchor, Group, Burger, rem } from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport { MantineLogo } from '@mantine/ds';\n\nconst HEADER_HEIGHT = rem(84);\n\nconst useStyles = createStyles((theme) => ({\n  header: {\n    backgroundColor: theme.fn.variant({ variant: 'filled', color: theme.primaryColor }).background,\n    borderBottom: 0,\n  },\n\n  inner: {\n    height: HEADER_HEIGHT,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n  },\n\n  burger: {\n    [theme.fn.largerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  links: {\n    paddingTop: theme.spacing.lg,\n    height: HEADER_HEIGHT,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n\n    [theme.fn.smallerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  mainLinks: {\n    marginRight: -theme.spacing.sm,\n  },\n\n  mainLink: {\n    textTransform: 'uppercase',\n    fontSize: rem(13),\n    color: theme.white,\n    padding: `${rem(7)} ${theme.spacing.sm}`,\n    fontWeight: 700,\n    borderBottom: `${rem(2)} solid transparent`,\n    transition: 'border-color 100ms ease, opacity 100ms ease',\n    opacity: 0.9,\n    borderTopRightRadius: theme.radius.sm,\n    borderTopLeftRadius: theme.radius.sm,\n\n    '&:hover': {\n      opacity: 1,\n      textDecoration: 'none',\n    },\n  },\n\n  secondaryLink: {\n    color: theme.colors[theme.primaryColor][0],\n    fontSize: theme.fontSizes.xs,\n    textTransform: 'uppercase',\n    transition: 'color 100ms ease',\n\n    '&:hover': {\n      color: theme.white,\n      textDecoration: 'none',\n    },\n  },\n\n  mainLinkActive: {\n    color: theme.white,\n    opacity: 1,\n    borderBottomColor:\n      theme.colorScheme === 'dark' ? theme.white : theme.colors[theme.primaryColor][5],\n    backgroundColor: theme.fn.lighten(\n      theme.fn.variant({ variant: 'filled', color: theme.primaryColor }).background!,\n      0.1\n    ),\n  },\n}));\n\ninterface LinkProps {\n  label: string;\n  link: string;\n}\n\ninterface DoubleHeaderProps {\n  mainLinks: LinkProps[];\n  userLinks: LinkProps[];\n}\n\nexport function DoubleHeaderColored({ mainLinks, userLinks }: DoubleHeaderProps) {\n  const [opened, { toggle }] = useDisclosure(false);\n  const { classes, cx } = useStyles();\n  const [active, setActive] = useState(0);\n\n  const mainItems = mainLinks.map((item, index) => (\n    <Anchor<'a'>\n      href={item.link}\n      key={item.label}\n      className={cx(classes.mainLink, { [classes.mainLinkActive]: index === active })}\n      onClick={(event) => {\n        event.preventDefault();\n        setActive(index);\n      }}\n    >\n      {item.label}\n    </Anchor>\n  ));\n\n  const secondaryItems = userLinks.map((item) => (\n    <Anchor<'a'>\n      href={item.link}\n      key={item.label}\n      onClick={(event) => event.preventDefault()}\n      className={classes.secondaryLink}\n    >\n      {item.label}\n    </Anchor>\n  ));\n\n  return (\n    <Header height={HEADER_HEIGHT} mb={120} className={classes.header}>\n      <Container className={classes.inner}>\n        <div style={{ color: '#fff' }}>\n          <MantineLogo size={34} inverted />\n        </div>\n\n        <div className={classes.links}>\n          <Group position=\"right\">{secondaryItems}</Group>\n          <Group spacing={0} position=\"right\" className={classes.mainLinks}>\n            {mainItems}\n          </Group>\n        </div>\n        <Burger\n          opened={opened}\n          onClick={toggle}\n          className={classes.burger}\n          size=\"sm\"\n          color=\"#fff\"\n        />\n      </Container>\n    </Header>\n  );\n}\n","attributes":{"title":"Header with multiple layers","category":"headers","author":"rtivital","withColor":true,"responsive":true,"dependencies":["/core/app-shell/","/core/button/#unstyled-button"],"props":{"userLinks":[{"link":"#","label":"Privacy & Security"},{"link":"#","label":"Account settings"},{"link":"#","label":"Support options"}],"mainLinks":[{"link":"#","label":"Book a demo"},{"link":"#","label":"Documentation"},{"link":"#","label":"Community"},{"link":"#","label":"Academy"},{"link":"#","label":"Forums"}]},"canvas":{"center":false}}},{"component":"DoubleNavbar","slug":"double-navbar","code":"import { useState } from 'react';\nimport { createStyles, Navbar, UnstyledButton, Tooltip, Title, rem } from '@mantine/core';\nimport {\n  IconHome2,\n  IconGauge,\n  IconDeviceDesktopAnalytics,\n  IconFingerprint,\n  IconCalendarStats,\n  IconUser,\n  IconSettings,\n} from '@tabler/icons-react';\nimport { MantineLogo } from '@mantine/ds';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    display: 'flex',\n  },\n\n  aside: {\n    flex: `0 0 ${rem(60)}`,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    borderRight: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[3]\n    }`,\n  },\n\n  main: {\n    flex: 1,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n  },\n\n  mainLink: {\n    width: rem(44),\n    height: rem(44),\n    borderRadius: theme.radius.md,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[0],\n    },\n  },\n\n  mainLinkActive: {\n    '&, &:hover': {\n      backgroundColor: theme.fn.variant({ variant: 'light', color: theme.primaryColor }).background,\n      color: theme.fn.variant({ variant: 'light', color: theme.primaryColor }).color,\n    },\n  },\n\n  title: {\n    boxSizing: 'border-box',\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    marginBottom: theme.spacing.xl,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n    padding: theme.spacing.md,\n    paddingTop: rem(18),\n    height: rem(60),\n    borderBottom: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[3]\n    }`,\n  },\n\n  logo: {\n    boxSizing: 'border-box',\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    height: rem(60),\n    paddingTop: theme.spacing.md,\n    borderBottom: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[3]\n    }`,\n    marginBottom: theme.spacing.xl,\n  },\n\n  link: {\n    boxSizing: 'border-box',\n    display: 'block',\n    textDecoration: 'none',\n    borderTopRightRadius: theme.radius.md,\n    borderBottomRightRadius: theme.radius.md,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n    padding: `0 ${theme.spacing.md}`,\n    fontSize: theme.fontSizes.sm,\n    marginRight: theme.spacing.md,\n    fontWeight: 500,\n    height: rem(44),\n    lineHeight: rem(44),\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[1],\n      color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    },\n  },\n\n  linkActive: {\n    '&, &:hover': {\n      borderLeftColor: theme.fn.variant({ variant: 'filled', color: theme.primaryColor })\n        .background,\n      backgroundColor: theme.fn.variant({ variant: 'filled', color: theme.primaryColor })\n        .background,\n      color: theme.white,\n    },\n  },\n}));\n\nconst mainLinksMockdata = [\n  { icon: IconHome2, label: 'Home' },\n  { icon: IconGauge, label: 'Dashboard' },\n  { icon: IconDeviceDesktopAnalytics, label: 'Analytics' },\n  { icon: IconCalendarStats, label: 'Releases' },\n  { icon: IconUser, label: 'Account' },\n  { icon: IconFingerprint, label: 'Security' },\n  { icon: IconSettings, label: 'Settings' },\n];\n\nconst linksMockdata = [\n  'Security',\n  'Settings',\n  'Dashboard',\n  'Releases',\n  'Account',\n  'Orders',\n  'Clients',\n  'Databases',\n  'Pull Requests',\n  'Open Issues',\n  'Wiki pages',\n];\n\nexport function DoubleNavbar() {\n  const { classes, cx } = useStyles();\n  const [active, setActive] = useState('Releases');\n  const [activeLink, setActiveLink] = useState('Settings');\n\n  const mainLinks = mainLinksMockdata.map((link) => (\n    <Tooltip\n      label={link.label}\n      position=\"right\"\n      withArrow\n      transitionProps={{ duration: 0 }}\n      key={link.label}\n    >\n      <UnstyledButton\n        onClick={() => setActive(link.label)}\n        className={cx(classes.mainLink, { [classes.mainLinkActive]: link.label === active })}\n      >\n        <link.icon size=\"1.4rem\" stroke={1.5} />\n      </UnstyledButton>\n    </Tooltip>\n  ));\n\n  const links = linksMockdata.map((link) => (\n    <a\n      className={cx(classes.link, { [classes.linkActive]: activeLink === link })}\n      href=\"/\"\n      onClick={(event) => {\n        event.preventDefault();\n        setActiveLink(link);\n      }}\n      key={link}\n    >\n      {link}\n    </a>\n  ));\n\n  return (\n    <Navbar height={750} width={{ sm: 300 }}>\n      <Navbar.Section grow className={classes.wrapper}>\n        <div className={classes.aside}>\n          <div className={classes.logo}>\n            <MantineLogo type=\"mark\" size={30} />\n          </div>\n          {mainLinks}\n        </div>\n        <div className={classes.main}>\n          <Title order={4} className={classes.title}>\n            {active}\n          </Title>\n\n          {links}\n        </div>\n      </Navbar.Section>\n    </Navbar>\n  );\n}\n","attributes":{"title":"Navbar with 2 sections","category":"navbars","author":"rtivital","withColor":true,"dependencies":["/core/app-shell/","/core/button/#unstyled-button","/core/tooltip/","/core/title/","@tabler/icons-react"],"canvas":{"center":false}}},{"component":"DropzoneButton","slug":"dropzone-button","code":"import { useRef } from 'react';\nimport { Text, Group, Button, createStyles, rem } from '@mantine/core';\nimport { Dropzone, MIME_TYPES } from '@mantine/dropzone';\nimport { IconCloudUpload, IconX, IconDownload } from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    position: 'relative',\n    marginBottom: rem(30),\n  },\n\n  dropzone: {\n    borderWidth: rem(1),\n    paddingBottom: rem(50),\n  },\n\n  icon: {\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[3] : theme.colors.gray[4],\n  },\n\n  control: {\n    position: 'absolute',\n    width: rem(250),\n    left: `calc(50% - ${rem(125)})`,\n    bottom: rem(-20),\n  },\n}));\n\nexport function DropzoneButton() {\n  const { classes, theme } = useStyles();\n  const openRef = useRef<() => void>(null);\n\n  return (\n    <div className={classes.wrapper}>\n      <Dropzone\n        openRef={openRef}\n        onDrop={() => {}}\n        className={classes.dropzone}\n        radius=\"md\"\n        accept={[MIME_TYPES.pdf]}\n        maxSize={30 * 1024 ** 2}\n      >\n        <div style={{ pointerEvents: 'none' }}>\n          <Group position=\"center\">\n            <Dropzone.Accept>\n              <IconDownload\n                size={rem(50)}\n                color={theme.colors[theme.primaryColor][6]}\n                stroke={1.5}\n              />\n            </Dropzone.Accept>\n            <Dropzone.Reject>\n              <IconX size={rem(50)} color={theme.colors.red[6]} stroke={1.5} />\n            </Dropzone.Reject>\n            <Dropzone.Idle>\n              <IconCloudUpload\n                size={rem(50)}\n                color={theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.black}\n                stroke={1.5}\n              />\n            </Dropzone.Idle>\n          </Group>\n\n          <Text ta=\"center\" fw={700} fz=\"lg\" mt=\"xl\">\n            <Dropzone.Accept>Drop files here</Dropzone.Accept>\n            <Dropzone.Reject>Pdf file less than 30mb</Dropzone.Reject>\n            <Dropzone.Idle>Upload resume</Dropzone.Idle>\n          </Text>\n          <Text ta=\"center\" fz=\"sm\" mt=\"xs\" c=\"dimmed\">\n            Drag&apos;n&apos;drop files here to upload. We can accept only <i>.pdf</i> files that\n            are less than 30mb in size.\n          </Text>\n        </div>\n      </Dropzone>\n\n      <Button className={classes.control} size=\"md\" radius=\"xl\" onClick={() => openRef.current?.()}>\n        Select files\n      </Button>\n    </div>\n  );\n}\n","attributes":{"title":"Dropzone with button","category":"dropzones","author":"rtivital","withColor":true,"dependencies":["/others/dropzone/","/core/button/","/core/group/"],"canvas":{"center":true,"maxWidth":420}}},{"component":"EmailBanner","slug":"email-banner","code":"import { createStyles, Text, Title, TextInput, Button, Image, rem } from '@mantine/core';\nimport image from './image.svg';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: `calc(${theme.spacing.xl} * 2)`,\n    borderRadius: theme.radius.md,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.white,\n    border: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.colors.gray[3]\n    }`,\n\n    [theme.fn.smallerThan('sm')]: {\n      flexDirection: 'column-reverse',\n      padding: theme.spacing.xl,\n    },\n  },\n\n  image: {\n    maxWidth: '40%',\n\n    [theme.fn.smallerThan('sm')]: {\n      maxWidth: '100%',\n    },\n  },\n\n  body: {\n    paddingRight: `calc(${theme.spacing.xl} * 4)`,\n\n    [theme.fn.smallerThan('sm')]: {\n      paddingRight: 0,\n      marginTop: theme.spacing.xl,\n    },\n  },\n\n  title: {\n    color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    lineHeight: 1,\n    marginBottom: theme.spacing.md,\n  },\n\n  controls: {\n    display: 'flex',\n    marginTop: theme.spacing.xl,\n  },\n\n  inputWrapper: {\n    width: '100%',\n    flex: '1',\n  },\n\n  input: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n    borderRight: 0,\n  },\n\n  control: {\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n}));\n\nexport function EmailBanner() {\n  const { classes } = useStyles();\n  return (\n    <div className={classes.wrapper}>\n      <div className={classes.body}>\n        <Title className={classes.title}>Wait a minute...</Title>\n        <Text fw={500} fz=\"lg\" mb={5}>\n          Subscribe to our newsletter!\n        </Text>\n        <Text fz=\"sm\" c=\"dimmed\">\n          You will never miss important product updates, latest news and community QA sessions. Our\n          newsletter is once a week, every Sunday.\n        </Text>\n\n        <div className={classes.controls}>\n          <TextInput\n            placeholder=\"Your email\"\n            classNames={{ input: classes.input, root: classes.inputWrapper }}\n          />\n          <Button className={classes.control}>Subscribe</Button>\n        </div>\n      </div>\n      <Image src={image.src} className={classes.image} />\n    </div>\n  );\n}\n","attributes":{"title":"Email banner","category":"banners","author":"rtivital","responsive":true,"withColor":true,"dimmed":true,"dependencies":["/core/button/","/core/text/","/core/title/","/core/image/","/core/text-input/","https://www.freepik.com/"],"canvas":{"center":true,"maxWidth":980}}},{"component":"FaqSimple","slug":"faq-simple","code":"import { Container, Title, Accordion, createStyles, rem } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    paddingTop: `calc(${theme.spacing.xl} * 2)`,\n    paddingBottom: `calc(${theme.spacing.xl} * 2)`,\n    minHeight: 650,\n  },\n\n  title: {\n    marginBottom: `calc(${theme.spacing.xl} * 1.5)`,\n  },\n\n  item: {\n    borderRadius: theme.radius.md,\n    marginBottom: theme.spacing.lg,\n    border: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n    }`,\n  },\n}));\n\nconst placeholder =\n  'It can’t help but hear a pin drop from over half a mile away, so it lives deep in the mountains where there aren’t many people or Pokémon.It was born from sludge on the ocean floor. In a sterile environment, the germs within its body can’t multiply, and it dies.It has no eyeballs, so it can’t see. It checks its surroundings via the ultrasonic waves it emits from its mouth.';\n\nexport function FaqSimple() {\n  const { classes } = useStyles();\n  return (\n    <Container size=\"sm\" className={classes.wrapper}>\n      <Title align=\"center\" className={classes.title}>\n        Frequently Asked Questions\n      </Title>\n\n      <Accordion variant=\"separated\">\n        <Accordion.Item className={classes.item} value=\"reset-password\">\n          <Accordion.Control>How can I reset my password?</Accordion.Control>\n          <Accordion.Panel>{placeholder}</Accordion.Panel>\n        </Accordion.Item>\n\n        <Accordion.Item className={classes.item} value=\"another-account\">\n          <Accordion.Control>Can I create more that one account?</Accordion.Control>\n          <Accordion.Panel>{placeholder}</Accordion.Panel>\n        </Accordion.Item>\n\n        <Accordion.Item className={classes.item} value=\"newsletter\">\n          <Accordion.Control>How can I subscribe to monthly newsletter?</Accordion.Control>\n          <Accordion.Panel>{placeholder}</Accordion.Panel>\n        </Accordion.Item>\n\n        <Accordion.Item className={classes.item} value=\"credit-card\">\n          <Accordion.Control>Do you store credit card information securely?</Accordion.Control>\n          <Accordion.Panel>{placeholder}</Accordion.Panel>\n        </Accordion.Item>\n\n        <Accordion.Item className={classes.item} value=\"payment\">\n          <Accordion.Control>What payment systems to you work with?</Accordion.Control>\n          <Accordion.Panel>{placeholder}</Accordion.Panel>\n        </Accordion.Item>\n      </Accordion>\n    </Container>\n  );\n}\n","attributes":{"title":"FAQ simple","category":"faq","author":"rtivital","withColor":true,"dependencies":["/core/accordion/","/core/title/","/core/container/"],"canvas":{"center":false}}},{"component":"FaqWithBg","slug":"faq-with-bg","code":"import {\n  createStyles,\n  Title,\n  Container,\n  Accordion,\n  ThemeIcon,\n  MantineProvider,\n  getStylesRef,\n  rem,\n} from '@mantine/core';\nimport { IconPlus } from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    paddingTop: `calc(${theme.spacing.xl} * 2)`,\n    minHeight: rem(820),\n    backgroundImage: `radial-gradient(${theme.colors[theme.primaryColor][6]} 0%, ${\n      theme.colors[theme.primaryColor][4]\n    } 100%)`,\n    backgroundRepeat: 'no-repeat',\n    backgroundPosition: 'top left',\n    position: 'relative',\n    color: theme.black,\n  },\n\n  title: {\n    color: theme.white,\n    fontSize: 52,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    marginBottom: `calc(${theme.spacing.xl} * 1.5)`,\n  },\n\n  item: {\n    backgroundColor: theme.white,\n    borderBottom: 0,\n    borderRadius: theme.radius.md,\n    boxShadow: theme.shadows.lg,\n    overflow: 'hidden',\n  },\n\n  control: {\n    fontSize: theme.fontSizes.lg,\n    padding: `${theme.spacing.lg} ${theme.spacing.xl}`,\n    color: theme.black,\n\n    '&:hover': {\n      backgroundColor: 'transparent',\n    },\n  },\n\n  content: {\n    paddingLeft: theme.spacing.xl,\n    lineHeight: 1.6,\n    color: theme.black,\n  },\n\n  icon: {\n    ref: getStylesRef('icon'),\n    marginLeft: theme.spacing.md,\n  },\n\n  gradient: {\n    backgroundImage: `radial-gradient(${theme.colors[theme.primaryColor][6]} 0%, ${\n      theme.colors[theme.primaryColor][5]\n    } 100%)`,\n  },\n\n  itemOpened: {\n    [`& .${getStylesRef('icon')}`]: {\n      transform: 'rotate(45deg)',\n    },\n  },\n\n  button: {\n    display: 'block',\n    marginTop: theme.spacing.md,\n\n    [theme.fn.smallerThan('sm')]: {\n      display: 'block',\n      width: '100%',\n    },\n  },\n}));\n\nconst placeholder =\n  'It can’t help but hear a pin drop from over half a mile away, so it lives deep in the mountains where there aren’t many people or Pokémon.It was born from sludge on the ocean floor. In a sterile environment, the germs within its body can’t multiply, and it dies.It has no eyeballs, so it can’t see. It checks its surroundings via the ultrasonic waves it emits from its mouth.';\n\nexport function FaqWithBg() {\n  const { classes } = useStyles();\n  return (\n    <MantineProvider inherit theme={{ colorScheme: 'light' }}>\n      <div className={classes.wrapper}>\n        <Container size=\"sm\">\n          <Title align=\"center\" className={classes.title}>\n            Frequently Asked Questions\n          </Title>\n\n          <Accordion\n            chevronPosition=\"right\"\n            defaultValue=\"reset-password\"\n            chevronSize={50}\n            variant=\"separated\"\n            disableChevronRotation\n            chevron={\n              <ThemeIcon radius=\"xl\" className={classes.gradient} size={32}>\n                <IconPlus size=\"1.05rem\" stroke={1.5} />\n              </ThemeIcon>\n            }\n          >\n            <Accordion.Item className={classes.item} value=\"reset-password\">\n              <Accordion.Control>How can I reset my password?</Accordion.Control>\n              <Accordion.Panel>{placeholder}</Accordion.Panel>\n            </Accordion.Item>\n\n            <Accordion.Item className={classes.item} value=\"another-account\">\n              <Accordion.Control>Can I create more that one account?</Accordion.Control>\n              <Accordion.Panel>{placeholder}</Accordion.Panel>\n            </Accordion.Item>\n\n            <Accordion.Item className={classes.item} value=\"newsletter\">\n              <Accordion.Control>How can I subscribe to monthly newsletter?</Accordion.Control>\n              <Accordion.Panel>{placeholder}</Accordion.Panel>\n            </Accordion.Item>\n\n            <Accordion.Item className={classes.item} value=\"credit-card\">\n              <Accordion.Control>Do you store credit card information securely?</Accordion.Control>\n              <Accordion.Panel>{placeholder}</Accordion.Panel>\n            </Accordion.Item>\n\n            <Accordion.Item className={classes.item} value=\"payment\">\n              <Accordion.Control>What payment systems to you work with?</Accordion.Control>\n              <Accordion.Panel>{placeholder}</Accordion.Panel>\n            </Accordion.Item>\n          </Accordion>\n        </Container>\n      </div>\n    </MantineProvider>\n  );\n}\n","attributes":{"title":"Faq with background","category":"faq","author":"rtivital","responsive":true,"withColor":true,"dependencies":["/core/accordion/","/core/title/","/core/container/","/core/accordion/","/core/theme-icon/","/core/button/","@tabler/icons-react"],"canvas":{"center":false}}},{"component":"FaqWithHeader","slug":"faq-with-header","code":"import {\n  createStyles,\n  Title,\n  Container,\n  Text,\n  UnstyledButton,\n  Overlay,\n  SimpleGrid,\n  rem,\n} from '@mantine/core';\nimport { ContactIconsList } from '../ContactIcons/ContactIcons';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    paddingTop: theme.spacing.md,\n    paddingBottom: `calc(${theme.spacing.xl} * 2)`,\n  },\n\n  header: {\n    height: rem(400),\n    boxSizing: 'border-box',\n    backgroundImage: `linear-gradient(135deg, ${theme.colors[theme.primaryColor][4]} 0%, ${\n      theme.colors[theme.primaryColor][6]\n    } 100%)`,\n    backgroundSize: 'cover',\n    display: 'flex',\n    alignItems: 'flex-end',\n    justifyContent: 'space-between',\n    position: 'relative',\n    padding: `calc(${theme.spacing.xl} * 1.5) calc(${theme.spacing.xl} * 2)`,\n    borderRadius: theme.radius.lg,\n    marginBottom: theme.spacing.lg,\n\n    [theme.fn.smallerThan(1080)]: {\n      height: 'auto',\n      flexDirection: 'column-reverse',\n      alignItems: 'initial',\n      padding: theme.spacing.xl,\n    },\n  },\n\n  title: {\n    color: theme.white,\n    position: 'relative',\n    zIndex: 1,\n    fontSize: rem(46),\n    fontWeight: 800,\n    letterSpacing: rem(-0.5),\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n\n    [theme.fn.smallerThan(1080)]: {\n      fontSize: rem(22),\n      textAlign: 'center',\n      marginTop: theme.spacing.xl,\n    },\n  },\n\n  titleOverlay: {\n    zIndex: 0,\n    position: 'absolute',\n    color: theme.white,\n    fontWeight: 900,\n    opacity: 0.1,\n    fontSize: rem(320),\n    lineHeight: 1,\n    top: rem(10),\n    left: rem(32),\n    pointerEvents: 'none',\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n\n    [theme.fn.smallerThan(1080)]: {\n      display: 'none',\n    },\n  },\n\n  contact: {\n    padding: `calc(${theme.spacing.xl} * 1.5)`,\n    backgroundColor: theme.white,\n    borderRadius: theme.radius.lg,\n    boxShadow: theme.shadows.md,\n\n    [theme.fn.smallerThan(1080)]: {\n      padding: theme.spacing.xl,\n    },\n  },\n\n  contactTitle: {\n    color: theme.black,\n    marginBottom: theme.spacing.xl,\n    lineHeight: 1,\n  },\n\n  categoryCard: {\n    height: rem(160),\n    position: 'relative',\n    backgroundSize: '100%',\n    backgroundPosition: 'center',\n    color: theme.white,\n    borderRadius: theme.radius.lg,\n    padding: theme.spacing.xl,\n    overflow: 'hidden',\n    transition: 'background-size 300ms ease',\n\n    '&:hover': {\n      backgroundSize: '105%',\n    },\n  },\n\n  categoryLabel: {\n    color: theme.white,\n    zIndex: 2,\n    position: 'relative',\n  },\n}));\n\ninterface FaqWithHeaderProps {\n  categories: { image: string; label: string }[];\n}\n\nexport function FaqWithHeader({ categories }: FaqWithHeaderProps) {\n  const { classes } = useStyles();\n\n  const items = categories.map((category) => (\n    <UnstyledButton\n      style={{ backgroundImage: `url(${category.image})` }}\n      className={classes.categoryCard}\n      key={category.label}\n    >\n      <Overlay color=\"#000\" opacity={0.6} zIndex={1} />\n      <Text size=\"xl\" align=\"center\" weight={700} className={classes.categoryLabel}>\n        {category.label}\n      </Text>\n    </UnstyledButton>\n  ));\n\n  return (\n    <Container className={classes.wrapper} size=\"lg\">\n      <div className={classes.header}>\n        <Title className={classes.title}>Frequently Asked Questions</Title>\n        <Title className={classes.titleOverlay} role=\"presentation\">\n          FAQ\n        </Title>\n\n        <div className={classes.contact}>\n          <Text size=\"xl\" weight={500} className={classes.contactTitle}>\n            Contact us\n          </Text>\n\n          <ContactIconsList />\n        </div>\n      </div>\n\n      <SimpleGrid cols={3} breakpoints={[{ maxWidth: 'sm', cols: 1 }]}>\n        {items}\n      </SimpleGrid>\n    </Container>\n  );\n}\n","attributes":{"title":"Faq page header","category":"faq","author":"rtivital","responsive":true,"dependencies":["/core/container/","/core/title/","/core/text/","/core/overlay","/core/simple-grid/","/core/button/#unstyled-button"],"props":{"categories":[{"label":"Customer Support","image":"https://images.unsplash.com/photo-1508780709619-79562169bc64?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=600&q=80"},{"label":"User Guides","image":"https://images.unsplash.com/photo-1516321318423-f06f85e504b3?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=600&q=80"},{"label":"Sales Questions","image":"https://images.unsplash.com/photo-1543286386-713bdd548da4?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=600&q=80"}]},"canvas":{"center":false}}},{"component":"FaqWithImage","slug":"faq-with-image","code":"import { createStyles, Image, Accordion, Grid, Col, Container, Title } from '@mantine/core';\nimport image from './image.svg';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    paddingTop: `calc(${theme.spacing.xl} * 2)`,\n    paddingBottom: `calc(${theme.spacing.xl} * 2)`,\n  },\n\n  title: {\n    marginBottom: theme.spacing.md,\n    paddingLeft: theme.spacing.md,\n    color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n  },\n\n  item: {\n    fontSize: theme.fontSizes.sm,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[1] : theme.colors.gray[7],\n  },\n}));\n\nconst placeholder =\n  'It can’t help but hear a pin drop from over half a mile away, so it lives deep in the mountains where there aren’t many people or Pokémon.';\n\nexport function FaqWithImage() {\n  const { classes } = useStyles();\n  return (\n    <div className={classes.wrapper}>\n      <Container size=\"lg\">\n        <Grid id=\"faq-grid\" gutter={50}>\n          <Col span={12} md={6}>\n            <Image src={image.src} alt=\"Frequently Asked Questions\" />\n          </Col>\n          <Col span={12} md={6}>\n            <Title order={2} ta=\"left\" className={classes.title}>\n              Frequently Asked Questions\n            </Title>\n\n            <Accordion chevronPosition=\"right\" defaultValue=\"reset-password\" variant=\"separated\">\n              <Accordion.Item className={classes.item} value=\"reset-password\">\n                <Accordion.Control>How can I reset my password?</Accordion.Control>\n                <Accordion.Panel>{placeholder}</Accordion.Panel>\n              </Accordion.Item>\n\n              <Accordion.Item className={classes.item} value=\"another-account\">\n                <Accordion.Control>Can I create more that one account?</Accordion.Control>\n                <Accordion.Panel>{placeholder}</Accordion.Panel>\n              </Accordion.Item>\n\n              <Accordion.Item className={classes.item} value=\"newsletter\">\n                <Accordion.Control>How can I subscribe to monthly newsletter?</Accordion.Control>\n                <Accordion.Panel>{placeholder}</Accordion.Panel>\n              </Accordion.Item>\n\n              <Accordion.Item className={classes.item} value=\"credit-card\">\n                <Accordion.Control>\n                  Do you store credit card information securely?\n                </Accordion.Control>\n                <Accordion.Panel>{placeholder}</Accordion.Panel>\n              </Accordion.Item>\n\n              <Accordion.Item className={classes.item} value=\"payment\">\n                <Accordion.Control>What payment systems to you work with?</Accordion.Control>\n                <Accordion.Panel>{placeholder}</Accordion.Panel>\n              </Accordion.Item>\n            </Accordion>\n          </Col>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n","attributes":{"title":"Faq with image","category":"faq","author":"rtivital","responsive":true,"dependencies":["/core/accordion/","/core/image","/core/grid/","/core/container/","/core/title","https://www.freepik.com/"],"canvas":{"center":false}}},{"component":"FeaturesAsymmetrical","slug":"features-asymmetrical","code":"import { createStyles, Text, SimpleGrid, Container, rem } from '@mantine/core';\nimport { IconTruck, IconCertificate, IconCoin } from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  feature: {\n    position: 'relative',\n    paddingTop: theme.spacing.xl,\n    paddingLeft: theme.spacing.xl,\n  },\n\n  overlay: {\n    position: 'absolute',\n    height: rem(100),\n    width: rem(160),\n    top: 0,\n    left: 0,\n    backgroundColor: theme.fn.variant({ variant: 'light', color: theme.primaryColor }).background,\n    zIndex: 1,\n  },\n\n  content: {\n    position: 'relative',\n    zIndex: 2,\n  },\n\n  icon: {\n    color: theme.fn.variant({ variant: 'light', color: theme.primaryColor }).color,\n  },\n\n  title: {\n    color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n  },\n}));\n\ninterface FeatureProps extends React.ComponentPropsWithoutRef<'div'> {\n  icon: React.FC<any>;\n  title: string;\n  description: string;\n}\n\nfunction Feature({ icon: Icon, title, description, className, ...others }: FeatureProps) {\n  const { classes, cx } = useStyles();\n\n  return (\n    <div className={cx(classes.feature, className)} {...others}>\n      <div className={classes.overlay} />\n\n      <div className={classes.content}>\n        <Icon size={rem(38)} className={classes.icon} stroke={1.5} />\n        <Text fw={700} fz=\"lg\" mb=\"xs\" mt={5} className={classes.title}>\n          {title}\n        </Text>\n        <Text c=\"dimmed\" fz=\"sm\">\n          {description}\n        </Text>\n      </div>\n    </div>\n  );\n}\n\nconst mockdata = [\n  {\n    icon: IconTruck,\n    title: 'Free Worldwide shipping',\n    description:\n      'As electricity builds up inside its body, it becomes more aggressive. One theory is that the electricity.',\n  },\n  {\n    icon: IconCertificate,\n    title: 'Best Quality Product',\n    description:\n      'Slakoth’s heart beats just once a minute. Whatever happens, it is content to loaf around motionless.',\n  },\n  {\n    icon: IconCoin,\n    title: 'Very Affordable Pricing',\n    description:\n      'Thought to have gone extinct, Relicanth was given a name that is a variation of the name of the person who discovered.',\n  },\n];\n\nexport function FeaturesAsymmetrical() {\n  const items = mockdata.map((item) => <Feature {...item} key={item.title} />);\n\n  return (\n    <Container mt={30} mb={30} size=\"lg\">\n      <SimpleGrid cols={3} breakpoints={[{ maxWidth: 'sm', cols: 1 }]} spacing={50}>\n        {items}\n      </SimpleGrid>\n    </Container>\n  );\n}\n","attributes":{"title":"Features with icons","category":"features","author":"rtivital","responsive":true,"withColor":true,"dependencies":["/core/text/","/core/simple-grid/","/core/container","@tabler/icons-react"],"canvas":{"center":false}}},{"component":"FeaturesCard","slug":"features-card","code":"import { Card, Image, Text, Group, Badge, createStyles, Center, Button, rem } from '@mantine/core';\nimport { IconGasStation, IconGauge, IconManualGearbox, IconUsers } from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  card: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n  },\n\n  imageSection: {\n    padding: theme.spacing.md,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderBottom: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n    }`,\n  },\n\n  label: {\n    marginBottom: theme.spacing.xs,\n    lineHeight: 1,\n    fontWeight: 700,\n    fontSize: theme.fontSizes.xs,\n    letterSpacing: rem(-0.25),\n    textTransform: 'uppercase',\n  },\n\n  section: {\n    padding: theme.spacing.md,\n    borderTop: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n    }`,\n  },\n\n  icon: {\n    marginRight: rem(5),\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[2] : theme.colors.gray[5],\n  },\n}));\n\nconst mockdata = [\n  { label: '4 passengers', icon: IconUsers },\n  { label: '100 km/h in 4 seconds', icon: IconGauge },\n  { label: 'Automatic gearbox', icon: IconManualGearbox },\n  { label: 'Electric', icon: IconGasStation },\n];\n\nexport function FeaturesCard() {\n  const { classes } = useStyles();\n  const features = mockdata.map((feature) => (\n    <Center key={feature.label}>\n      <feature.icon size=\"1.05rem\" className={classes.icon} stroke={1.5} />\n      <Text size=\"xs\">{feature.label}</Text>\n    </Center>\n  ));\n\n  return (\n    <Card withBorder radius=\"md\" className={classes.card}>\n      <Card.Section className={classes.imageSection}>\n        <Image src=\"https://i.imgur.com/ZL52Q2D.png\" alt=\"Tesla Model S\" />\n      </Card.Section>\n\n      <Group position=\"apart\" mt=\"md\">\n        <div>\n          <Text fw={500}>Tesla Model S</Text>\n          <Text fz=\"xs\" c=\"dimmed\">\n            Free recharge at any station\n          </Text>\n        </div>\n        <Badge variant=\"outline\">25% off</Badge>\n      </Group>\n\n      <Card.Section className={classes.section} mt=\"md\">\n        <Text fz=\"sm\" c=\"dimmed\" className={classes.label}>\n          Basic configuration\n        </Text>\n\n        <Group spacing={8} mb={-8}>\n          {features}\n        </Group>\n      </Card.Section>\n\n      <Card.Section className={classes.section}>\n        <Group spacing={30}>\n          <div>\n            <Text fz=\"xl\" fw={700} sx={{ lineHeight: 1 }}>\n              $168.00\n            </Text>\n            <Text fz=\"sm\" c=\"dimmed\" fw={500} sx={{ lineHeight: 1 }} mt={3}>\n              per day\n            </Text>\n          </div>\n\n          <Button radius=\"xl\" style={{ flex: 1 }}>\n            Rent now\n          </Button>\n        </Group>\n      </Card.Section>\n    </Card>\n  );\n}\n","attributes":{"title":"Card with icon features","category":"app-cards","author":"rtivital","withColor":true,"dimmed":true,"dependencies":["/core/card/","/core/text/","/core/group/","/core/badge/","/core/image/","/core/button/","@tabler/icons-react"],"canvas":{"center":true,"maxWidth":320}}},{"component":"FeaturesCards","slug":"features-cards","code":"import {\n  createStyles,\n  Badge,\n  Group,\n  Title,\n  Text,\n  Card,\n  SimpleGrid,\n  Container,\n  rem,\n} from '@mantine/core';\nimport { IconGauge, IconUser, IconCookie } from '@tabler/icons-react';\n\nconst mockdata = [\n  {\n    title: 'Extreme performance',\n    description:\n      'This dust is actually a powerful poison that will even make a pro wrestler sick, Regice cloaks itself with frigid air of -328 degrees Fahrenheit',\n    icon: IconGauge,\n  },\n  {\n    title: 'Privacy focused',\n    description:\n      'People say it can run at the same speed as lightning striking, Its icy body is so cold, it will not melt even if it is immersed in magma',\n    icon: IconUser,\n  },\n  {\n    title: 'No third parties',\n    description:\n      'They’re popular, but they’re rare. Trainers who show them off recklessly may be targeted by thieves',\n    icon: IconCookie,\n  },\n];\n\nconst useStyles = createStyles((theme) => ({\n  title: {\n    fontSize: rem(34),\n    fontWeight: 900,\n\n    [theme.fn.smallerThan('sm')]: {\n      fontSize: rem(24),\n    },\n  },\n\n  description: {\n    maxWidth: 600,\n    margin: 'auto',\n\n    '&::after': {\n      content: '\"\"',\n      display: 'block',\n      backgroundColor: theme.fn.primaryColor(),\n      width: rem(45),\n      height: rem(2),\n      marginTop: theme.spacing.sm,\n      marginLeft: 'auto',\n      marginRight: 'auto',\n    },\n  },\n\n  card: {\n    border: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[1]\n    }`,\n  },\n\n  cardTitle: {\n    '&::after': {\n      content: '\"\"',\n      display: 'block',\n      backgroundColor: theme.fn.primaryColor(),\n      width: rem(45),\n      height: rem(2),\n      marginTop: theme.spacing.sm,\n    },\n  },\n}));\n\nexport function FeaturesCards() {\n  const { classes, theme } = useStyles();\n  const features = mockdata.map((feature) => (\n    <Card key={feature.title} shadow=\"md\" radius=\"md\" className={classes.card} padding=\"xl\">\n      <feature.icon size={rem(50)} stroke={2} color={theme.fn.primaryColor()} />\n      <Text fz=\"lg\" fw={500} className={classes.cardTitle} mt=\"md\">\n        {feature.title}\n      </Text>\n      <Text fz=\"sm\" c=\"dimmed\" mt=\"sm\">\n        {feature.description}\n      </Text>\n    </Card>\n  ));\n\n  return (\n    <Container size=\"lg\" py=\"xl\">\n      <Group position=\"center\">\n        <Badge variant=\"filled\" size=\"lg\">\n          Best company ever\n        </Badge>\n      </Group>\n\n      <Title order={2} className={classes.title} ta=\"center\" mt=\"sm\">\n        Integrate effortlessly with any technology stack\n      </Title>\n\n      <Text c=\"dimmed\" className={classes.description} ta=\"center\" mt=\"md\">\n        Every once in a while, you’ll see a Golbat that’s missing some fangs. This happens when\n        hunger drives it to try biting a Steel-type Pokémon.\n      </Text>\n\n      <SimpleGrid cols={3} spacing=\"xl\" mt={50} breakpoints={[{ maxWidth: 'md', cols: 1 }]}>\n        {features}\n      </SimpleGrid>\n    </Container>\n  );\n}\n","attributes":{"title":"Features with cards","category":"features","author":"rtivital","changelog":"september-2022","withColor":true,"responsive":true,"dependencies":["/core/badge/","/core/card/","/core/container/","/core/text/","/core/title/","/core/simple-grid/","/core/group/","@tabler/icons-react"],"canvas":{"center":false}}},{"component":"FeaturesGrid","slug":"features-grid","code":"import { ThemeIcon, Text, Title, Container, SimpleGrid, createStyles, rem } from '@mantine/core';\nimport { IconGauge, IconCookie, IconUser, IconMessage2, IconLock } from '@tabler/icons-react';\n\nexport const MOCKDATA = [\n  {\n    icon: IconGauge,\n    title: 'Extreme performance',\n    description:\n      'This dust is actually a powerful poison that will even make a pro wrestler sick, Regice cloaks itself with frigid air of -328 degrees Fahrenheit',\n  },\n  {\n    icon: IconUser,\n    title: 'Privacy focused',\n    description:\n      'People say it can run at the same speed as lightning striking, Its icy body is so cold, it will not melt even if it is immersed in magma',\n  },\n  {\n    icon: IconCookie,\n    title: 'No third parties',\n    description:\n      'They’re popular, but they’re rare. Trainers who show them off recklessly may be targeted by thieves',\n  },\n  {\n    icon: IconLock,\n    title: 'Secure by default',\n    description:\n      'Although it still can’t fly, its jumping power is outstanding, in Alola the mushrooms on Paras don’t grow up quite right',\n  },\n  {\n    icon: IconMessage2,\n    title: '24/7 Support',\n    description:\n      'Rapidash usually can be seen casually cantering in the fields and plains, Skitty is known to chase around after its own tail',\n  },\n];\n\ninterface FeatureProps {\n  icon: React.FC<any>;\n  title: React.ReactNode;\n  description: React.ReactNode;\n}\n\nexport function Feature({ icon: Icon, title, description }: FeatureProps) {\n  return (\n    <div>\n      <ThemeIcon variant=\"light\" size={40} radius={40}>\n        <Icon size=\"1.1rem\" stroke={1.5} />\n      </ThemeIcon>\n      <Text mt=\"sm\" mb={7}>\n        {title}\n      </Text>\n      <Text size=\"sm\" color=\"dimmed\" sx={{ lineHeight: 1.6 }}>\n        {description}\n      </Text>\n    </div>\n  );\n}\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    paddingTop: `calc(${theme.spacing.xl} * 4)`,\n    paddingBottom: `calc(${theme.spacing.xl} * 4)`,\n  },\n\n  title: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    fontWeight: 900,\n    marginBottom: theme.spacing.md,\n    textAlign: 'center',\n\n    [theme.fn.smallerThan('sm')]: {\n      fontSize: rem(28),\n      textAlign: 'left',\n    },\n  },\n\n  description: {\n    textAlign: 'center',\n\n    [theme.fn.smallerThan('sm')]: {\n      textAlign: 'left',\n    },\n  },\n}));\n\ninterface FeaturesGridProps {\n  title: React.ReactNode;\n  description: React.ReactNode;\n  data?: FeatureProps[];\n}\n\nexport function FeaturesGrid({ title, description, data = MOCKDATA }: FeaturesGridProps) {\n  const { classes } = useStyles();\n  const features = data.map((feature, index) => <Feature {...feature} key={index} />);\n\n  return (\n    <Container className={classes.wrapper}>\n      <Title className={classes.title}>{title}</Title>\n\n      <Container size={560} p={0}>\n        <Text size=\"sm\" className={classes.description}>\n          {description}\n        </Text>\n      </Container>\n\n      <SimpleGrid\n        mt={60}\n        cols={3}\n        spacing={50}\n        breakpoints={[\n          { maxWidth: 980, cols: 2, spacing: 'xl' },\n          { maxWidth: 755, cols: 1, spacing: 'xl' },\n        ]}\n      >\n        {features}\n      </SimpleGrid>\n    </Container>\n  );\n}\n","attributes":{"title":"Features with monotone icons","category":"features","author":"rtivital","responsive":true,"withColor":true,"dependencies":["/core/theme-icon/","/core/title/","/core/text/","/core/container/","/core/simple-grid/","@tabler/icons-react"],"props":{"title":"Integrate effortlessly with any technology stack","description":"Every once in a while, you’ll see a Golbat that’s missing some fangs. This happens when hunger drives it to try biting a Steel-type Pokémon."},"canvas":{"center":false}}},{"component":"FeaturesImages","slug":"features-images","code":"import {\n  Image,\n  Text,\n  Container,\n  ThemeIcon,\n  Title,\n  SimpleGrid,\n  createStyles,\n  rem,\n} from '@mantine/core';\nimport IMAGES from './images';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    paddingTop: rem(80),\n    paddingBottom: rem(50),\n  },\n\n  item: {\n    display: 'flex',\n  },\n\n  itemIcon: {\n    padding: theme.spacing.xs,\n    marginRight: theme.spacing.md,\n  },\n\n  itemTitle: {\n    marginBottom: `calc(${theme.spacing.xs} / 2)`,\n  },\n\n  supTitle: {\n    textAlign: 'center',\n    textTransform: 'uppercase',\n    fontWeight: 800,\n    fontSize: theme.fontSizes.sm,\n    color: theme.fn.variant({ variant: 'light', color: theme.primaryColor }).color,\n    letterSpacing: rem(0.5),\n  },\n\n  title: {\n    lineHeight: 1,\n    textAlign: 'center',\n    marginTop: theme.spacing.xl,\n  },\n\n  description: {\n    textAlign: 'center',\n    marginTop: theme.spacing.xs,\n  },\n\n  highlight: {\n    backgroundColor: theme.fn.variant({ variant: 'light', color: theme.primaryColor }).background,\n    padding: rem(5),\n    paddingTop: 0,\n    borderRadius: theme.radius.sm,\n    display: 'inline-block',\n    color: theme.colorScheme === 'dark' ? theme.white : 'inherit',\n  },\n}));\n\ninterface FeatureImage {\n  image: string;\n  title: React.ReactNode;\n  description: React.ReactNode;\n}\n\ninterface FeaturesImagesProps {\n  supTitle: React.ReactNode;\n  description: React.ReactNode;\n  data: FeatureImage[];\n}\n\nexport function FeaturesImages({ supTitle, description, data }: FeaturesImagesProps) {\n  const { classes } = useStyles();\n\n  const items = data.map((item) => (\n    <div className={classes.item} key={item.image}>\n      <ThemeIcon variant=\"light\" className={classes.itemIcon} size={60} radius=\"md\">\n        <Image src={IMAGES[item.image]} />\n      </ThemeIcon>\n\n      <div>\n        <Text fw={700} fz=\"lg\" className={classes.itemTitle}>\n          {item.title}\n        </Text>\n        <Text c=\"dimmed\">{item.description}</Text>\n      </div>\n    </div>\n  ));\n\n  return (\n    <Container size={700} className={classes.wrapper}>\n      <Text className={classes.supTitle}>{supTitle}</Text>\n\n      <Title className={classes.title} order={2}>\n        PharmLand is <span className={classes.highlight}>not</span> just for pharmacists\n      </Title>\n\n      <Container size={660} p={0}>\n        <Text color=\"dimmed\" className={classes.description}>\n          {description}\n        </Text>\n      </Container>\n\n      <SimpleGrid\n        cols={2}\n        spacing={50}\n        breakpoints={[{ maxWidth: 550, cols: 1, spacing: 40 }]}\n        style={{ marginTop: 30 }}\n      >\n        {items}\n      </SimpleGrid>\n    </Container>\n  );\n}\n","attributes":{"title":"Features with image icons","category":"features","author":"rtivital","responsive":true,"withColor":true,"dependencies":["/core/theme-icon/","/core/title/","/core/text/","/core/container/","/core/simple-grid/","/core/image/","https://www.flaticon.com/"],"props":{"supTitle":"Use cases","description":"Its lungs contain an organ that creates electricity. The crackling sound of electricity can be heard when it exhales. Azurill’s tail is large and bouncy. It is packed full of the nutrients this Pokémon needs to grow.","data":[{"image":"auditors","title":"Pharmacists","description":"Azurill can be seen bouncing and playing on its big, rubbery tail"},{"image":"lawyers","title":"Lawyers","description":"Fans obsess over the particular length and angle of its arms"},{"image":"accountants","title":"Bank owners","description":"They divvy up their prey evenly among the members of their pack"},{"image":"others","title":"Others","description":"Phanpy uses its long nose to shower itself"}]},"canvas":{"center":false}}},{"component":"FeaturesTitle","slug":"features-title","code":"import {\n  createStyles,\n  Title,\n  SimpleGrid,\n  Text,\n  Button,\n  ThemeIcon,\n  Grid,\n  Col,\n  rem,\n} from '@mantine/core';\nimport { IconReceiptOff, IconFlame, IconCircleDotted, IconFileCode } from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    padding: `calc(${theme.spacing.xl} * 2) ${theme.spacing.xl}`,\n  },\n\n  title: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    fontSize: rem(36),\n    fontWeight: 900,\n    lineHeight: 1.1,\n    marginBottom: theme.spacing.md,\n    color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n  },\n}));\n\nconst features = [\n  {\n    icon: IconReceiptOff,\n    title: 'Free and open source',\n    description: 'All packages are published under MIT license, you can use Mantine in any project',\n  },\n  {\n    icon: IconFileCode,\n    title: 'TypeScript based',\n    description: 'Build type safe applications, all components and hooks export types',\n  },\n  {\n    icon: IconCircleDotted,\n    title: 'No annoying focus ring',\n    description:\n      'With new :focus-visible selector focus ring will appear only when user navigates with keyboard',\n  },\n  {\n    icon: IconFlame,\n    title: 'Flexible',\n    description:\n      'Customize colors, spacing, shadows, fonts and many other settings with global theme object',\n  },\n];\n\nexport function FeaturesTitle() {\n  const { classes } = useStyles();\n\n  const items = features.map((feature) => (\n    <div key={feature.title}>\n      <ThemeIcon\n        size={44}\n        radius=\"md\"\n        variant=\"gradient\"\n        gradient={{ deg: 133, from: 'blue', to: 'cyan' }}\n      >\n        <feature.icon size={rem(26)} stroke={1.5} />\n      </ThemeIcon>\n      <Text fz=\"lg\" mt=\"sm\" fw={500}>\n        {feature.title}\n      </Text>\n      <Text c=\"dimmed\" fz=\"sm\">\n        {feature.description}\n      </Text>\n    </div>\n  ));\n\n  return (\n    <div className={classes.wrapper}>\n      <Grid gutter={80}>\n        <Col span={12} md={5}>\n          <Title className={classes.title} order={2}>\n            A fully featured React components library for your next project\n          </Title>\n          <Text c=\"dimmed\">\n            Build fully functional accessible web applications faster than ever – Mantine includes\n            more than 120 customizable components and hooks to cover you in any situation\n          </Text>\n\n          <Button\n            variant=\"gradient\"\n            gradient={{ deg: 133, from: 'blue', to: 'cyan' }}\n            size=\"lg\"\n            radius=\"md\"\n            mt=\"xl\"\n          >\n            Get started\n          </Button>\n        </Col>\n        <Col span={12} md={7}>\n          <SimpleGrid cols={2} spacing={30} breakpoints={[{ maxWidth: 'md', cols: 1 }]}>\n            {items}\n          </SimpleGrid>\n        </Col>\n      </Grid>\n    </div>\n  );\n}\n","attributes":{"title":"Features with title","category":"features","author":"rtivital","responsive":true,"dependencies":["/core/title/","/core/grid/","/core/simple-grid/","/core/button/","/core/text/","/core/theme-icon/","@tabler/icons-react"],"canvas":{"center":true,"maxWidth":1060}}},{"component":"FloatingLabelInput","slug":"floating-label-input","code":"import { useState } from 'react';\nimport { TextInput, createStyles, rem } from '@mantine/core';\n\nconst useStyles = createStyles((theme, { floating }: { floating: boolean }) => ({\n  root: {\n    position: 'relative',\n  },\n\n  label: {\n    position: 'absolute',\n    zIndex: 2,\n    top: rem(7),\n    left: theme.spacing.sm,\n    pointerEvents: 'none',\n    color: floating\n      ? theme.colorScheme === 'dark'\n        ? theme.white\n        : theme.black\n      : theme.colorScheme === 'dark'\n      ? theme.colors.dark[3]\n      : theme.colors.gray[5],\n    transition: 'transform 150ms ease, color 150ms ease, font-size 150ms ease',\n    transform: floating ? `translate(-${theme.spacing.sm}, ${rem(-28)})` : 'none',\n    fontSize: floating ? theme.fontSizes.xs : theme.fontSizes.sm,\n    fontWeight: floating ? 500 : 400,\n  },\n\n  required: {\n    transition: 'opacity 150ms ease',\n    opacity: floating ? 1 : 0,\n  },\n\n  input: {\n    '&::placeholder': {\n      transition: 'color 150ms ease',\n      color: !floating ? 'transparent' : undefined,\n    },\n  },\n}));\n\nexport function FloatingLabelInput() {\n  const [focused, setFocused] = useState(false);\n  const [value, setValue] = useState('');\n  const { classes } = useStyles({ floating: value.trim().length !== 0 || focused });\n\n  return (\n    <TextInput\n      label=\"Floating label\"\n      placeholder=\"OMG, it also has a placeholder\"\n      required\n      classNames={classes}\n      value={value}\n      onChange={(event) => setValue(event.currentTarget.value)}\n      onFocus={() => setFocused(true)}\n      onBlur={() => setFocused(false)}\n      mt=\"md\"\n      autoComplete=\"nope\"\n    />\n  );\n}\n","attributes":{"title":"Input with floating label","category":"inputs","author":"rtivital","dependencies":["/core/text-input/","/core/select/"],"canvas":{"center":true,"maxWidth":420}}},{"component":"FooterCentered","slug":"footer-centered","code":"import { createStyles, Anchor, Group, ActionIcon, rem } from '@mantine/core';\nimport { IconBrandTwitter, IconBrandYoutube, IconBrandInstagram } from '@tabler/icons-react';\nimport { MantineLogo } from '@mantine/ds';\n\nconst useStyles = createStyles((theme) => ({\n  footer: {\n    marginTop: rem(120),\n    borderTop: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[2]\n    }`,\n  },\n\n  inner: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: `${theme.spacing.md} ${theme.spacing.md}`,\n\n    [theme.fn.smallerThan('sm')]: {\n      flexDirection: 'column',\n    },\n  },\n\n  links: {\n    [theme.fn.smallerThan('sm')]: {\n      marginTop: theme.spacing.lg,\n      marginBottom: theme.spacing.sm,\n    },\n  },\n}));\n\ninterface FooterCenteredProps {\n  links: { link: string; label: string }[];\n}\n\nexport function FooterCentered({ links }: FooterCenteredProps) {\n  const { classes } = useStyles();\n  const items = links.map((link) => (\n    <Anchor<'a'>\n      color=\"dimmed\"\n      key={link.label}\n      href={link.link}\n      sx={{ lineHeight: 1 }}\n      onClick={(event) => event.preventDefault()}\n      size=\"sm\"\n    >\n      {link.label}\n    </Anchor>\n  ));\n\n  return (\n    <div className={classes.footer}>\n      <div className={classes.inner}>\n        <MantineLogo size={28} />\n\n        <Group className={classes.links}>{items}</Group>\n\n        <Group spacing=\"xs\" position=\"right\" noWrap>\n          <ActionIcon size=\"lg\" variant=\"default\" radius=\"xl\">\n            <IconBrandTwitter size=\"1.05rem\" stroke={1.5} />\n          </ActionIcon>\n          <ActionIcon size=\"lg\" variant=\"default\" radius=\"xl\">\n            <IconBrandYoutube size=\"1.05rem\" stroke={1.5} />\n          </ActionIcon>\n          <ActionIcon size=\"lg\" variant=\"default\" radius=\"xl\">\n            <IconBrandInstagram size=\"1.05rem\" stroke={1.5} />\n          </ActionIcon>\n        </Group>\n      </div>\n    </div>\n  );\n}\n","attributes":{"title":"Footer with centered links","category":"footers","author":"rtivital","responsive":true,"dependencies":["/core/group/","/core/anchor/","/core/button/#unstyled-button","@tabler/icons-react"],"props":{"links":[{"link":"#","label":"Contact"},{"link":"#","label":"Privacy"},{"link":"#","label":"Blog"},{"link":"#","label":"Store"},{"link":"#","label":"Careers"}]},"canvas":{"center":false}}},{"component":"FooterLinks","slug":"footer-links","code":"import { createStyles, Text, Container, ActionIcon, Group, rem } from '@mantine/core';\nimport { IconBrandTwitter, IconBrandYoutube, IconBrandInstagram } from '@tabler/icons-react';\nimport { MantineLogo } from '@mantine/ds';\n\nconst useStyles = createStyles((theme) => ({\n  footer: {\n    marginTop: rem(120),\n    paddingTop: `calc(${theme.spacing.xl} * 2)`,\n    paddingBottom: `calc(${theme.spacing.xl} * 2)`,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n    borderTop: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[2]\n    }`,\n  },\n\n  logo: {\n    maxWidth: rem(200),\n\n    [theme.fn.smallerThan('sm')]: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n    },\n  },\n\n  description: {\n    marginTop: rem(5),\n\n    [theme.fn.smallerThan('sm')]: {\n      marginTop: theme.spacing.xs,\n      textAlign: 'center',\n    },\n  },\n\n  inner: {\n    display: 'flex',\n    justifyContent: 'space-between',\n\n    [theme.fn.smallerThan('sm')]: {\n      flexDirection: 'column',\n      alignItems: 'center',\n    },\n  },\n\n  groups: {\n    display: 'flex',\n    flexWrap: 'wrap',\n\n    [theme.fn.smallerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  wrapper: {\n    width: rem(160),\n  },\n\n  link: {\n    display: 'block',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[1] : theme.colors.gray[6],\n    fontSize: theme.fontSizes.sm,\n    paddingTop: rem(3),\n    paddingBottom: rem(3),\n\n    '&:hover': {\n      textDecoration: 'underline',\n    },\n  },\n\n  title: {\n    fontSize: theme.fontSizes.lg,\n    fontWeight: 700,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    marginBottom: `calc(${theme.spacing.xs} / 2)`,\n    color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n  },\n\n  afterFooter: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginTop: theme.spacing.xl,\n    paddingTop: theme.spacing.xl,\n    paddingBottom: theme.spacing.xl,\n    borderTop: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[2]\n    }`,\n\n    [theme.fn.smallerThan('sm')]: {\n      flexDirection: 'column',\n    },\n  },\n\n  social: {\n    [theme.fn.smallerThan('sm')]: {\n      marginTop: theme.spacing.xs,\n    },\n  },\n}));\n\ninterface FooterLinksProps {\n  data: {\n    title: string;\n    links: { label: string; link: string }[];\n  }[];\n}\n\nexport function FooterLinks({ data }: FooterLinksProps) {\n  const { classes } = useStyles();\n\n  const groups = data.map((group) => {\n    const links = group.links.map((link, index) => (\n      <Text<'a'>\n        key={index}\n        className={classes.link}\n        component=\"a\"\n        href={link.link}\n        onClick={(event) => event.preventDefault()}\n      >\n        {link.label}\n      </Text>\n    ));\n\n    return (\n      <div className={classes.wrapper} key={group.title}>\n        <Text className={classes.title}>{group.title}</Text>\n        {links}\n      </div>\n    );\n  });\n\n  return (\n    <footer className={classes.footer}>\n      <Container className={classes.inner}>\n        <div className={classes.logo}>\n          <MantineLogo size={30} />\n          <Text size=\"xs\" color=\"dimmed\" className={classes.description}>\n            Build fully functional accessible web applications faster than ever\n          </Text>\n        </div>\n        <div className={classes.groups}>{groups}</div>\n      </Container>\n      <Container className={classes.afterFooter}>\n        <Text color=\"dimmed\" size=\"sm\">\n          © 2020 mantine.dev. All rights reserved.\n        </Text>\n\n        <Group spacing={0} className={classes.social} position=\"right\" noWrap>\n          <ActionIcon size=\"lg\">\n            <IconBrandTwitter size=\"1.05rem\" stroke={1.5} />\n          </ActionIcon>\n          <ActionIcon size=\"lg\">\n            <IconBrandYoutube size=\"1.05rem\" stroke={1.5} />\n          </ActionIcon>\n          <ActionIcon size=\"lg\">\n            <IconBrandInstagram size=\"1.05rem\" stroke={1.5} />\n          </ActionIcon>\n        </Group>\n      </Container>\n    </footer>\n  );\n}\n","attributes":{"title":"Footer with links","category":"footers","author":"rtivital","responsive":true,"dependencies":["/core/text/","/core/container/","/core/action-icon/","@tabler/icons-react"],"props":{"data":[{"title":"About","links":[{"label":"Features","link":"#"},{"label":"Pricing","link":"#"},{"label":"Support","link":"#"},{"label":"Forums","link":"#"}]},{"title":"Project","links":[{"label":"Contribute","link":"#"},{"label":"Media assets","link":"#"},{"label":"Changelog","link":"#"},{"label":"Releases","link":"#"}]},{"title":"Community","links":[{"label":"Join Discord","link":"#"},{"label":"Follow on Twitter","link":"#"},{"label":"Email newsletter","link":"#"},{"label":"GitHub discussions","link":"#"}]}]},"canvas":{"center":false}}},{"component":"FooterSimple","slug":"footer-simple","code":"import { createStyles, Container, Group, Anchor, rem } from '@mantine/core';\nimport { MantineLogo } from '@mantine/ds';\n\nconst useStyles = createStyles((theme) => ({\n  footer: {\n    marginTop: rem(120),\n    borderTop: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[2]\n    }`,\n  },\n\n  inner: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingTop: theme.spacing.xl,\n    paddingBottom: theme.spacing.xl,\n\n    [theme.fn.smallerThan('xs')]: {\n      flexDirection: 'column',\n    },\n  },\n\n  links: {\n    [theme.fn.smallerThan('xs')]: {\n      marginTop: theme.spacing.md,\n    },\n  },\n}));\n\ninterface FooterSimpleProps {\n  links: { link: string; label: string }[];\n}\n\nexport function FooterSimple({ links }: FooterSimpleProps) {\n  const { classes } = useStyles();\n  const items = links.map((link) => (\n    <Anchor<'a'>\n      color=\"dimmed\"\n      key={link.label}\n      href={link.link}\n      onClick={(event) => event.preventDefault()}\n      size=\"sm\"\n    >\n      {link.label}\n    </Anchor>\n  ));\n\n  return (\n    <div className={classes.footer}>\n      <Container className={classes.inner}>\n        <MantineLogo size={28} />\n        <Group className={classes.links}>{items}</Group>\n      </Container>\n    </div>\n  );\n}\n","attributes":{"title":"Simple footer","category":"footers","author":"rtivital","responsive":true,"dependencies":["/core/container/","/core/group/","/core/anchor/"],"props":{"links":[{"link":"#","label":"Contact"},{"link":"#","label":"Privacy"},{"link":"#","label":"Blog"},{"link":"#","label":"Careers"}]},"canvas":{"center":false}}},{"component":"FooterSocial","slug":"footer-social","code":"import { createStyles, Container, Group, ActionIcon, rem } from '@mantine/core';\nimport { IconBrandTwitter, IconBrandYoutube, IconBrandInstagram } from '@tabler/icons-react';\nimport { MantineLogo } from '@mantine/ds';\n\nconst useStyles = createStyles((theme) => ({\n  footer: {\n    marginTop: rem(120),\n    borderTop: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[2]\n    }`,\n  },\n\n  inner: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingTop: theme.spacing.xl,\n    paddingBottom: theme.spacing.xl,\n\n    [theme.fn.smallerThan('xs')]: {\n      flexDirection: 'column',\n    },\n  },\n\n  links: {\n    [theme.fn.smallerThan('xs')]: {\n      marginTop: theme.spacing.md,\n    },\n  },\n}));\n\nexport function FooterSocial() {\n  const { classes } = useStyles();\n\n  return (\n    <div className={classes.footer}>\n      <Container className={classes.inner}>\n        <MantineLogo size={28} />\n        <Group spacing={0} className={classes.links} position=\"right\" noWrap>\n          <ActionIcon size=\"lg\">\n            <IconBrandTwitter size=\"1.05rem\" stroke={1.5} />\n          </ActionIcon>\n          <ActionIcon size=\"lg\">\n            <IconBrandYoutube size=\"1.05rem\" stroke={1.5} />\n          </ActionIcon>\n          <ActionIcon size=\"lg\">\n            <IconBrandInstagram size=\"1.05rem\" stroke={1.5} />\n          </ActionIcon>\n        </Group>\n      </Container>\n    </div>\n  );\n}\n","attributes":{"title":"Footer with social icons","category":"footers","author":"rtivital","responsive":true,"dependencies":["/core/container/","/core/group/","/core/action-icon/","@tabler/icons-react"],"canvas":{"center":false}}},{"component":"ForgotPassword","slug":"forgot-password","code":"import {\n  createStyles,\n  Paper,\n  Title,\n  Text,\n  TextInput,\n  Button,\n  Container,\n  Group,\n  Anchor,\n  Center,\n  Box,\n  rem,\n} from '@mantine/core';\nimport { IconArrowLeft } from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  title: {\n    fontSize: rem(26),\n    fontWeight: 900,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n  },\n\n  controls: {\n    [theme.fn.smallerThan('xs')]: {\n      flexDirection: 'column-reverse',\n    },\n  },\n\n  control: {\n    [theme.fn.smallerThan('xs')]: {\n      width: '100%',\n      textAlign: 'center',\n    },\n  },\n}));\n\nexport function ForgotPassword() {\n  const { classes } = useStyles();\n\n  return (\n    <Container size={460} my={30}>\n      <Title className={classes.title} align=\"center\">\n        Forgot your password?\n      </Title>\n      <Text c=\"dimmed\" fz=\"sm\" ta=\"center\">\n        Enter your email to get a reset link\n      </Text>\n\n      <Paper withBorder shadow=\"md\" p={30} radius=\"md\" mt=\"xl\">\n        <TextInput label=\"Your email\" placeholder=\"me@mantine.dev\" required />\n        <Group position=\"apart\" mt=\"lg\" className={classes.controls}>\n          <Anchor color=\"dimmed\" size=\"sm\" className={classes.control}>\n            <Center inline>\n              <IconArrowLeft size={rem(12)} stroke={1.5} />\n              <Box ml={5}>Back to the login page</Box>\n            </Center>\n          </Anchor>\n          <Button className={classes.control}>Reset password</Button>\n        </Group>\n      </Paper>\n    </Container>\n  );\n}\n","attributes":{"title":"Forgot password","category":"authentication","author":"rtivital","withColor":true,"dimmed":true,"responsive":true,"dependencies":["/core/container/","/core/title/","/core/anchor/","/core/button/","/core/text-input/","/core/paper/","@tabler/icons-react"],"canvas":{"center":false}}},{"component":"ForgotPasswordInput","slug":"forgot-password-input","code":"import { PasswordInput, Text, Group, PasswordInputProps, Anchor } from '@mantine/core';\n\nexport function ForgotPasswordInput({ className, style, ...others }: PasswordInputProps) {\n  return (\n    <div className={className} style={style}>\n      <Group position=\"apart\" mb={5}>\n        <Text component=\"label\" htmlFor=\"your-password\" size=\"sm\" weight={500}>\n          Your password\n        </Text>\n\n        <Anchor<'a'>\n          href=\"#\"\n          onClick={(event) => event.preventDefault()}\n          sx={(theme) => ({\n            paddingTop: 2,\n            color: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 4 : 6],\n            fontWeight: 500,\n            fontSize: theme.fontSizes.xs,\n          })}\n        >\n          Forgot your password?\n        </Anchor>\n      </Group>\n      <PasswordInput placeholder=\"Your password\" id=\"your-password\" {...others} />\n    </div>\n  );\n}\n","attributes":{"title":"Forgot password on input label","category":"inputs","author":"rtivital","withColor":true,"dependencies":["/core/password-input/","/core/text/","/core/button/#unstyled-button"],"canvas":{"center":true,"maxWidth":420}}},{"component":"GetInTouch","slug":"get-in-touch","code":"import {\n  Paper,\n  Text,\n  TextInput,\n  Textarea,\n  Button,\n  Group,\n  SimpleGrid,\n  createStyles,\n  rem,\n} from '@mantine/core';\nimport { ContactIconsList } from '../ContactIcons/ContactIcons';\nimport bg from './bg.svg';\n\nconst useStyles = createStyles((theme) => {\n  const BREAKPOINT = theme.fn.smallerThan('sm');\n\n  return {\n    wrapper: {\n      display: 'flex',\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.white,\n      borderRadius: theme.radius.lg,\n      padding: rem(4),\n      border: `${rem(1)} solid ${\n        theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.colors.gray[2]\n      }`,\n\n      [BREAKPOINT]: {\n        flexDirection: 'column',\n      },\n    },\n\n    form: {\n      boxSizing: 'border-box',\n      flex: 1,\n      padding: theme.spacing.xl,\n      paddingLeft: `calc(${theme.spacing.xl} * 2)`,\n      borderLeft: 0,\n\n      [BREAKPOINT]: {\n        padding: theme.spacing.md,\n        paddingLeft: theme.spacing.md,\n      },\n    },\n\n    fields: {\n      marginTop: rem(-12),\n    },\n\n    fieldInput: {\n      flex: 1,\n\n      '& + &': {\n        marginLeft: theme.spacing.md,\n\n        [BREAKPOINT]: {\n          marginLeft: 0,\n          marginTop: theme.spacing.md,\n        },\n      },\n    },\n\n    fieldsGroup: {\n      display: 'flex',\n\n      [BREAKPOINT]: {\n        flexDirection: 'column',\n      },\n    },\n\n    contacts: {\n      boxSizing: 'border-box',\n      position: 'relative',\n      borderRadius: theme.radius.lg,\n      backgroundImage: `url(${bg.src})`,\n      backgroundSize: 'cover',\n      backgroundPosition: 'center',\n      border: `${rem(1)} solid transparent`,\n      padding: theme.spacing.xl,\n      flex: `0 0 ${rem(280)}`,\n\n      [BREAKPOINT]: {\n        marginBottom: theme.spacing.sm,\n        paddingLeft: theme.spacing.md,\n      },\n    },\n\n    title: {\n      marginBottom: `calc(${theme.spacing.xl} * 1.5)`,\n      fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n\n      [BREAKPOINT]: {\n        marginBottom: theme.spacing.xl,\n      },\n    },\n\n    control: {\n      [BREAKPOINT]: {\n        flex: 1,\n      },\n    },\n  };\n});\n\nexport function GetInTouch() {\n  const { classes } = useStyles();\n\n  return (\n    <Paper shadow=\"md\" radius=\"lg\">\n      <div className={classes.wrapper}>\n        <div className={classes.contacts}>\n          <Text fz=\"lg\" fw={700} className={classes.title} c=\"#fff\">\n            Contact information\n          </Text>\n\n          <ContactIconsList variant=\"white\" />\n        </div>\n\n        <form className={classes.form} onSubmit={(event) => event.preventDefault()}>\n          <Text fz=\"lg\" fw={700} className={classes.title}>\n            Get in touch\n          </Text>\n\n          <div className={classes.fields}>\n            <SimpleGrid cols={2} breakpoints={[{ maxWidth: 'sm', cols: 1 }]}>\n              <TextInput label=\"Your name\" placeholder=\"Your name\" />\n              <TextInput label=\"Your email\" placeholder=\"hello@mantine.dev\" required />\n            </SimpleGrid>\n\n            <TextInput mt=\"md\" label=\"Subject\" placeholder=\"Subject\" required />\n\n            <Textarea\n              mt=\"md\"\n              label=\"Your message\"\n              placeholder=\"Please include all relevant information\"\n              minRows={3}\n            />\n\n            <Group position=\"right\" mt=\"md\">\n              <Button type=\"submit\" className={classes.control}>\n                Send message\n              </Button>\n            </Group>\n          </div>\n        </form>\n      </div>\n    </Paper>\n  );\n}\n","attributes":{"title":"Get in touch form","category":"contact","author":"rtivital","responsive":true,"dependencies":["/core/paper/","/core/text-input/","/core/textarea/","/core/text/","/core/button/","/core/group/","/core/simple-grid/","/component/contact-icons/","https://www.svgbackgrounds.com/"],"canvas":{"center":true,"maxWidth":800}}},{"component":"GetInTouchSimple","slug":"get-in-touch-simple","code":"import { TextInput, Textarea, SimpleGrid, Group, Title, Button } from '@mantine/core';\nimport { useForm } from '@mantine/form';\n\nexport function GetInTouchSimple() {\n  const form = useForm({\n    initialValues: {\n      name: '',\n      email: '',\n      subject: '',\n      message: '',\n    },\n    validate: {\n      name: (value) => value.trim().length < 2,\n      email: (value) => !/^\\S+@\\S+$/.test(value),\n      subject: (value) => value.trim().length === 0,\n    },\n  });\n\n  return (\n    <form onSubmit={form.onSubmit(() => {})}>\n      <Title\n        order={2}\n        size=\"h1\"\n        sx={(theme) => ({ fontFamily: `Greycliff CF, ${theme.fontFamily}` })}\n        weight={900}\n        align=\"center\"\n      >\n        Get in touch\n      </Title>\n\n      <SimpleGrid cols={2} mt=\"xl\" breakpoints={[{ maxWidth: 'sm', cols: 1 }]}>\n        <TextInput\n          label=\"Name\"\n          placeholder=\"Your name\"\n          name=\"name\"\n          variant=\"filled\"\n          {...form.getInputProps('name')}\n        />\n        <TextInput\n          label=\"Email\"\n          placeholder=\"Your email\"\n          name=\"email\"\n          variant=\"filled\"\n          {...form.getInputProps('email')}\n        />\n      </SimpleGrid>\n\n      <TextInput\n        label=\"Subject\"\n        placeholder=\"Subject\"\n        mt=\"md\"\n        name=\"subject\"\n        variant=\"filled\"\n        {...form.getInputProps('subject')}\n      />\n      <Textarea\n        mt=\"md\"\n        label=\"Message\"\n        placeholder=\"Your message\"\n        maxRows={10}\n        minRows={5}\n        autosize\n        name=\"message\"\n        variant=\"filled\"\n        {...form.getInputProps('message')}\n      />\n\n      <Group position=\"center\" mt=\"xl\">\n        <Button type=\"submit\" size=\"md\">\n          Send message\n        </Button>\n      </Group>\n    </form>\n  );\n}\n","attributes":{"title":"Get in touch form","category":"contact","author":"rtivital","withColor":true,"responsive":true,"dependencies":["/core/text-input/","/core/textarea/","/core/title/","/core/simple-grid/","/core/group/","/core/button/"],"canvas":{"center":true,"maxWidth":620}}},{"component":"GradientSegmentedControl","slug":"gradient-segmented-control","code":"import { createStyles, SegmentedControl, rem } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  root: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.white,\n    boxShadow: theme.shadows.md,\n    border: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[1]\n    }`,\n  },\n\n  indicator: {\n    backgroundImage: theme.fn.gradient({ from: 'pink', to: 'orange' }),\n  },\n\n  control: {\n    border: '0 !important',\n  },\n\n  label: {\n    '&, &:hover': {\n      '&[data-active]': {\n        color: theme.white,\n      },\n    },\n  },\n}));\n\nexport function GradientSegmentedControl() {\n  const { classes } = useStyles();\n  return (\n    <SegmentedControl\n      radius=\"xl\"\n      size=\"md\"\n      data={['All', 'AI/ML', 'C++', 'Rust', 'TypeScript']}\n      classNames={classes}\n    />\n  );\n}\n","attributes":{"title":"Gradient segmented control","category":"inputs","author":"rtivital","dependencies":["/core/segmented-control/"],"changelog":"september-2022","canvas":{"center":true,"maxWidth":420}}},{"component":"GridAsymmetrical","slug":"grid-asymmetrical","code":"import { Grid, Skeleton, Container } from '@mantine/core';\n\nconst child = <Skeleton height={140} radius=\"md\" animate={false} />;\n\nexport function GridAsymmetrical() {\n  return (\n    <Container my=\"md\">\n      <Grid>\n        <Grid.Col xs={4}>{child}</Grid.Col>\n        <Grid.Col xs={8}>{child}</Grid.Col>\n        <Grid.Col xs={8}>{child}</Grid.Col>\n        <Grid.Col xs={4}>{child}</Grid.Col>\n        <Grid.Col xs={3}>{child}</Grid.Col>\n        <Grid.Col xs={3}>{child}</Grid.Col>\n        <Grid.Col xs={6}>{child}</Grid.Col>\n      </Grid>\n    </Container>\n  );\n}\n","attributes":{"title":"Grid with asymmetrical columns","category":"grids","author":"rtivital","responsive":true,"dependencies":["/core/grid/","/core/skeleton/","/core/container/"],"canvas":{"center":false}}},{"component":"HeaderAction","slug":"header-action","code":"import {\n  createStyles,\n  Menu,\n  Center,\n  Header,\n  Container,\n  Group,\n  Button,\n  Burger,\n  rem,\n} from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport { IconChevronDown } from '@tabler/icons-react';\nimport { MantineLogo } from '@mantine/ds';\n\nconst HEADER_HEIGHT = rem(60);\n\nconst useStyles = createStyles((theme) => ({\n  inner: {\n    height: HEADER_HEIGHT,\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n\n  links: {\n    [theme.fn.smallerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  burger: {\n    [theme.fn.largerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  link: {\n    display: 'block',\n    lineHeight: 1,\n    padding: `${rem(8)} ${rem(12)}`,\n    borderRadius: theme.radius.sm,\n    textDecoration: 'none',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n    fontSize: theme.fontSizes.sm,\n    fontWeight: 500,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n    },\n  },\n\n  linkLabel: {\n    marginRight: rem(5),\n  },\n}));\n\ninterface HeaderActionProps {\n  links: { link: string; label: string; links: { link: string; label: string }[] }[];\n}\n\nexport function HeaderAction({ links }: HeaderActionProps) {\n  const { classes } = useStyles();\n  const [opened, { toggle }] = useDisclosure(false);\n  const items = links.map((link) => {\n    const menuItems = link.links?.map((item) => (\n      <Menu.Item key={item.link}>{item.label}</Menu.Item>\n    ));\n\n    if (menuItems) {\n      return (\n        <Menu key={link.label} trigger=\"hover\" transitionProps={{ exitDuration: 0 }} withinPortal>\n          <Menu.Target>\n            <a\n              href={link.link}\n              className={classes.link}\n              onClick={(event) => event.preventDefault()}\n            >\n              <Center>\n                <span className={classes.linkLabel}>{link.label}</span>\n                <IconChevronDown size={rem(12)} stroke={1.5} />\n              </Center>\n            </a>\n          </Menu.Target>\n          <Menu.Dropdown>{menuItems}</Menu.Dropdown>\n        </Menu>\n      );\n    }\n\n    return (\n      <a\n        key={link.label}\n        href={link.link}\n        className={classes.link}\n        onClick={(event) => event.preventDefault()}\n      >\n        {link.label}\n      </a>\n    );\n  });\n\n  return (\n    <Header height={HEADER_HEIGHT} sx={{ borderBottom: 0 }} mb={120}>\n      <Container className={classes.inner} fluid>\n        <Group>\n          <Burger opened={opened} onClick={toggle} className={classes.burger} size=\"sm\" />\n          <MantineLogo size={28} />\n        </Group>\n        <Group spacing={5} className={classes.links}>\n          {items}\n        </Group>\n        <Button radius=\"xl\" h={30}>\n          Get early access\n        </Button>\n      </Container>\n    </Header>\n  );\n}\n","attributes":{"title":"Header with primary action","category":"headers","author":"rtivital","withColor":true,"responsive":true,"dependencies":["/core/app-shell/","/core/menu/","/core/button/","/core/container/","/core/center/","/core/burger/","/core/group/"],"props":{"links":[{"link":"/about","label":"Features"},{"link":"#1","label":"Learn","links":[{"link":"/docs","label":"Documentation"},{"link":"/resources","label":"Resources"},{"link":"/community","label":"Community"},{"link":"/blog","label":"Blog"}]},{"link":"/about","label":"About"},{"link":"/pricing","label":"Pricing"},{"link":"#2","label":"Support","links":[{"link":"/faq","label":"FAQ"},{"link":"/demo","label":"Book a demo"},{"link":"/forums","label":"Forums"}]}]},"canvas":{"center":false}}},{"component":"HeaderMegaMenu","slug":"header-mega-menu","code":"import {\n  createStyles,\n  Header,\n  HoverCard,\n  Group,\n  Button,\n  UnstyledButton,\n  Text,\n  SimpleGrid,\n  ThemeIcon,\n  Anchor,\n  Divider,\n  Center,\n  Box,\n  Burger,\n  Drawer,\n  Collapse,\n  ScrollArea,\n  rem,\n} from '@mantine/core';\nimport { MantineLogo } from '@mantine/ds';\nimport { useDisclosure } from '@mantine/hooks';\nimport {\n  IconNotification,\n  IconCode,\n  IconBook,\n  IconChartPie3,\n  IconFingerprint,\n  IconCoin,\n  IconChevronDown,\n} from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  link: {\n    display: 'flex',\n    alignItems: 'center',\n    height: '100%',\n    paddingLeft: theme.spacing.md,\n    paddingRight: theme.spacing.md,\n    textDecoration: 'none',\n    color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    fontWeight: 500,\n    fontSize: theme.fontSizes.sm,\n\n    [theme.fn.smallerThan('sm')]: {\n      height: rem(42),\n      display: 'flex',\n      alignItems: 'center',\n      width: '100%',\n    },\n\n    ...theme.fn.hover({\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n    }),\n  },\n\n  subLink: {\n    width: '100%',\n    padding: `${theme.spacing.xs} ${theme.spacing.md}`,\n    borderRadius: theme.radius.md,\n\n    ...theme.fn.hover({\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[0],\n    }),\n\n    '&:active': theme.activeStyles,\n  },\n\n  dropdownFooter: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[0],\n    margin: `calc(${theme.spacing.md} * -1)`,\n    marginTop: theme.spacing.sm,\n    padding: `${theme.spacing.md} calc(${theme.spacing.md} * 2)`,\n    paddingBottom: theme.spacing.xl,\n    borderTop: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[1]\n    }`,\n  },\n\n  hiddenMobile: {\n    [theme.fn.smallerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  hiddenDesktop: {\n    [theme.fn.largerThan('sm')]: {\n      display: 'none',\n    },\n  },\n}));\n\nconst mockdata = [\n  {\n    icon: IconCode,\n    title: 'Open source',\n    description: 'This Pokémon’s cry is very loud and distracting',\n  },\n  {\n    icon: IconCoin,\n    title: 'Free for everyone',\n    description: 'The fluid of Smeargle’s tail secretions changes',\n  },\n  {\n    icon: IconBook,\n    title: 'Documentation',\n    description: 'Yanma is capable of seeing 360 degrees without',\n  },\n  {\n    icon: IconFingerprint,\n    title: 'Security',\n    description: 'The shell’s rounded shape and the grooves on its.',\n  },\n  {\n    icon: IconChartPie3,\n    title: 'Analytics',\n    description: 'This Pokémon uses its flying ability to quickly chase',\n  },\n  {\n    icon: IconNotification,\n    title: 'Notifications',\n    description: 'Combusken battles with the intensely hot flames it spews',\n  },\n];\n\nexport function HeaderMegaMenu() {\n  const [drawerOpened, { toggle: toggleDrawer, close: closeDrawer }] = useDisclosure(false);\n  const [linksOpened, { toggle: toggleLinks }] = useDisclosure(false);\n  const { classes, theme } = useStyles();\n\n  const links = mockdata.map((item) => (\n    <UnstyledButton className={classes.subLink} key={item.title}>\n      <Group noWrap align=\"flex-start\">\n        <ThemeIcon size={34} variant=\"default\" radius=\"md\">\n          <item.icon size={rem(22)} color={theme.fn.primaryColor()} />\n        </ThemeIcon>\n        <div>\n          <Text size=\"sm\" fw={500}>\n            {item.title}\n          </Text>\n          <Text size=\"xs\" color=\"dimmed\">\n            {item.description}\n          </Text>\n        </div>\n      </Group>\n    </UnstyledButton>\n  ));\n\n  return (\n    <Box pb={120}>\n      <Header height={60} px=\"md\">\n        <Group position=\"apart\" sx={{ height: '100%' }}>\n          <MantineLogo size={30} />\n\n          <Group sx={{ height: '100%' }} spacing={0} className={classes.hiddenMobile}>\n            <a href=\"#\" className={classes.link}>\n              Home\n            </a>\n            <HoverCard width={600} position=\"bottom\" radius=\"md\" shadow=\"md\" withinPortal>\n              <HoverCard.Target>\n                <a href=\"#\" className={classes.link}>\n                  <Center inline>\n                    <Box component=\"span\" mr={5}>\n                      Features\n                    </Box>\n                    <IconChevronDown size={16} color={theme.fn.primaryColor()} />\n                  </Center>\n                </a>\n              </HoverCard.Target>\n\n              <HoverCard.Dropdown sx={{ overflow: 'hidden' }}>\n                <Group position=\"apart\" px=\"md\">\n                  <Text fw={500}>Features</Text>\n                  <Anchor href=\"#\" fz=\"xs\">\n                    View all\n                  </Anchor>\n                </Group>\n\n                <Divider\n                  my=\"sm\"\n                  mx=\"-md\"\n                  color={theme.colorScheme === 'dark' ? 'dark.5' : 'gray.1'}\n                />\n\n                <SimpleGrid cols={2} spacing={0}>\n                  {links}\n                </SimpleGrid>\n\n                <div className={classes.dropdownFooter}>\n                  <Group position=\"apart\">\n                    <div>\n                      <Text fw={500} fz=\"sm\">\n                        Get started\n                      </Text>\n                      <Text size=\"xs\" color=\"dimmed\">\n                        Their food sources have decreased, and their numbers\n                      </Text>\n                    </div>\n                    <Button variant=\"default\">Get started</Button>\n                  </Group>\n                </div>\n              </HoverCard.Dropdown>\n            </HoverCard>\n            <a href=\"#\" className={classes.link}>\n              Learn\n            </a>\n            <a href=\"#\" className={classes.link}>\n              Academy\n            </a>\n          </Group>\n\n          <Group className={classes.hiddenMobile}>\n            <Button variant=\"default\">Log in</Button>\n            <Button>Sign up</Button>\n          </Group>\n\n          <Burger opened={drawerOpened} onClick={toggleDrawer} className={classes.hiddenDesktop} />\n        </Group>\n      </Header>\n\n      <Drawer\n        opened={drawerOpened}\n        onClose={closeDrawer}\n        size=\"100%\"\n        padding=\"md\"\n        title=\"Navigation\"\n        className={classes.hiddenDesktop}\n        zIndex={1000000}\n      >\n        <ScrollArea h={`calc(100vh - ${rem(60)})`} mx=\"-md\">\n          <Divider my=\"sm\" color={theme.colorScheme === 'dark' ? 'dark.5' : 'gray.1'} />\n\n          <a href=\"#\" className={classes.link}>\n            Home\n          </a>\n          <UnstyledButton className={classes.link} onClick={toggleLinks}>\n            <Center inline>\n              <Box component=\"span\" mr={5}>\n                Features\n              </Box>\n              <IconChevronDown size={16} color={theme.fn.primaryColor()} />\n            </Center>\n          </UnstyledButton>\n          <Collapse in={linksOpened}>{links}</Collapse>\n          <a href=\"#\" className={classes.link}>\n            Learn\n          </a>\n          <a href=\"#\" className={classes.link}>\n            Academy\n          </a>\n\n          <Divider my=\"sm\" color={theme.colorScheme === 'dark' ? 'dark.5' : 'gray.1'} />\n\n          <Group position=\"center\" grow pb=\"xl\" px=\"md\">\n            <Button variant=\"default\">Log in</Button>\n            <Button>Sign up</Button>\n          </Group>\n        </ScrollArea>\n      </Drawer>\n    </Box>\n  );\n}\n","attributes":{"title":"Header with mega menu","category":"headers","author":"rtivital","withColor":true,"responsive":true,"changelog":"september-2022","dependencies":["/core/text/","/core/button/","/core/group/","/core/simple-grid/","/core/hover-card/","/core/app-shell/","/core/theme-icon/","/core/anchor/","/core/divider/","/core/burger/","/core/collapse/","/core/center/","/core/drawer/","@tabler/icons-react"],"canvas":{"center":false}}},{"component":"HeaderMenu","slug":"header-menu","code":"import { createStyles, Header, Menu, Group, Center, Burger, Container, rem } from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport { IconChevronDown } from '@tabler/icons-react';\nimport { MantineLogo } from '@mantine/ds';\n\nconst useStyles = createStyles((theme) => ({\n  inner: {\n    height: rem(56),\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n\n  links: {\n    [theme.fn.smallerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  burger: {\n    [theme.fn.largerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  link: {\n    display: 'block',\n    lineHeight: 1,\n    padding: `${rem(8)} ${rem(12)}`,\n    borderRadius: theme.radius.sm,\n    textDecoration: 'none',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n    fontSize: theme.fontSizes.sm,\n    fontWeight: 500,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n    },\n  },\n\n  linkLabel: {\n    marginRight: rem(5),\n  },\n}));\n\ninterface HeaderSearchProps {\n  links: { link: string; label: string; links: { link: string; label: string }[] }[];\n}\n\nexport function HeaderMenu({ links }: HeaderSearchProps) {\n  const [opened, { toggle }] = useDisclosure(false);\n  const { classes } = useStyles();\n\n  const items = links.map((link) => {\n    const menuItems = link.links?.map((item) => (\n      <Menu.Item key={item.link}>{item.label}</Menu.Item>\n    ));\n\n    if (menuItems) {\n      return (\n        <Menu key={link.label} trigger=\"hover\" transitionProps={{ exitDuration: 0 }} withinPortal>\n          <Menu.Target>\n            <a\n              href={link.link}\n              className={classes.link}\n              onClick={(event) => event.preventDefault()}\n            >\n              <Center>\n                <span className={classes.linkLabel}>{link.label}</span>\n                <IconChevronDown size=\"0.9rem\" stroke={1.5} />\n              </Center>\n            </a>\n          </Menu.Target>\n          <Menu.Dropdown>{menuItems}</Menu.Dropdown>\n        </Menu>\n      );\n    }\n\n    return (\n      <a\n        key={link.label}\n        href={link.link}\n        className={classes.link}\n        onClick={(event) => event.preventDefault()}\n      >\n        {link.label}\n      </a>\n    );\n  });\n\n  return (\n    <Header height={56} mb={120}>\n      <Container>\n        <div className={classes.inner}>\n          <MantineLogo size={28} />\n          <Group spacing={5} className={classes.links}>\n            {items}\n          </Group>\n          <Burger opened={opened} onClick={toggle} className={classes.burger} size=\"sm\" />\n        </div>\n      </Container>\n    </Header>\n  );\n}\n","attributes":{"title":"Header with menus","category":"headers","author":"rtivital","responsive":true,"dependencies":["/core/app-shell/","/core/menu/","/core/group/","/core/center/","/core/burger/","/core/container/","/hooks/use-toggle/","@tabler/icons-react"],"props":{"links":[{"link":"/about","label":"Features"},{"link":"#1","label":"Learn","links":[{"link":"/docs","label":"Documentation"},{"link":"/resources","label":"Resources"},{"link":"/community","label":"Community"},{"link":"/blog","label":"Blog"}]},{"link":"/about","label":"About"},{"link":"/pricing","label":"Pricing"},{"link":"#2","label":"Support","links":[{"link":"/faq","label":"FAQ"},{"link":"/demo","label":"Book a demo"},{"link":"/forums","label":"Forums"}]}]},"canvas":{"center":false}}},{"component":"HeaderMenuColored","slug":"header-menu-colored","code":"import { createStyles, Header, Menu, Group, Center, Burger, Container, rem } from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport { IconChevronDown } from '@tabler/icons-react';\nimport { MantineLogo } from '@mantine/ds';\n\nconst useStyles = createStyles((theme) => ({\n  header: {\n    backgroundColor: theme.fn.variant({ variant: 'filled', color: theme.primaryColor }).background,\n    borderBottom: 0,\n  },\n\n  inner: {\n    height: rem(56),\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n\n  links: {\n    [theme.fn.smallerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  burger: {\n    [theme.fn.largerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  link: {\n    display: 'block',\n    lineHeight: 1,\n    padding: `${rem(8)} ${rem(12)}`,\n    borderRadius: theme.radius.sm,\n    textDecoration: 'none',\n    color: theme.white,\n    fontSize: theme.fontSizes.sm,\n    fontWeight: 500,\n\n    '&:hover': {\n      backgroundColor: theme.fn.lighten(\n        theme.fn.variant({ variant: 'filled', color: theme.primaryColor }).background!,\n        0.1\n      ),\n    },\n  },\n\n  linkLabel: {\n    marginRight: rem(5),\n  },\n}));\n\ninterface HeaderSearchProps {\n  links: { link: string; label: string; links: { link: string; label: string }[] }[];\n}\n\nexport function HeaderMenuColored({ links }: HeaderSearchProps) {\n  const [opened, { toggle }] = useDisclosure(false);\n  const { classes } = useStyles();\n\n  const items = links.map((link) => {\n    const menuItems = link.links?.map((item) => (\n      <Menu.Item key={item.link}>{item.label}</Menu.Item>\n    ));\n\n    if (menuItems) {\n      return (\n        <Menu key={link.label} trigger=\"hover\" transitionProps={{ exitDuration: 0 }} withinPortal>\n          <Menu.Target>\n            <a\n              href={link.link}\n              className={classes.link}\n              onClick={(event) => event.preventDefault()}\n            >\n              <Center>\n                <span className={classes.linkLabel}>{link.label}</span>\n                <IconChevronDown size=\"0.9rem\" stroke={1.5} />\n              </Center>\n            </a>\n          </Menu.Target>\n          <Menu.Dropdown>{menuItems}</Menu.Dropdown>\n        </Menu>\n      );\n    }\n\n    return (\n      <a\n        key={link.label}\n        href={link.link}\n        className={classes.link}\n        onClick={(event) => event.preventDefault()}\n      >\n        {link.label}\n      </a>\n    );\n  });\n\n  return (\n    <Header height={56} className={classes.header} mb={120}>\n      <Container>\n        <div className={classes.inner}>\n          <MantineLogo size={28} inverted />\n          <Group spacing={5} className={classes.links}>\n            {items}\n          </Group>\n          <Burger\n            opened={opened}\n            onClick={toggle}\n            className={classes.burger}\n            size=\"sm\"\n            color=\"#fff\"\n          />\n        </div>\n      </Container>\n    </Header>\n  );\n}\n","attributes":{"title":"Header with menus","category":"headers","author":"rtivital","responsive":true,"withColor":true,"dependencies":["/core/app-shell/","/core/menu/","/core/group/","/core/center/","/core/burger/","/core/container/","/hooks/use-toggle/","@tabler/icons-react"],"props":{"links":[{"link":"/about","label":"Features"},{"link":"#1","label":"Learn","links":[{"link":"/docs","label":"Documentation"},{"link":"/resources","label":"Resources"},{"link":"/community","label":"Community"},{"link":"/blog","label":"Blog"}]},{"link":"/about","label":"About"},{"link":"/pricing","label":"Pricing"},{"link":"#2","label":"Support","links":[{"link":"/faq","label":"FAQ"},{"link":"/demo","label":"Book a demo"},{"link":"/forums","label":"Forums"}]}]},"canvas":{"center":false}}},{"component":"HeaderMiddle","slug":"header-middle","code":"import { useState } from 'react';\nimport { createStyles, Header, Group, ActionIcon, Container, Burger, rem } from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport { IconBrandTwitter, IconBrandYoutube, IconBrandInstagram } from '@tabler/icons-react';\nimport { MantineLogo } from '@mantine/ds';\n\nconst useStyles = createStyles((theme) => ({\n  inner: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    height: rem(56),\n\n    [theme.fn.smallerThan('sm')]: {\n      justifyContent: 'flex-start',\n    },\n  },\n\n  links: {\n    width: rem(260),\n\n    [theme.fn.smallerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  social: {\n    width: rem(260),\n\n    [theme.fn.smallerThan('sm')]: {\n      width: 'auto',\n      marginLeft: 'auto',\n    },\n  },\n\n  burger: {\n    marginRight: theme.spacing.md,\n\n    [theme.fn.largerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  link: {\n    display: 'block',\n    lineHeight: 1,\n    padding: `${rem(8)} ${rem(12)}`,\n    borderRadius: theme.radius.sm,\n    textDecoration: 'none',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n    fontSize: theme.fontSizes.sm,\n    fontWeight: 500,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n    },\n  },\n\n  linkActive: {\n    '&, &:hover': {\n      backgroundColor: theme.fn.variant({ variant: 'light', color: theme.primaryColor }).background,\n      color: theme.fn.variant({ variant: 'light', color: theme.primaryColor }).color,\n    },\n  },\n}));\n\ninterface HeaderMiddleProps {\n  links: { link: string; label: string }[];\n}\n\nexport function HeaderMiddle({ links }: HeaderMiddleProps) {\n  const [opened, { toggle }] = useDisclosure(false);\n  const [active, setActive] = useState(links[0].link);\n  const { classes, cx } = useStyles();\n\n  const items = links.map((link) => (\n    <a\n      key={link.label}\n      href={link.link}\n      className={cx(classes.link, { [classes.linkActive]: active === link.link })}\n      onClick={(event) => {\n        event.preventDefault();\n        setActive(link.link);\n      }}\n    >\n      {link.label}\n    </a>\n  ));\n\n  return (\n    <Header height={56} mb={120}>\n      <Container className={classes.inner}>\n        <Burger opened={opened} onClick={toggle} size=\"sm\" className={classes.burger} />\n        <Group className={classes.links} spacing={5}>\n          {items}\n        </Group>\n\n        <MantineLogo size={28} />\n\n        <Group spacing={0} className={classes.social} position=\"right\" noWrap>\n          <ActionIcon size=\"lg\">\n            <IconBrandTwitter size=\"1.1rem\" stroke={1.5} />\n          </ActionIcon>\n          <ActionIcon size=\"lg\">\n            <IconBrandYoutube size=\"1.1rem\" stroke={1.5} />\n          </ActionIcon>\n          <ActionIcon size=\"lg\">\n            <IconBrandInstagram size=\"1.1rem\" stroke={1.5} />\n          </ActionIcon>\n        </Group>\n      </Container>\n    </Header>\n  );\n}\n","attributes":{"title":"Header with logo in the middle","category":"headers","author":"rtivital","responsive":true,"withColor":true,"dependencies":["/core/app-shell/","/core/group/","/core/action-icon/","/core/container/","/core/burger/","@tabler/icons-react"],"props":{"links":[{"link":"/about","label":"Home"},{"link":"/learn","label":"Features"},{"link":"/pricing","label":"Pricing"}]},"canvas":{"center":false}}},{"component":"HeaderResponsive","slug":"header-responsive","code":"import { useState } from 'react';\nimport {\n  createStyles,\n  Header,\n  Container,\n  Group,\n  Burger,\n  Paper,\n  Transition,\n  rem,\n} from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport { MantineLogo } from '@mantine/ds';\n\nconst HEADER_HEIGHT = rem(60);\n\nconst useStyles = createStyles((theme) => ({\n  root: {\n    position: 'relative',\n    zIndex: 1,\n  },\n\n  dropdown: {\n    position: 'absolute',\n    top: HEADER_HEIGHT,\n    left: 0,\n    right: 0,\n    zIndex: 0,\n    borderTopRightRadius: 0,\n    borderTopLeftRadius: 0,\n    borderTopWidth: 0,\n    overflow: 'hidden',\n\n    [theme.fn.largerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  header: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    height: '100%',\n  },\n\n  links: {\n    [theme.fn.smallerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  burger: {\n    [theme.fn.largerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  link: {\n    display: 'block',\n    lineHeight: 1,\n    padding: `${rem(8)} ${rem(12)}`,\n    borderRadius: theme.radius.sm,\n    textDecoration: 'none',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n    fontSize: theme.fontSizes.sm,\n    fontWeight: 500,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n    },\n\n    [theme.fn.smallerThan('sm')]: {\n      borderRadius: 0,\n      padding: theme.spacing.md,\n    },\n  },\n\n  linkActive: {\n    '&, &:hover': {\n      backgroundColor: theme.fn.variant({ variant: 'light', color: theme.primaryColor }).background,\n      color: theme.fn.variant({ variant: 'light', color: theme.primaryColor }).color,\n    },\n  },\n}));\n\ninterface HeaderResponsiveProps {\n  links: { link: string; label: string }[];\n}\n\nexport function HeaderResponsive({ links }: HeaderResponsiveProps) {\n  const [opened, { toggle, close }] = useDisclosure(false);\n  const [active, setActive] = useState(links[0].link);\n  const { classes, cx } = useStyles();\n\n  const items = links.map((link) => (\n    <a\n      key={link.label}\n      href={link.link}\n      className={cx(classes.link, { [classes.linkActive]: active === link.link })}\n      onClick={(event) => {\n        event.preventDefault();\n        setActive(link.link);\n        close();\n      }}\n    >\n      {link.label}\n    </a>\n  ));\n\n  return (\n    <Header height={HEADER_HEIGHT} mb={120} className={classes.root}>\n      <Container className={classes.header}>\n        <MantineLogo size={28} />\n        <Group spacing={5} className={classes.links}>\n          {items}\n        </Group>\n\n        <Burger opened={opened} onClick={toggle} className={classes.burger} size=\"sm\" />\n\n        <Transition transition=\"pop-top-right\" duration={200} mounted={opened}>\n          {(styles) => (\n            <Paper className={classes.dropdown} withBorder style={styles}>\n              {items}\n            </Paper>\n          )}\n        </Transition>\n      </Container>\n    </Header>\n  );\n}\n","attributes":{"title":"Responsive header","category":"headers","author":"rtivital","withColor":true,"responsive":true,"dependencies":["/core/app-shell/","/core/container/","/core/group/","/core/burger/","/core/paper/","/core/transition/"],"props":{"links":[{"link":"/about","label":"Features"},{"link":"/pricing","label":"Pricing"},{"link":"/learn","label":"Learn"},{"link":"/community","label":"Community"}]},"canvas":{"center":false}}},{"component":"HeaderSearch","slug":"header-search","code":"import { createStyles, Header, Autocomplete, Group, Burger, rem } from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport { IconSearch } from '@tabler/icons-react';\nimport { MantineLogo } from '@mantine/ds';\n\nconst useStyles = createStyles((theme) => ({\n  header: {\n    paddingLeft: theme.spacing.md,\n    paddingRight: theme.spacing.md,\n  },\n\n  inner: {\n    height: rem(56),\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n\n  links: {\n    [theme.fn.smallerThan('md')]: {\n      display: 'none',\n    },\n  },\n\n  search: {\n    [theme.fn.smallerThan('xs')]: {\n      display: 'none',\n    },\n  },\n\n  link: {\n    display: 'block',\n    lineHeight: 1,\n    padding: `${rem(8)} ${rem(12)}`,\n    borderRadius: theme.radius.sm,\n    textDecoration: 'none',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n    fontSize: theme.fontSizes.sm,\n    fontWeight: 500,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n    },\n  },\n}));\n\ninterface HeaderSearchProps {\n  links: { link: string; label: string }[];\n}\n\nexport function HeaderSearch({ links }: HeaderSearchProps) {\n  const [opened, { toggle }] = useDisclosure(false);\n  const { classes } = useStyles();\n\n  const items = links.map((link) => (\n    <a\n      key={link.label}\n      href={link.link}\n      className={classes.link}\n      onClick={(event) => event.preventDefault()}\n    >\n      {link.label}\n    </a>\n  ));\n\n  return (\n    <Header height={56} className={classes.header} mb={120}>\n      <div className={classes.inner}>\n        <Group>\n          <Burger opened={opened} onClick={toggle} size=\"sm\" />\n          <MantineLogo size={28} />\n        </Group>\n\n        <Group>\n          <Group ml={50} spacing={5} className={classes.links}>\n            {items}\n          </Group>\n          <Autocomplete\n            className={classes.search}\n            placeholder=\"Search\"\n            icon={<IconSearch size=\"1rem\" stroke={1.5} />}\n            data={['React', 'Angular', 'Vue', 'Next.js', 'Riot.js', 'Svelte', 'Blitz.js']}\n          />\n        </Group>\n      </div>\n    </Header>\n  );\n}\n","attributes":{"title":"Header with search","category":"headers","author":"rtivital","responsive":true,"dependencies":["/core/app-shell/","/core/autocomplete/","/core/group/","/core/burger/","/hooks/use-toggle/","@tabler/icons-react"],"props":{"links":[{"link":"/about","label":"Features"},{"link":"/pricing","label":"Pricing"},{"link":"/learn","label":"Learn"},{"link":"/community","label":"Community"}]},"canvas":{"center":false}}},{"component":"HeaderSimple","slug":"header-simple","code":"import { useState } from 'react';\nimport { createStyles, Header, Container, Group, Burger, rem } from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport { MantineLogo } from '@mantine/ds';\n\nconst useStyles = createStyles((theme) => ({\n  header: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    height: '100%',\n  },\n\n  links: {\n    [theme.fn.smallerThan('xs')]: {\n      display: 'none',\n    },\n  },\n\n  burger: {\n    [theme.fn.largerThan('xs')]: {\n      display: 'none',\n    },\n  },\n\n  link: {\n    display: 'block',\n    lineHeight: 1,\n    padding: `${rem(8)} ${rem(12)}`,\n    borderRadius: theme.radius.sm,\n    textDecoration: 'none',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n    fontSize: theme.fontSizes.sm,\n    fontWeight: 500,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n    },\n  },\n\n  linkActive: {\n    '&, &:hover': {\n      backgroundColor: theme.fn.variant({ variant: 'light', color: theme.primaryColor }).background,\n      color: theme.fn.variant({ variant: 'light', color: theme.primaryColor }).color,\n    },\n  },\n}));\n\ninterface HeaderSimpleProps {\n  links: { link: string; label: string }[];\n}\n\nexport function HeaderSimple({ links }: HeaderSimpleProps) {\n  const [opened, { toggle }] = useDisclosure(false);\n  const [active, setActive] = useState(links[0].link);\n  const { classes, cx } = useStyles();\n\n  const items = links.map((link) => (\n    <a\n      key={link.label}\n      href={link.link}\n      className={cx(classes.link, { [classes.linkActive]: active === link.link })}\n      onClick={(event) => {\n        event.preventDefault();\n        setActive(link.link);\n      }}\n    >\n      {link.label}\n    </a>\n  ));\n\n  return (\n    <Header height={60} mb={120}>\n      <Container className={classes.header}>\n        <MantineLogo size={28} />\n        <Group spacing={5} className={classes.links}>\n          {items}\n        </Group>\n\n        <Burger opened={opened} onClick={toggle} className={classes.burger} size=\"sm\" />\n      </Container>\n    </Header>\n  );\n}\n","attributes":{"title":"Simple header","category":"headers","author":"rtivital","withColor":true,"responsive":true,"dependencies":["/core/app-shell/","/core/container/","/core/group/","/core/burger/"],"props":{"links":[{"link":"/about","label":"Features"},{"link":"/pricing","label":"Pricing"},{"link":"/learn","label":"Learn"},{"link":"/community","label":"Community"}]},"canvas":{"center":false}}},{"component":"HeaderTabs","slug":"header-tabs","code":"import { useState } from 'react';\nimport {\n  createStyles,\n  Container,\n  Avatar,\n  UnstyledButton,\n  Group,\n  Text,\n  Menu,\n  Tabs,\n  Burger,\n  rem,\n} from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport {\n  IconLogout,\n  IconHeart,\n  IconStar,\n  IconMessage,\n  IconSettings,\n  IconPlayerPause,\n  IconTrash,\n  IconSwitchHorizontal,\n  IconChevronDown,\n} from '@tabler/icons-react';\nimport { MantineLogo } from '@mantine/ds';\n\nconst useStyles = createStyles((theme) => ({\n  header: {\n    paddingTop: theme.spacing.sm,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n    borderBottom: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? 'transparent' : theme.colors.gray[2]\n    }`,\n    marginBottom: rem(120),\n  },\n\n  mainSection: {\n    paddingBottom: theme.spacing.sm,\n  },\n\n  user: {\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.black,\n    padding: `${theme.spacing.xs} ${theme.spacing.sm}`,\n    borderRadius: theme.radius.sm,\n    transition: 'background-color 100ms ease',\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.white,\n    },\n\n    [theme.fn.smallerThan('xs')]: {\n      display: 'none',\n    },\n  },\n\n  burger: {\n    [theme.fn.largerThan('xs')]: {\n      display: 'none',\n    },\n  },\n\n  userActive: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.white,\n  },\n\n  tabs: {\n    [theme.fn.smallerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  tabsList: {\n    borderBottom: '0 !important',\n  },\n\n  tab: {\n    fontWeight: 500,\n    height: rem(38),\n    backgroundColor: 'transparent',\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[1],\n    },\n\n    '&[data-active]': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n      borderColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[2],\n    },\n  },\n}));\n\ninterface HeaderTabsProps {\n  user: { name: string; image: string };\n  tabs: string[];\n}\n\nexport function HeaderTabs({ user, tabs }: HeaderTabsProps) {\n  const { classes, theme, cx } = useStyles();\n  const [opened, { toggle }] = useDisclosure(false);\n  const [userMenuOpened, setUserMenuOpened] = useState(false);\n\n  const items = tabs.map((tab) => (\n    <Tabs.Tab value={tab} key={tab}>\n      {tab}\n    </Tabs.Tab>\n  ));\n\n  return (\n    <div className={classes.header}>\n      <Container className={classes.mainSection}>\n        <Group position=\"apart\">\n          <MantineLogo size={28} />\n\n          <Burger opened={opened} onClick={toggle} className={classes.burger} size=\"sm\" />\n\n          <Menu\n            width={260}\n            position=\"bottom-end\"\n            transitionProps={{ transition: 'pop-top-right' }}\n            onClose={() => setUserMenuOpened(false)}\n            onOpen={() => setUserMenuOpened(true)}\n            withinPortal\n          >\n            <Menu.Target>\n              <UnstyledButton\n                className={cx(classes.user, { [classes.userActive]: userMenuOpened })}\n              >\n                <Group spacing={7}>\n                  <Avatar src={user.image} alt={user.name} radius=\"xl\" size={20} />\n                  <Text weight={500} size=\"sm\" sx={{ lineHeight: 1 }} mr={3}>\n                    {user.name}\n                  </Text>\n                  <IconChevronDown size={rem(12)} stroke={1.5} />\n                </Group>\n              </UnstyledButton>\n            </Menu.Target>\n            <Menu.Dropdown>\n              <Menu.Item\n                icon={<IconHeart size=\"0.9rem\" color={theme.colors.red[6]} stroke={1.5} />}\n              >\n                Liked posts\n              </Menu.Item>\n              <Menu.Item\n                icon={<IconStar size=\"0.9rem\" color={theme.colors.yellow[6]} stroke={1.5} />}\n              >\n                Saved posts\n              </Menu.Item>\n              <Menu.Item\n                icon={<IconMessage size=\"0.9rem\" color={theme.colors.blue[6]} stroke={1.5} />}\n              >\n                Your comments\n              </Menu.Item>\n\n              <Menu.Label>Settings</Menu.Label>\n              <Menu.Item icon={<IconSettings size=\"0.9rem\" stroke={1.5} />}>\n                Account settings\n              </Menu.Item>\n              <Menu.Item icon={<IconSwitchHorizontal size=\"0.9rem\" stroke={1.5} />}>\n                Change account\n              </Menu.Item>\n              <Menu.Item icon={<IconLogout size=\"0.9rem\" stroke={1.5} />}>Logout</Menu.Item>\n\n              <Menu.Divider />\n\n              <Menu.Label>Danger zone</Menu.Label>\n              <Menu.Item icon={<IconPlayerPause size=\"0.9rem\" stroke={1.5} />}>\n                Pause subscription\n              </Menu.Item>\n              <Menu.Item color=\"red\" icon={<IconTrash size=\"0.9rem\" stroke={1.5} />}>\n                Delete account\n              </Menu.Item>\n            </Menu.Dropdown>\n          </Menu>\n        </Group>\n      </Container>\n      <Container>\n        <Tabs\n          defaultValue=\"Home\"\n          variant=\"outline\"\n          classNames={{\n            root: classes.tabs,\n            tabsList: classes.tabsList,\n            tab: classes.tab,\n          }}\n        >\n          <Tabs.List>{items}</Tabs.List>\n        </Tabs>\n      </Container>\n    </div>\n  );\n}\n","attributes":{"title":"Header with tabs","category":"headers","author":"rtivital","responsive":true,"dependencies":["/core/container/","/core/avatar/","/core/button/#unstyled-button","/core/group/","/core/text/","/core/menu/","/core/divider/","/core/tabs/","/core/burger/","/hooks/use-toggle/","@tabler/icons-react","@tabler/icons-react"],"props":{"user":{"name":"Jane Spoonfighter","email":"janspoon@fighter.dev","image":"https://images.unsplash.com/photo-1508214751196-bcfd4ca60f91?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=255&q=80"},"tabs":["Home","Orders","Education","Community","Forums","Support","Account","Helpdesk"]},"canvas":{"center":false}}},{"component":"HeaderTabsColored","slug":"header-tabs-colored","code":"import { useState } from 'react';\nimport {\n  createStyles,\n  Container,\n  Avatar,\n  UnstyledButton,\n  Group,\n  Text,\n  Menu,\n  Tabs,\n  Burger,\n  rem,\n} from '@mantine/core';\nimport { useDisclosure } from '@mantine/hooks';\nimport {\n  IconLogout,\n  IconHeart,\n  IconStar,\n  IconMessage,\n  IconSettings,\n  IconPlayerPause,\n  IconTrash,\n  IconSwitchHorizontal,\n  IconChevronDown,\n} from '@tabler/icons-react';\nimport { MantineLogo } from '@mantine/ds';\n\nconst useStyles = createStyles((theme) => ({\n  header: {\n    paddingTop: theme.spacing.sm,\n    backgroundColor: theme.fn.variant({ variant: 'filled', color: theme.primaryColor }).background,\n    borderBottom: `${rem(1)} solid ${\n      theme.fn.variant({ variant: 'filled', color: theme.primaryColor }).background\n    }`,\n    marginBottom: rem(120),\n  },\n\n  mainSection: {\n    paddingBottom: theme.spacing.sm,\n  },\n\n  user: {\n    color: theme.white,\n    padding: `${theme.spacing.xs} ${theme.spacing.sm}`,\n    borderRadius: theme.radius.sm,\n    transition: 'background-color 100ms ease',\n\n    '&:hover': {\n      backgroundColor: theme.fn.lighten(\n        theme.fn.variant({ variant: 'filled', color: theme.primaryColor }).background!,\n        0.1\n      ),\n    },\n\n    [theme.fn.smallerThan('xs')]: {\n      display: 'none',\n    },\n  },\n\n  burger: {\n    [theme.fn.largerThan('xs')]: {\n      display: 'none',\n    },\n  },\n\n  userActive: {\n    backgroundColor: theme.fn.lighten(\n      theme.fn.variant({ variant: 'filled', color: theme.primaryColor }).background!,\n      0.1\n    ),\n  },\n\n  tabs: {\n    [theme.fn.smallerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  tabsList: {\n    borderBottom: '0 !important',\n  },\n\n  tab: {\n    fontWeight: 500,\n    height: rem(38),\n    color: theme.white,\n    backgroundColor: 'transparent',\n    borderColor: theme.fn.variant({ variant: 'filled', color: theme.primaryColor }).background,\n\n    '&:hover': {\n      backgroundColor: theme.fn.lighten(\n        theme.fn.variant({ variant: 'filled', color: theme.primaryColor }).background!,\n        0.1\n      ),\n    },\n\n    '&[data-active]': {\n      backgroundColor: theme.fn.lighten(\n        theme.fn.variant({ variant: 'filled', color: theme.primaryColor }).background!,\n        0.1\n      ),\n      borderColor: theme.fn.variant({ variant: 'filled', color: theme.primaryColor }).background,\n    },\n  },\n}));\n\ninterface HeaderTabsProps {\n  user: { name: string; image: string };\n  tabs: string[];\n}\n\nexport function HeaderTabsColored({ user, tabs }: HeaderTabsProps) {\n  const { classes, theme, cx } = useStyles();\n  const [opened, { toggle }] = useDisclosure(false);\n  const [userMenuOpened, setUserMenuOpened] = useState(false);\n\n  const items = tabs.map((tab) => (\n    <Tabs.Tab value={tab} key={tab}>\n      {tab}\n    </Tabs.Tab>\n  ));\n\n  return (\n    <div className={classes.header}>\n      <Container className={classes.mainSection}>\n        <Group position=\"apart\">\n          <MantineLogo size={28} inverted />\n\n          <Burger\n            opened={opened}\n            onClick={toggle}\n            className={classes.burger}\n            size=\"sm\"\n            color={theme.white}\n          />\n\n          <Menu\n            width={260}\n            position=\"bottom-end\"\n            transitionProps={{ transition: 'pop-top-right' }}\n            onClose={() => setUserMenuOpened(false)}\n            onOpen={() => setUserMenuOpened(true)}\n            withinPortal\n          >\n            <Menu.Target>\n              <UnstyledButton\n                className={cx(classes.user, { [classes.userActive]: userMenuOpened })}\n              >\n                <Group spacing={7}>\n                  <Avatar src={user.image} alt={user.name} radius=\"xl\" size={20} />\n                  <Text weight={500} size=\"sm\" sx={{ lineHeight: 1, color: theme.white }} mr={3}>\n                    {user.name}\n                  </Text>\n                  <IconChevronDown size={rem(12)} stroke={1.5} />\n                </Group>\n              </UnstyledButton>\n            </Menu.Target>\n            <Menu.Dropdown>\n              <Menu.Item\n                icon={<IconHeart size=\"0.9rem\" stroke={1.5} color={theme.colors.red[6]} />}\n              >\n                Liked posts\n              </Menu.Item>\n              <Menu.Item\n                icon={<IconStar size=\"0.9rem\" stroke={1.5} color={theme.colors.yellow[6]} />}\n              >\n                Saved posts\n              </Menu.Item>\n              <Menu.Item\n                icon={<IconMessage size=\"0.9rem\" stroke={1.5} color={theme.colors.blue[6]} />}\n              >\n                Your comments\n              </Menu.Item>\n\n              <Menu.Label>Settings</Menu.Label>\n              <Menu.Item icon={<IconSettings size=\"0.9rem\" stroke={1.5} />}>\n                Account settings\n              </Menu.Item>\n              <Menu.Item icon={<IconSwitchHorizontal size=\"0.9rem\" stroke={1.5} />}>\n                Change account\n              </Menu.Item>\n              <Menu.Item icon={<IconLogout size=\"0.9rem\" stroke={1.5} />}>Logout</Menu.Item>\n\n              <Menu.Divider />\n\n              <Menu.Label>Danger zone</Menu.Label>\n              <Menu.Item icon={<IconPlayerPause size=\"0.9rem\" stroke={1.5} />}>\n                Pause subscription\n              </Menu.Item>\n              <Menu.Item color=\"red\" icon={<IconTrash size=\"0.9rem\" stroke={1.5} />}>\n                Delete account\n              </Menu.Item>\n            </Menu.Dropdown>\n          </Menu>\n        </Group>\n      </Container>\n      <Container>\n        <Tabs\n          defaultValue=\"Home\"\n          variant=\"outline\"\n          classNames={{\n            root: classes.tabs,\n            tabsList: classes.tabsList,\n            tab: classes.tab,\n          }}\n        >\n          <Tabs.List>{items}</Tabs.List>\n        </Tabs>\n      </Container>\n    </div>\n  );\n}\n","attributes":{"title":"Header with tabs","category":"headers","author":"rtivital","responsive":true,"withColor":true,"dependencies":["/core/container/","/core/avatar/","/core/button/#unstyled-button","/core/group/","/core/text/","/core/menu/","/core/divider/","/core/tabs/","/core/burger/","/hooks/use-toggle/","@tabler/icons-react","@tabler/icons-react"],"props":{"user":{"name":"Jane Spoonfighter","email":"janspoon@fighter.dev","image":"https://images.unsplash.com/photo-1508214751196-bcfd4ca60f91?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=255&q=80"},"tabs":["Home","Orders","Education","Community","Forums","Support","Account","Helpdesk"]},"canvas":{"center":false}}},{"component":"HeroBullets","slug":"hero-bullets","code":"import {\n  createStyles,\n  Image,\n  Container,\n  Title,\n  Button,\n  Group,\n  Text,\n  List,\n  ThemeIcon,\n  rem,\n} from '@mantine/core';\nimport { IconCheck } from '@tabler/icons-react';\nimport image from './image.svg';\n\nconst useStyles = createStyles((theme) => ({\n  inner: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    paddingTop: `calc(${theme.spacing.xl} * 4)`,\n    paddingBottom: `calc(${theme.spacing.xl} * 4)`,\n  },\n\n  content: {\n    maxWidth: rem(480),\n    marginRight: `calc(${theme.spacing.xl} * 3)`,\n\n    [theme.fn.smallerThan('md')]: {\n      maxWidth: '100%',\n      marginRight: 0,\n    },\n  },\n\n  title: {\n    color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    fontSize: rem(44),\n    lineHeight: 1.2,\n    fontWeight: 900,\n\n    [theme.fn.smallerThan('xs')]: {\n      fontSize: rem(28),\n    },\n  },\n\n  control: {\n    [theme.fn.smallerThan('xs')]: {\n      flex: 1,\n    },\n  },\n\n  image: {\n    flex: 1,\n\n    [theme.fn.smallerThan('md')]: {\n      display: 'none',\n    },\n  },\n\n  highlight: {\n    position: 'relative',\n    backgroundColor: theme.fn.variant({ variant: 'light', color: theme.primaryColor }).background,\n    borderRadius: theme.radius.sm,\n    padding: `${rem(4)} ${rem(12)}`,\n  },\n}));\n\nexport function HeroBullets() {\n  const { classes } = useStyles();\n  return (\n    <div>\n      <Container>\n        <div className={classes.inner}>\n          <div className={classes.content}>\n            <Title className={classes.title}>\n              A <span className={classes.highlight}>modern</span> React <br /> components library\n            </Title>\n            <Text color=\"dimmed\" mt=\"md\">\n              Build fully functional accessible web applications faster than ever – Mantine includes\n              more than 120 customizable components and hooks to cover you in any situation\n            </Text>\n\n            <List\n              mt={30}\n              spacing=\"sm\"\n              size=\"sm\"\n              icon={\n                <ThemeIcon size={20} radius=\"xl\">\n                  <IconCheck size={rem(12)} stroke={1.5} />\n                </ThemeIcon>\n              }\n            >\n              <List.Item>\n                <b>TypeScript based</b> – build type safe applications, all components and hooks\n                export types\n              </List.Item>\n              <List.Item>\n                <b>Free and open source</b> – all packages have MIT license, you can use Mantine in\n                any project\n              </List.Item>\n              <List.Item>\n                <b>No annoying focus ring</b> – focus ring will appear only when user navigates with\n                keyboard\n              </List.Item>\n            </List>\n\n            <Group mt={30}>\n              <Button radius=\"xl\" size=\"md\" className={classes.control}>\n                Get started\n              </Button>\n              <Button variant=\"default\" radius=\"xl\" size=\"md\" className={classes.control}>\n                Source code\n              </Button>\n            </Group>\n          </div>\n          <Image src={image.src} className={classes.image} />\n        </div>\n      </Container>\n    </div>\n  );\n}\n","attributes":{"title":"Hero with bullets","category":"hero","author":"rtivital","withColor":true,"responsive":true,"dependencies":["/core/container/","/core/image/","/core/list/","/core/title/","/core/theme-icon/","/core/button/","/core/group/","/core/text/","@tabler/icons-react","https://www.freepik.com/"],"canvas":{"center":false}}},{"component":"HeroContentLeft","slug":"hero-content-left","code":"import { createStyles, Overlay, Container, Title, Button, Text, rem } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  hero: {\n    position: 'relative',\n    backgroundImage:\n      'url(https://images.unsplash.com/photo-1519389950473-47ba0277781c?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1770&q=80)',\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n\n  container: {\n    height: rem(700),\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'flex-end',\n    alignItems: 'flex-start',\n    paddingBottom: `calc(${theme.spacing.xl} * 6)`,\n    zIndex: 1,\n    position: 'relative',\n\n    [theme.fn.smallerThan('sm')]: {\n      height: rem(500),\n      paddingBottom: `calc(${theme.spacing.xl} * 3)`,\n    },\n  },\n\n  title: {\n    color: theme.white,\n    fontSize: rem(60),\n    fontWeight: 900,\n    lineHeight: 1.1,\n\n    [theme.fn.smallerThan('sm')]: {\n      fontSize: rem(40),\n      lineHeight: 1.2,\n    },\n\n    [theme.fn.smallerThan('xs')]: {\n      fontSize: rem(28),\n      lineHeight: 1.3,\n    },\n  },\n\n  description: {\n    color: theme.white,\n    maxWidth: 600,\n\n    [theme.fn.smallerThan('sm')]: {\n      maxWidth: '100%',\n      fontSize: theme.fontSizes.sm,\n    },\n  },\n\n  control: {\n    marginTop: `calc(${theme.spacing.xl} * 1.5)`,\n\n    [theme.fn.smallerThan('sm')]: {\n      width: '100%',\n    },\n  },\n}));\n\nexport function HeroContentLeft() {\n  const { classes } = useStyles();\n\n  return (\n    <div className={classes.hero}>\n      <Overlay\n        gradient=\"linear-gradient(180deg, rgba(0, 0, 0, 0.25) 0%, rgba(0, 0, 0, .65) 40%)\"\n        opacity={1}\n        zIndex={0}\n      />\n      <Container className={classes.container}>\n        <Title className={classes.title}>A fully featured React components library</Title>\n        <Text className={classes.description} size=\"xl\" mt=\"xl\">\n          Build fully functional accessible web applications faster than ever – Mantine includes\n          more than 120 customizable components and hooks to cover you in any situation\n        </Text>\n\n        <Button variant=\"gradient\" size=\"xl\" radius=\"xl\" className={classes.control}>\n          Get started\n        </Button>\n      </Container>\n    </div>\n  );\n}\n","attributes":{"title":"Hero with content on left","category":"hero","author":"rtivital","responsive":true,"dependencies":["/core/container/","/core/button/","/core/title/","/core/text/","/core/overlay/"],"canvas":{"center":false}}},{"component":"HeroImageBackground","slug":"hero-image-background","code":"import { Title, Text, Container, Button, Overlay, createStyles, rem } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    position: 'relative',\n    paddingTop: rem(180),\n    paddingBottom: rem(130),\n    backgroundImage:\n      'url(https://images.unsplash.com/photo-1573164713988-8665fc963095?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=980&q=80)',\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n\n    [theme.fn.smallerThan('xs')]: {\n      paddingTop: rem(80),\n      paddingBottom: rem(50),\n    },\n  },\n\n  inner: {\n    position: 'relative',\n    zIndex: 1,\n  },\n\n  title: {\n    fontWeight: 800,\n    fontSize: rem(40),\n    letterSpacing: rem(-1),\n    paddingLeft: theme.spacing.md,\n    paddingRight: theme.spacing.md,\n    color: theme.white,\n    marginBottom: theme.spacing.xs,\n    textAlign: 'center',\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n\n    [theme.fn.smallerThan('xs')]: {\n      fontSize: rem(28),\n      textAlign: 'left',\n    },\n  },\n\n  highlight: {\n    color: theme.colors[theme.primaryColor][4],\n  },\n\n  description: {\n    color: theme.colors.gray[0],\n    textAlign: 'center',\n\n    [theme.fn.smallerThan('xs')]: {\n      fontSize: theme.fontSizes.md,\n      textAlign: 'left',\n    },\n  },\n\n  controls: {\n    marginTop: `calc(${theme.spacing.xl} * 1.5)`,\n    display: 'flex',\n    justifyContent: 'center',\n    paddingLeft: theme.spacing.md,\n    paddingRight: theme.spacing.md,\n\n    [theme.fn.smallerThan('xs')]: {\n      flexDirection: 'column',\n    },\n  },\n\n  control: {\n    height: rem(42),\n    fontSize: theme.fontSizes.md,\n\n    '&:not(:first-of-type)': {\n      marginLeft: theme.spacing.md,\n    },\n\n    [theme.fn.smallerThan('xs')]: {\n      '&:not(:first-of-type)': {\n        marginTop: theme.spacing.md,\n        marginLeft: 0,\n      },\n    },\n  },\n\n  secondaryControl: {\n    color: theme.white,\n    backgroundColor: 'rgba(255, 255, 255, .4)',\n\n    '&:hover': {\n      backgroundColor: 'rgba(255, 255, 255, .45) !important',\n    },\n  },\n}));\n\nexport function HeroImageBackground() {\n  const { classes, cx } = useStyles();\n\n  return (\n    <div className={classes.wrapper}>\n      <Overlay color=\"#000\" opacity={0.65} zIndex={1} />\n\n      <div className={classes.inner}>\n        <Title className={classes.title}>\n          Automated AI code reviews for{' '}\n          <Text component=\"span\" inherit className={classes.highlight}>\n            any stack\n          </Text>\n        </Title>\n\n        <Container size={640}>\n          <Text size=\"lg\" className={classes.description}>\n            Build more reliable software with AI companion. AI is also trained to detect lazy\n            developers who do nothing and just complain on Twitter.\n          </Text>\n        </Container>\n\n        <div className={classes.controls}>\n          <Button className={classes.control} variant=\"white\" size=\"lg\">\n            Get started\n          </Button>\n          <Button className={cx(classes.control, classes.secondaryControl)} size=\"lg\">\n            Live demo\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","attributes":{"title":"Hero with background image","category":"hero","author":"rtivital","responsive":true,"withColor":true,"dependencies":["/core/text/","/core/title/","/core/button/","/core/container/","/core/group/"],"canvas":{"center":false}}},{"component":"HeroImageRight","slug":"hero-image-right","code":"import { createStyles, Container, Title, Text, Button, rem } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  root: {\n    backgroundColor: '#11284b',\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n    backgroundImage:\n      'linear-gradient(250deg, rgba(130, 201, 30, 0) 0%, #062343 70%), url(https://images.unsplash.com/photo-1451187580459-43490279c0fa?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1080&q=80)',\n    paddingTop: `calc(${theme.spacing.xl} * 3)`,\n    paddingBottom: `calc(${theme.spacing.xl} * 3)`,\n  },\n\n  inner: {\n    display: 'flex',\n    justifyContent: 'space-between',\n\n    [theme.fn.smallerThan('md')]: {\n      flexDirection: 'column',\n    },\n  },\n\n  image: {\n    [theme.fn.smallerThan('md')]: {\n      display: 'none',\n    },\n  },\n\n  content: {\n    paddingTop: `calc(${theme.spacing.xl} * 2)`,\n    paddingBottom: `calc(${theme.spacing.xl} * 2)`,\n    marginRight: `calc(${theme.spacing.xl} * 3)`,\n\n    [theme.fn.smallerThan('md')]: {\n      marginRight: 0,\n    },\n  },\n\n  title: {\n    color: theme.white,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    fontWeight: 900,\n    lineHeight: 1.05,\n    maxWidth: rem(500),\n    fontSize: rem(48),\n\n    [theme.fn.smallerThan('md')]: {\n      maxWidth: '100%',\n      fontSize: rem(34),\n      lineHeight: 1.15,\n    },\n  },\n\n  description: {\n    color: theme.white,\n    opacity: 0.75,\n    maxWidth: rem(500),\n\n    [theme.fn.smallerThan('md')]: {\n      maxWidth: '100%',\n    },\n  },\n\n  control: {\n    paddingLeft: rem(50),\n    paddingRight: rem(50),\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    fontSize: rem(22),\n\n    [theme.fn.smallerThan('md')]: {\n      width: '100%',\n    },\n  },\n}));\n\nexport function HeroImageRight() {\n  const { classes } = useStyles();\n  return (\n    <div className={classes.root}>\n      <Container size=\"lg\">\n        <div className={classes.inner}>\n          <div className={classes.content}>\n            <Title className={classes.title}>\n              A{' '}\n              <Text\n                component=\"span\"\n                inherit\n                variant=\"gradient\"\n                gradient={{ from: 'pink', to: 'yellow' }}\n              >\n                fully featured\n              </Text>{' '}\n              React components library\n            </Title>\n\n            <Text className={classes.description} mt={30}>\n              Build fully functional accessible web applications with ease – Mantine includes more\n              than 100 customizable components and hooks to cover you in any situation\n            </Text>\n\n            <Button\n              variant=\"gradient\"\n              gradient={{ from: 'pink', to: 'yellow' }}\n              size=\"xl\"\n              className={classes.control}\n              mt={40}\n            >\n              Get started\n            </Button>\n          </div>\n        </div>\n      </Container>\n    </div>\n  );\n}\n","attributes":{"title":"Hero with image on the right","category":"hero","author":"rtivital","responsive":true,"dependencies":["/core/text/","/core/container/","/core/button/","/core/image/","/core/title/","https://www.freepik.com/","https://heropatterns.com/"],"canvas":{"center":false}}},{"component":"HeroText","slug":"hero-text","code":"import { createStyles, Title, Text, Button, Container, rem } from '@mantine/core';\nimport { Dots } from './Dots';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    position: 'relative',\n    paddingTop: rem(120),\n    paddingBottom: rem(80),\n\n    [theme.fn.smallerThan('sm')]: {\n      paddingTop: rem(80),\n      paddingBottom: rem(60),\n    },\n  },\n\n  inner: {\n    position: 'relative',\n    zIndex: 1,\n  },\n\n  dots: {\n    position: 'absolute',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[1],\n\n    [theme.fn.smallerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  dotsLeft: {\n    left: 0,\n    top: 0,\n  },\n\n  title: {\n    textAlign: 'center',\n    fontWeight: 800,\n    fontSize: rem(40),\n    letterSpacing: -1,\n    color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    marginBottom: theme.spacing.xs,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n\n    [theme.fn.smallerThan('xs')]: {\n      fontSize: rem(28),\n      textAlign: 'left',\n    },\n  },\n\n  highlight: {\n    color: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 4 : 6],\n  },\n\n  description: {\n    textAlign: 'center',\n\n    [theme.fn.smallerThan('xs')]: {\n      textAlign: 'left',\n      fontSize: theme.fontSizes.md,\n    },\n  },\n\n  controls: {\n    marginTop: theme.spacing.lg,\n    display: 'flex',\n    justifyContent: 'center',\n\n    [theme.fn.smallerThan('xs')]: {\n      flexDirection: 'column',\n    },\n  },\n\n  control: {\n    '&:not(:first-of-type)': {\n      marginLeft: theme.spacing.md,\n    },\n\n    [theme.fn.smallerThan('xs')]: {\n      height: rem(42),\n      fontSize: theme.fontSizes.md,\n\n      '&:not(:first-of-type)': {\n        marginTop: theme.spacing.md,\n        marginLeft: 0,\n      },\n    },\n  },\n}));\n\nexport function HeroText() {\n  const { classes } = useStyles();\n\n  return (\n    <Container className={classes.wrapper} size={1400}>\n      <Dots className={classes.dots} style={{ left: 0, top: 0 }} />\n      <Dots className={classes.dots} style={{ left: 60, top: 0 }} />\n      <Dots className={classes.dots} style={{ left: 0, top: 140 }} />\n      <Dots className={classes.dots} style={{ right: 0, top: 60 }} />\n\n      <div className={classes.inner}>\n        <Title className={classes.title}>\n          Automated AI{' '}\n          <Text component=\"span\" className={classes.highlight} inherit>\n            code reviews\n          </Text>{' '}\n          for any stack\n        </Title>\n\n        <Container p={0} size={600}>\n          <Text size=\"lg\" color=\"dimmed\" className={classes.description}>\n            Build more reliable software with AI companion. AI is also trained to detect lazy\n            developers who do nothing and just complain on Twitter.\n          </Text>\n        </Container>\n\n        <div className={classes.controls}>\n          <Button className={classes.control} size=\"lg\" variant=\"default\" color=\"gray\">\n            Book a demo\n          </Button>\n          <Button className={classes.control} size=\"lg\">\n            Purchase a license\n          </Button>\n        </div>\n      </div>\n    </Container>\n  );\n}\n","attributes":{"title":"Hero section with text","category":"hero","author":"rtivital","responsive":true,"withColor":true,"dependencies":["/core/text/","/core/title/","/core/button/","/core/container/","/core/group/"],"canvas":{"center":false}}},{"component":"HeroTitle","slug":"hero-title","code":"import { createStyles, Container, Text, Button, Group, rem } from '@mantine/core';\nimport { GithubIcon } from '@mantine/ds';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    position: 'relative',\n    boxSizing: 'border-box',\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.white,\n  },\n\n  inner: {\n    position: 'relative',\n    paddingTop: rem(200),\n    paddingBottom: rem(120),\n\n    [theme.fn.smallerThan('sm')]: {\n      paddingBottom: rem(80),\n      paddingTop: rem(80),\n    },\n  },\n\n  title: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    fontSize: rem(62),\n    fontWeight: 900,\n    lineHeight: 1.1,\n    margin: 0,\n    padding: 0,\n    color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n\n    [theme.fn.smallerThan('sm')]: {\n      fontSize: rem(42),\n      lineHeight: 1.2,\n    },\n  },\n\n  description: {\n    marginTop: theme.spacing.xl,\n    fontSize: rem(24),\n\n    [theme.fn.smallerThan('sm')]: {\n      fontSize: rem(18),\n    },\n  },\n\n  controls: {\n    marginTop: `calc(${theme.spacing.xl} * 2)`,\n\n    [theme.fn.smallerThan('sm')]: {\n      marginTop: theme.spacing.xl,\n    },\n  },\n\n  control: {\n    height: rem(54),\n    paddingLeft: rem(38),\n    paddingRight: rem(38),\n\n    [theme.fn.smallerThan('sm')]: {\n      height: rem(54),\n      paddingLeft: rem(18),\n      paddingRight: rem(18),\n      flex: 1,\n    },\n  },\n}));\n\nexport function HeroTitle() {\n  const { classes } = useStyles();\n\n  return (\n    <div className={classes.wrapper}>\n      <Container size={700} className={classes.inner}>\n        <h1 className={classes.title}>\n          A{' '}\n          <Text component=\"span\" variant=\"gradient\" gradient={{ from: 'blue', to: 'cyan' }} inherit>\n            fully featured\n          </Text>{' '}\n          React components and hooks library\n        </h1>\n\n        <Text className={classes.description} color=\"dimmed\">\n          Build fully functional accessible web applications with ease – Mantine includes more than\n          100 customizable components and hooks to cover you in any situation\n        </Text>\n\n        <Group className={classes.controls}>\n          <Button\n            size=\"xl\"\n            className={classes.control}\n            variant=\"gradient\"\n            gradient={{ from: 'blue', to: 'cyan' }}\n          >\n            Get started\n          </Button>\n\n          <Button\n            component=\"a\"\n            href=\"https://github.com/mantinedev/mantine\"\n            size=\"xl\"\n            variant=\"default\"\n            className={classes.control}\n            leftIcon={<GithubIcon size={20} />}\n          >\n            GitHub\n          </Button>\n        </Group>\n      </Container>\n    </div>\n  );\n}\n","attributes":{"title":"Hero section with gradient text","category":"hero","author":"rtivital","responsive":true,"dependencies":["/core/text/","/core/button/","/core/container/","/core/group/"],"canvas":{"center":false}}},{"component":"ImageActionBanner","slug":"image-action-banner","code":"import { createStyles, Card, Overlay, CardProps, Button, Text, rem } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  card: {\n    height: rem(240),\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n  },\n\n  content: {\n    ...theme.fn.cover(),\n    padding: theme.spacing.xl,\n    zIndex: 1,\n  },\n\n  action: {\n    position: 'absolute',\n    bottom: theme.spacing.xl,\n    right: theme.spacing.xl,\n  },\n\n  title: {\n    color: theme.white,\n    marginBottom: `calc(${theme.spacing.xs} / 2)`,\n  },\n\n  description: {\n    color: theme.white,\n    maxWidth: rem(220),\n  },\n}));\n\ninterface ImageActionBannerProps {\n  title: React.ReactNode;\n  description: React.ReactNode;\n  image: string;\n  action: {\n    label: string;\n    link: string;\n  };\n}\n\nexport function ImageActionBanner({\n  title,\n  description,\n  image,\n  action,\n  style,\n  className,\n  ...others\n}: ImageActionBannerProps & Omit<CardProps, keyof ImageActionBannerProps | 'children'>) {\n  const { classes, cx, theme } = useStyles();\n\n  return (\n    <Card\n      radius=\"md\"\n      style={{ backgroundImage: `url(${image})`, ...style }}\n      className={cx(classes.card, className)}\n      {...others}\n    >\n      <Overlay\n        gradient={`linear-gradient(105deg, ${theme.black} 20%, #312f2f 50%, ${theme.colors.gray[4]} 100%)`}\n        opacity={0.55}\n        zIndex={0}\n      />\n\n      <div className={classes.content}>\n        <Text size=\"lg\" weight={700} className={classes.title}>\n          {title}\n        </Text>\n\n        <Text size=\"sm\" className={classes.description}>\n          {description}\n        </Text>\n\n        <Button\n          className={classes.action}\n          variant=\"white\"\n          color=\"dark\"\n          component=\"a\"\n          size=\"xs\"\n          href={action.link}\n        >\n          {action.label}\n        </Button>\n      </div>\n    </Card>\n  );\n}\n","attributes":{"title":"Banner with image and action","category":"banners","author":"rtivital","dependencies":["/core/card/","/core/text/","/core/button/","/core/overlay/"],"props":{"image":"https://images.unsplash.com/photo-1596394516093-501ba68a0ba6?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80","title":"Plan & save","description":"Save up to 25% at Fifth Season Hotels in Europe, the Middle East, Africa and Asia Pacific","action":{"label":"Book now","link":"#"}},"canvas":{"center":true,"maxWidth":480}}},{"component":"ImageCard","slug":"image-card","code":"import { IconEye, IconMessageCircle } from '@tabler/icons-react';\nimport { Card, Text, Group, Center, createStyles, getStylesRef, rem } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  card: {\n    position: 'relative',\n    height: rem(280),\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n\n    [`&:hover .${getStylesRef('image')}`]: {\n      transform: 'scale(1.03)',\n    },\n  },\n\n  image: {\n    ...theme.fn.cover(),\n    ref: getStylesRef('image'),\n    backgroundSize: 'cover',\n    transition: 'transform 500ms ease',\n  },\n\n  overlay: {\n    position: 'absolute',\n    top: '20%',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    backgroundImage: 'linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, .85) 90%)',\n  },\n\n  content: {\n    height: '100%',\n    position: 'relative',\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'flex-end',\n    zIndex: 1,\n  },\n\n  title: {\n    color: theme.white,\n    marginBottom: rem(5),\n  },\n\n  bodyText: {\n    color: theme.colors.dark[2],\n    marginLeft: rem(7),\n  },\n\n  author: {\n    color: theme.colors.dark[2],\n  },\n}));\n\ninterface ImageCardProps {\n  link: string;\n  image: string;\n  title: string;\n  author: string;\n  views: number;\n  comments: number;\n}\n\nexport function ImageCard({ image, title, author, views, comments, link }: ImageCardProps) {\n  const { classes, theme } = useStyles();\n\n  return (\n    <Card\n      p=\"lg\"\n      shadow=\"lg\"\n      className={classes.card}\n      radius=\"md\"\n      component=\"a\"\n      href={link}\n      target=\"_blank\"\n    >\n      <div className={classes.image} style={{ backgroundImage: `url(${image})` }} />\n      <div className={classes.overlay} />\n\n      <div className={classes.content}>\n        <div>\n          <Text size=\"lg\" className={classes.title} weight={500}>\n            {title}\n          </Text>\n\n          <Group position=\"apart\" spacing=\"xs\">\n            <Text size=\"sm\" className={classes.author}>\n              {author}\n            </Text>\n\n            <Group spacing=\"lg\">\n              <Center>\n                <IconEye size=\"1rem\" stroke={1.5} color={theme.colors.dark[2]} />\n                <Text size=\"sm\" className={classes.bodyText}>\n                  {views}\n                </Text>\n              </Center>\n              <Center>\n                <IconMessageCircle size=\"1rem\" stroke={1.5} color={theme.colors.dark[2]} />\n                <Text size=\"sm\" className={classes.bodyText}>\n                  {comments}\n                </Text>\n              </Center>\n            </Group>\n          </Group>\n        </div>\n      </div>\n    </Card>\n  );\n}\n","attributes":{"title":"Card with image as background","category":"article-cards","author":"rtivital","dependencies":["/core/card/","/core/text/","/core/group/","/core/center","@tabler/icons-react"],"props":{"image":"https://images.unsplash.com/photo-1530122037265-a5f1f91d3b99?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=800&q=80","link":"https://mantine.dev/","title":"Journey to Swiss Alps","author":"Robert Gluesticker","views":7847,"comments":5},"canvas":{"center":true,"maxWidth":320}}},{"component":"ImageCheckboxes","slug":"image-checkboxes","code":"import {\n  UnstyledButton,\n  Checkbox,\n  Text,\n  Image,\n  SimpleGrid,\n  createStyles,\n  rem,\n} from '@mantine/core';\nimport { useUncontrolled } from '@mantine/hooks';\nimport icons from './icons';\n\nconst useStyles = createStyles((theme, { checked }: { checked: boolean }) => ({\n  button: {\n    display: 'flex',\n    alignItems: 'center',\n    width: '100%',\n    transition: 'background-color 150ms ease, border-color 150ms ease',\n    border: `${rem(1)} solid ${\n      checked\n        ? theme.fn.variant({ variant: 'outline', color: theme.primaryColor }).border\n        : theme.colorScheme === 'dark'\n        ? theme.colors.dark[8]\n        : theme.colors.gray[3]\n    }`,\n    borderRadius: theme.radius.sm,\n    padding: theme.spacing.sm,\n    backgroundColor: checked\n      ? theme.fn.variant({ variant: 'light', color: theme.primaryColor }).background\n      : theme.colorScheme === 'dark'\n      ? theme.colors.dark[8]\n      : theme.white,\n  },\n\n  body: {\n    flex: 1,\n    marginLeft: theme.spacing.md,\n  },\n}));\n\ninterface ImageCheckboxProps {\n  checked?: boolean;\n  defaultChecked?: boolean;\n  onChange?(checked: boolean): void;\n  title: string;\n  description: string;\n  image: string;\n}\n\nexport function ImageCheckbox({\n  checked,\n  defaultChecked,\n  onChange,\n  title,\n  description,\n  className,\n  image,\n  ...others\n}: ImageCheckboxProps & Omit<React.ComponentPropsWithoutRef<'button'>, keyof ImageCheckboxProps>) {\n  const [value, handleChange] = useUncontrolled({\n    value: checked,\n    defaultValue: defaultChecked,\n    finalValue: false,\n    onChange,\n  });\n\n  const { classes, cx } = useStyles({ checked: value });\n\n  return (\n    <UnstyledButton\n      {...others}\n      onClick={() => handleChange(!value)}\n      className={cx(classes.button, className)}\n    >\n      <Image src={image} alt={title} width={40} />\n\n      <div className={classes.body}>\n        <Text color=\"dimmed\" size=\"xs\" sx={{ lineHeight: 1 }} mb={5}>\n          {description}\n        </Text>\n        <Text weight={500} size=\"sm\" sx={{ lineHeight: 1 }}>\n          {title}\n        </Text>\n      </div>\n\n      <Checkbox\n        checked={value}\n        onChange={() => {}}\n        tabIndex={-1}\n        styles={{ input: { cursor: 'pointer' } }}\n      />\n    </UnstyledButton>\n  );\n}\n\nconst mockdata = [\n  { description: 'Sun and sea', title: 'Beach vacation', image: icons.sea },\n  { description: 'Sightseeing', title: 'City trips', image: icons.city },\n  { description: 'Mountains', title: 'Hiking vacation', image: icons.mountain },\n  { description: 'Snow and ice', title: 'Winter vacation', image: icons.winter },\n];\n\nexport function ImageCheckboxes() {\n  const items = mockdata.map((item) => <ImageCheckbox {...item} key={item.title} />);\n  return (\n    <SimpleGrid\n      cols={4}\n      breakpoints={[\n        { maxWidth: 'md', cols: 2 },\n        { maxWidth: 'sm', cols: 1 },\n      ]}\n    >\n      {items}\n    </SimpleGrid>\n  );\n}\n","attributes":{"title":"Checkbox with image","category":"inputs","author":"rtivital","withColor":true,"dependencies":["/core/checkbox/","/core/paper/","/core/text/","/core/image/","/core/simple-grid/","/core/button/#unstyled-button","https://icons8.com/"],"canvas":{"center":true,"maxWidth":1080}}},{"component":"InputTooltip","slug":"input-tooltip","code":"import { useState } from 'react';\nimport { TextInput, PasswordInput, Tooltip, Center, Text } from '@mantine/core';\nimport { IconInfoCircle } from '@tabler/icons-react';\n\nfunction TooltipIcon() {\n  const rightSection = (\n    <Tooltip\n      label=\"We store your data securely\"\n      position=\"top-end\"\n      withArrow\n      transitionProps={{ transition: 'pop-bottom-right' }}\n    >\n      <Text color=\"dimmed\" sx={{ cursor: 'help' }}>\n        <Center>\n          <IconInfoCircle size=\"1.1rem\" stroke={1.5} />\n        </Center>\n      </Text>\n    </Tooltip>\n  );\n\n  return (\n    <TextInput\n      rightSection={rightSection}\n      label=\"Tooltip shown on icon hover\"\n      placeholder=\"Your email\"\n    />\n  );\n}\n\nfunction TooltipFocus() {\n  const [opened, setOpened] = useState(false);\n  const [value, setValue] = useState('');\n  const valid = value.trim().length >= 6;\n  return (\n    <Tooltip\n      label={valid ? 'All good!' : 'Password must include at least 6 characters'}\n      position=\"bottom-start\"\n      withArrow\n      opened={opened}\n      color={valid ? 'teal' : undefined}\n    >\n      <PasswordInput\n        label=\"Tooltip shown onFocus\"\n        required\n        placeholder=\"Your password\"\n        onFocus={() => setOpened(true)}\n        onBlur={() => setOpened(false)}\n        mt=\"md\"\n        value={value}\n        onChange={(event) => setValue(event.currentTarget.value)}\n      />\n    </Tooltip>\n  );\n}\n\nexport function InputTooltip() {\n  return (\n    <>\n      <TooltipIcon />\n      <TooltipFocus />\n    </>\n  );\n}\n","attributes":{"title":"Inputs with tooltip","category":"inputs","author":"rtivital","dependencies":["/core/tooltip/","/core/text-input/","/core/password-input/","/core/center/","/core/text/","@tabler/icons-react"],"canvas":{"center":true,"maxWidth":420}}},{"component":"InputValidation","slug":"input-validation","code":"import { TextInput, createStyles } from '@mantine/core';\nimport { IconAlertTriangle } from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  invalid: {\n    backgroundColor:\n      theme.colorScheme === 'dark' ? theme.fn.rgba(theme.colors.red[8], 0.15) : theme.colors.red[0],\n  },\n\n  icon: {\n    color: theme.colors.red[theme.colorScheme === 'dark' ? 7 : 6],\n  },\n}));\n\nexport function InputValidation() {\n  const { classes } = useStyles();\n  return (\n    <TextInput\n      label=\"Custom validation styles\"\n      error=\"Invalid email\"\n      defaultValue=\"hello!gmail.com\"\n      classNames={{ input: classes.invalid }}\n      rightSection={<IconAlertTriangle stroke={1.5} size=\"1.1rem\" className={classes.icon} />}\n    />\n  );\n}\n","attributes":{"title":"Input with custom validation styles","category":"inputs","author":"rtivital","dependencies":["/core/text-input/"],"canvas":{"center":true,"maxWidth":420}}},{"component":"InputWithButton","slug":"input-with-button","code":"import { TextInput, TextInputProps, ActionIcon, useMantineTheme } from '@mantine/core';\nimport { IconSearch, IconArrowRight, IconArrowLeft } from '@tabler/icons-react';\n\nexport function InputWithButton(props: TextInputProps) {\n  const theme = useMantineTheme();\n\n  return (\n    <TextInput\n      icon={<IconSearch size=\"1.1rem\" stroke={1.5} />}\n      radius=\"xl\"\n      size=\"md\"\n      rightSection={\n        <ActionIcon size={32} radius=\"xl\" color={theme.primaryColor} variant=\"filled\">\n          {theme.dir === 'ltr' ? (\n            <IconArrowRight size=\"1.1rem\" stroke={1.5} />\n          ) : (\n            <IconArrowLeft size=\"1.1rem\" stroke={1.5} />\n          )}\n        </ActionIcon>\n      }\n      placeholder=\"Search questions\"\n      rightSectionWidth={42}\n      {...props}\n    />\n  );\n}\n","attributes":{"title":"Input with contained button","category":"inputs","author":"rtivital","withColor":true,"dependencies":["/core/text-input/","/core/button/","@tabler/icons-react"],"canvas":{"center":true,"maxWidth":520}}},{"component":"LanguagePicker","slug":"language-picker","code":"import { useState } from 'react';\nimport { createStyles, UnstyledButton, Menu, Image, Group, rem } from '@mantine/core';\nimport { IconChevronDown } from '@tabler/icons-react';\nimport images from './images';\n\nconst data = [\n  { label: 'English', image: images.english },\n  { label: 'German', image: images.german },\n  { label: 'Italian', image: images.italian },\n  { label: 'French', image: images.french },\n  { label: 'Polish', image: images.polish },\n];\n\nconst useStyles = createStyles((theme, { opened }: { opened: boolean }) => ({\n  control: {\n    width: rem(200),\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: `${theme.spacing.xs} ${theme.spacing.md}`,\n    borderRadius: theme.radius.md,\n    border: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[2]\n    }`,\n    transition: 'background-color 150ms ease',\n    backgroundColor:\n      theme.colorScheme === 'dark'\n        ? theme.colors.dark[opened ? 5 : 6]\n        : opened\n        ? theme.colors.gray[0]\n        : theme.white,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[0],\n    },\n  },\n\n  label: {\n    fontWeight: 500,\n    fontSize: theme.fontSizes.sm,\n  },\n\n  icon: {\n    transition: 'transform 150ms ease',\n    transform: opened ? 'rotate(180deg)' : 'rotate(0deg)',\n  },\n}));\n\nexport function LanguagePicker() {\n  const [opened, setOpened] = useState(false);\n  const { classes } = useStyles({ opened });\n  const [selected, setSelected] = useState(data[0]);\n  const items = data.map((item) => (\n    <Menu.Item\n      icon={<Image src={item.image} width={18} height={18} />}\n      onClick={() => setSelected(item)}\n      key={item.label}\n    >\n      {item.label}\n    </Menu.Item>\n  ));\n\n  return (\n    <Menu\n      onOpen={() => setOpened(true)}\n      onClose={() => setOpened(false)}\n      radius=\"md\"\n      width=\"target\"\n      withinPortal\n    >\n      <Menu.Target>\n        <UnstyledButton className={classes.control}>\n          <Group spacing=\"xs\">\n            <Image src={selected.image} width={22} height={22} />\n            <span className={classes.label}>{selected.label}</span>\n          </Group>\n          <IconChevronDown size=\"1rem\" className={classes.icon} stroke={1.5} />\n        </UnstyledButton>\n      </Menu.Target>\n      <Menu.Dropdown>{items}</Menu.Dropdown>\n    </Menu>\n  );\n}\n","attributes":{"title":"Language picker","category":"inputs","author":"rtivital","dependencies":["/core/menu/","/core/button/#unstyled-button","/core/image/","/core/group/","@tabler/icons-react","https://icons8.com/"],"canvas":{"center":true,"maxWidth":220}}},{"component":"LeadGrid","slug":"lead-grid","code":"import { Container, Grid, SimpleGrid, Skeleton, useMantineTheme, rem } from '@mantine/core';\n\nconst PRIMARY_COL_HEIGHT = rem(300);\n\nexport function LeadGrid() {\n  const theme = useMantineTheme();\n  const SECONDARY_COL_HEIGHT = `calc(${PRIMARY_COL_HEIGHT} / 2 - ${theme.spacing.md} / 2)`;\n\n  return (\n    <Container my=\"md\">\n      <SimpleGrid cols={2} spacing=\"md\" breakpoints={[{ maxWidth: 'sm', cols: 1 }]}>\n        <Skeleton height={PRIMARY_COL_HEIGHT} radius=\"md\" animate={false} />\n        <Grid gutter=\"md\">\n          <Grid.Col>\n            <Skeleton height={SECONDARY_COL_HEIGHT} radius=\"md\" animate={false} />\n          </Grid.Col>\n          <Grid.Col span={6}>\n            <Skeleton height={SECONDARY_COL_HEIGHT} radius=\"md\" animate={false} />\n          </Grid.Col>\n          <Grid.Col span={6}>\n            <Skeleton height={SECONDARY_COL_HEIGHT} radius=\"md\" animate={false} />\n          </Grid.Col>\n        </Grid>\n      </SimpleGrid>\n    </Container>\n  );\n}\n","attributes":{"title":"Grid with leading item","category":"grids","author":"rtivital","responsive":true,"dependencies":["/core/simple-grid/","/core/grid/","/core/skeleton/","/core/container/"],"canvas":{"center":false}}},{"component":"NavbarLinksGroup","slug":"navbar-links-group","code":"import { useState } from 'react';\nimport {\n  Group,\n  Box,\n  Collapse,\n  ThemeIcon,\n  Text,\n  UnstyledButton,\n  createStyles,\n  rem,\n} from '@mantine/core';\nimport { IconCalendarStats, IconChevronLeft, IconChevronRight } from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  control: {\n    fontWeight: 500,\n    display: 'block',\n    width: '100%',\n    padding: `${theme.spacing.xs} ${theme.spacing.md}`,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.black,\n    fontSize: theme.fontSizes.sm,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[0],\n      color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    },\n  },\n\n  link: {\n    fontWeight: 500,\n    display: 'block',\n    textDecoration: 'none',\n    padding: `${theme.spacing.xs} ${theme.spacing.md}`,\n    paddingLeft: rem(31),\n    marginLeft: rem(30),\n    fontSize: theme.fontSizes.sm,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n    borderLeft: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n    }`,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[0],\n      color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    },\n  },\n\n  chevron: {\n    transition: 'transform 200ms ease',\n  },\n}));\n\ninterface LinksGroupProps {\n  icon: React.FC<any>;\n  label: string;\n  initiallyOpened?: boolean;\n  links?: { label: string; link: string }[];\n}\n\nexport function LinksGroup({ icon: Icon, label, initiallyOpened, links }: LinksGroupProps) {\n  const { classes, theme } = useStyles();\n  const hasLinks = Array.isArray(links);\n  const [opened, setOpened] = useState(initiallyOpened || false);\n  const ChevronIcon = theme.dir === 'ltr' ? IconChevronRight : IconChevronLeft;\n  const items = (hasLinks ? links : []).map((link) => (\n    <Text<'a'>\n      component=\"a\"\n      className={classes.link}\n      href={link.link}\n      key={link.label}\n      onClick={(event) => event.preventDefault()}\n    >\n      {link.label}\n    </Text>\n  ));\n\n  return (\n    <>\n      <UnstyledButton onClick={() => setOpened((o) => !o)} className={classes.control}>\n        <Group position=\"apart\" spacing={0}>\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\n            <ThemeIcon variant=\"light\" size={30}>\n              <Icon size=\"1.1rem\" />\n            </ThemeIcon>\n            <Box ml=\"md\">{label}</Box>\n          </Box>\n          {hasLinks && (\n            <ChevronIcon\n              className={classes.chevron}\n              size=\"1rem\"\n              stroke={1.5}\n              style={{\n                transform: opened ? `rotate(${theme.dir === 'rtl' ? -90 : 90}deg)` : 'none',\n              }}\n            />\n          )}\n        </Group>\n      </UnstyledButton>\n      {hasLinks ? <Collapse in={opened}>{items}</Collapse> : null}\n    </>\n  );\n}\n\nconst mockdata = {\n  label: 'Releases',\n  icon: IconCalendarStats,\n  links: [\n    { label: 'Upcoming releases', link: '/' },\n    { label: 'Previous releases', link: '/' },\n    { label: 'Releases schedule', link: '/' },\n  ],\n};\n\nexport function NavbarLinksGroup() {\n  return (\n    <Box\n      sx={(theme) => ({\n        minHeight: rem(220),\n        padding: theme.spacing.md,\n        backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.white,\n      })}\n    >\n      <LinksGroup {...mockdata} />\n    </Box>\n  );\n}\n","attributes":{"title":"Collapsible links group","category":"navbars","author":"rtivital","withColor":true,"dependencies":["/core/text/","/core/box/","/core/collapse/","/core/theme-icon/","/core/button/#unstyled-button","@tabler/icons-react"],"canvas":{"center":true,"maxWidth":320}}},{"component":"NavbarMinimal","slug":"navbar-minimal","code":"import { useState } from 'react';\nimport { Navbar, Center, Tooltip, UnstyledButton, createStyles, Stack, rem } from '@mantine/core';\nimport {\n  IconHome2,\n  IconGauge,\n  IconDeviceDesktopAnalytics,\n  IconFingerprint,\n  IconCalendarStats,\n  IconUser,\n  IconSettings,\n  IconLogout,\n  IconSwitchHorizontal,\n} from '@tabler/icons-react';\nimport { MantineLogo } from '@mantine/ds';\n\nconst useStyles = createStyles((theme) => ({\n  link: {\n    width: rem(50),\n    height: rem(50),\n    borderRadius: theme.radius.md,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.colors.gray[0],\n    },\n  },\n\n  active: {\n    '&, &:hover': {\n      backgroundColor: theme.fn.variant({ variant: 'light', color: theme.primaryColor }).background,\n      color: theme.fn.variant({ variant: 'light', color: theme.primaryColor }).color,\n    },\n  },\n}));\n\ninterface NavbarLinkProps {\n  icon: React.FC<any>;\n  label: string;\n  active?: boolean;\n  onClick?(): void;\n}\n\nfunction NavbarLink({ icon: Icon, label, active, onClick }: NavbarLinkProps) {\n  const { classes, cx } = useStyles();\n  return (\n    <Tooltip label={label} position=\"right\" transitionProps={{ duration: 0 }}>\n      <UnstyledButton onClick={onClick} className={cx(classes.link, { [classes.active]: active })}>\n        <Icon size=\"1.2rem\" stroke={1.5} />\n      </UnstyledButton>\n    </Tooltip>\n  );\n}\n\nconst mockdata = [\n  { icon: IconHome2, label: 'Home' },\n  { icon: IconGauge, label: 'Dashboard' },\n  { icon: IconDeviceDesktopAnalytics, label: 'Analytics' },\n  { icon: IconCalendarStats, label: 'Releases' },\n  { icon: IconUser, label: 'Account' },\n  { icon: IconFingerprint, label: 'Security' },\n  { icon: IconSettings, label: 'Settings' },\n];\n\nexport function NavbarMinimal() {\n  const [active, setActive] = useState(2);\n\n  const links = mockdata.map((link, index) => (\n    <NavbarLink\n      {...link}\n      key={link.label}\n      active={index === active}\n      onClick={() => setActive(index)}\n    />\n  ));\n\n  return (\n    <Navbar height={750} width={{ base: 80 }} p=\"md\">\n      <Center>\n        <MantineLogo type=\"mark\" size={30} />\n      </Center>\n      <Navbar.Section grow mt={50}>\n        <Stack justify=\"center\" spacing={0}>\n          {links}\n        </Stack>\n      </Navbar.Section>\n      <Navbar.Section>\n        <Stack justify=\"center\" spacing={0}>\n          <NavbarLink icon={IconSwitchHorizontal} label=\"Change account\" />\n          <NavbarLink icon={IconLogout} label=\"Logout\" />\n        </Stack>\n      </Navbar.Section>\n    </Navbar>\n  );\n}\n","attributes":{"title":"Navbar with tooltips","category":"navbars","author":"rtivital","withColor":true,"dependencies":["/core/app-shell/","/core/button/#unstyled-button","/core/group/","/core/tooltip/","/core/image/"],"canvas":{"center":false}}},{"component":"NavbarMinimalColored","slug":"navbar-minimal-colored","code":"import { useState } from 'react';\nimport { Navbar, Center, Tooltip, UnstyledButton, createStyles, Stack, rem } from '@mantine/core';\nimport {\n  IconHome2,\n  IconGauge,\n  IconDeviceDesktopAnalytics,\n  IconFingerprint,\n  IconCalendarStats,\n  IconUser,\n  IconSettings,\n  IconLogout,\n  IconSwitchHorizontal,\n} from '@tabler/icons-react';\nimport { MantineLogo } from '@mantine/ds';\n\nconst useStyles = createStyles((theme) => ({\n  link: {\n    width: rem(50),\n    height: rem(50),\n    borderRadius: theme.radius.md,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    color: theme.white,\n    opacity: 0.85,\n\n    '&:hover': {\n      opacity: 1,\n      backgroundColor: theme.fn.lighten(\n        theme.fn.variant({ variant: 'filled', color: theme.primaryColor }).background!,\n        0.1\n      ),\n    },\n  },\n\n  active: {\n    opacity: 1,\n    '&, &:hover': {\n      backgroundColor: theme.fn.lighten(\n        theme.fn.variant({ variant: 'filled', color: theme.primaryColor }).background!,\n        0.15\n      ),\n    },\n  },\n}));\n\ninterface NavbarLinkProps {\n  icon: React.FC<any>;\n  label: string;\n  active?: boolean;\n  onClick?(): void;\n}\n\nfunction NavbarLink({ icon: Icon, label, active, onClick }: NavbarLinkProps) {\n  const { classes, cx } = useStyles();\n  return (\n    <Tooltip label={label} position=\"right\" transitionProps={{ duration: 0 }}>\n      <UnstyledButton onClick={onClick} className={cx(classes.link, { [classes.active]: active })}>\n        <Icon size=\"1.2rem\" stroke={1.5} />\n      </UnstyledButton>\n    </Tooltip>\n  );\n}\n\nconst mockdata = [\n  { icon: IconHome2, label: 'Home' },\n  { icon: IconGauge, label: 'Dashboard' },\n  { icon: IconDeviceDesktopAnalytics, label: 'Analytics' },\n  { icon: IconCalendarStats, label: 'Releases' },\n  { icon: IconUser, label: 'Account' },\n  { icon: IconFingerprint, label: 'Security' },\n  { icon: IconSettings, label: 'Settings' },\n];\n\nexport function NavbarMinimalColored() {\n  const [active, setActive] = useState(2);\n\n  const links = mockdata.map((link, index) => (\n    <NavbarLink\n      {...link}\n      key={link.label}\n      active={index === active}\n      onClick={() => setActive(index)}\n    />\n  ));\n\n  return (\n    <Navbar\n      height={750}\n      width={{ base: 80 }}\n      p=\"md\"\n      sx={(theme) => ({\n        backgroundColor: theme.fn.variant({ variant: 'filled', color: theme.primaryColor })\n          .background,\n      })}\n    >\n      <Center>\n        <MantineLogo type=\"mark\" inverted size={30} />\n      </Center>\n      <Navbar.Section grow mt={50}>\n        <Stack justify=\"center\" spacing={0}>\n          {links}\n        </Stack>\n      </Navbar.Section>\n      <Navbar.Section>\n        <Stack justify=\"center\" spacing={0}>\n          <NavbarLink icon={IconSwitchHorizontal} label=\"Change account\" />\n          <NavbarLink icon={IconLogout} label=\"Logout\" />\n        </Stack>\n      </Navbar.Section>\n    </Navbar>\n  );\n}\n","attributes":{"title":"Navbar with tooltips","category":"navbars","author":"rtivital","withColor":true,"dependencies":["/core/app-shell/","/core/button/#unstyled-button","/core/group/","/core/tooltip/","/core/image/"],"canvas":{"center":false}}},{"component":"NavbarNested","slug":"navbar-nested","code":"import { Navbar, Group, Code, ScrollArea, createStyles, rem } from '@mantine/core';\nimport {\n  IconNotes,\n  IconCalendarStats,\n  IconGauge,\n  IconPresentationAnalytics,\n  IconFileAnalytics,\n  IconAdjustments,\n  IconLock,\n} from '@tabler/icons-react';\nimport { UserButton } from '../UserButton/UserButton';\nimport { LinksGroup } from '../NavbarLinksGroup/NavbarLinksGroup';\nimport { Logo } from './Logo';\n\nconst mockdata = [\n  { label: 'Dashboard', icon: IconGauge },\n  {\n    label: 'Market news',\n    icon: IconNotes,\n    initiallyOpened: true,\n    links: [\n      { label: 'Overview', link: '/' },\n      { label: 'Forecasts', link: '/' },\n      { label: 'Outlook', link: '/' },\n      { label: 'Real time', link: '/' },\n    ],\n  },\n  {\n    label: 'Releases',\n    icon: IconCalendarStats,\n    links: [\n      { label: 'Upcoming releases', link: '/' },\n      { label: 'Previous releases', link: '/' },\n      { label: 'Releases schedule', link: '/' },\n    ],\n  },\n  { label: 'Analytics', icon: IconPresentationAnalytics },\n  { label: 'Contracts', icon: IconFileAnalytics },\n  { label: 'Settings', icon: IconAdjustments },\n  {\n    label: 'Security',\n    icon: IconLock,\n    links: [\n      { label: 'Enable 2FA', link: '/' },\n      { label: 'Change password', link: '/' },\n      { label: 'Recovery codes', link: '/' },\n    ],\n  },\n];\n\nconst useStyles = createStyles((theme) => ({\n  navbar: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.white,\n    paddingBottom: 0,\n  },\n\n  header: {\n    padding: theme.spacing.md,\n    paddingTop: 0,\n    marginLeft: `calc(${theme.spacing.md} * -1)`,\n    marginRight: `calc(${theme.spacing.md} * -1)`,\n    color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    borderBottom: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n    }`,\n  },\n\n  links: {\n    marginLeft: `calc(${theme.spacing.md} * -1)`,\n    marginRight: `calc(${theme.spacing.md} * -1)`,\n  },\n\n  linksInner: {\n    paddingTop: theme.spacing.xl,\n    paddingBottom: theme.spacing.xl,\n  },\n\n  footer: {\n    marginLeft: `calc(${theme.spacing.md} * -1)`,\n    marginRight: `calc(${theme.spacing.md} * -1)`,\n    borderTop: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n    }`,\n  },\n}));\n\nexport function NavbarNested() {\n  const { classes } = useStyles();\n  const links = mockdata.map((item) => <LinksGroup {...item} key={item.label} />);\n\n  return (\n    <Navbar height={800} width={{ sm: 300 }} p=\"md\" className={classes.navbar}>\n      <Navbar.Section className={classes.header}>\n        <Group position=\"apart\">\n          <Logo width={rem(120)} />\n          <Code sx={{ fontWeight: 700 }}>v3.1.2</Code>\n        </Group>\n      </Navbar.Section>\n\n      <Navbar.Section grow className={classes.links} component={ScrollArea}>\n        <div className={classes.linksInner}>{links}</div>\n      </Navbar.Section>\n\n      <Navbar.Section className={classes.footer}>\n        <UserButton\n          image=\"https://images.unsplash.com/photo-1508214751196-bcfd4ca60f91?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=255&q=80\"\n          name=\"Ann Nullpointer\"\n          email=\"anullpointer@yahoo.com\"\n        />\n      </Navbar.Section>\n    </Navbar>\n  );\n}\n","attributes":{"title":"Navbar with nested links","category":"navbars","author":"rtivital","withColor":true,"dependencies":["/core/app-shell/","/core/group/","/core/code/","/core/scroll-area/","/core/button/#unstyled-button","/component/user-button/","/component/navbar-links-group/","@tabler/icons-react"],"canvas":{"center":false}}},{"component":"NavbarSearch","slug":"navbar-search","code":"import {\n  createStyles,\n  Navbar,\n  TextInput,\n  Code,\n  UnstyledButton,\n  Badge,\n  Text,\n  Group,\n  ActionIcon,\n  Tooltip,\n  rem,\n} from '@mantine/core';\nimport {\n  IconBulb,\n  IconUser,\n  IconCheckbox,\n  IconSearch,\n  IconPlus,\n  IconSelector,\n} from '@tabler/icons-react';\nimport { UserButton } from '../UserButton/UserButton';\n\nconst useStyles = createStyles((theme) => ({\n  navbar: {\n    paddingTop: 0,\n  },\n\n  section: {\n    marginLeft: `calc(${theme.spacing.md} * -1)`,\n    marginRight: `calc(${theme.spacing.md} * -1)`,\n    marginBottom: theme.spacing.md,\n\n    '&:not(:last-of-type)': {\n      borderBottom: `${rem(1)} solid ${\n        theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n      }`,\n    },\n  },\n\n  searchCode: {\n    fontWeight: 700,\n    fontSize: rem(10),\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[0],\n    border: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.colors.gray[2]\n    }`,\n  },\n\n  mainLinks: {\n    paddingLeft: `calc(${theme.spacing.md} - ${theme.spacing.xs})`,\n    paddingRight: `calc(${theme.spacing.md} - ${theme.spacing.xs})`,\n    paddingBottom: theme.spacing.md,\n  },\n\n  mainLink: {\n    display: 'flex',\n    alignItems: 'center',\n    width: '100%',\n    fontSize: theme.fontSizes.xs,\n    padding: `${rem(8)} ${theme.spacing.xs}`,\n    borderRadius: theme.radius.sm,\n    fontWeight: 500,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n      color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    },\n  },\n\n  mainLinkInner: {\n    display: 'flex',\n    alignItems: 'center',\n    flex: 1,\n  },\n\n  mainLinkIcon: {\n    marginRight: theme.spacing.sm,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[2] : theme.colors.gray[6],\n  },\n\n  mainLinkBadge: {\n    padding: 0,\n    width: rem(20),\n    height: rem(20),\n    pointerEvents: 'none',\n  },\n\n  collections: {\n    paddingLeft: `calc(${theme.spacing.md} - ${rem(6)})`,\n    paddingRight: `calc(${theme.spacing.md} - ${rem(6)})`,\n    paddingBottom: theme.spacing.md,\n  },\n\n  collectionsHeader: {\n    paddingLeft: `calc(${theme.spacing.md} + ${rem(2)})`,\n    paddingRight: theme.spacing.md,\n    marginBottom: rem(5),\n  },\n\n  collectionLink: {\n    display: 'block',\n    padding: `${rem(8)} ${theme.spacing.xs}`,\n    textDecoration: 'none',\n    borderRadius: theme.radius.sm,\n    fontSize: theme.fontSizes.xs,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.colors.gray[7],\n    lineHeight: 1,\n    fontWeight: 500,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n      color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n    },\n  },\n}));\n\nconst links = [\n  { icon: IconBulb, label: 'Activity', notifications: 3 },\n  { icon: IconCheckbox, label: 'Tasks', notifications: 4 },\n  { icon: IconUser, label: 'Contacts' },\n];\n\nconst collections = [\n  { emoji: '👍', label: 'Sales' },\n  { emoji: '🚚', label: 'Deliveries' },\n  { emoji: '💸', label: 'Discounts' },\n  { emoji: '💰', label: 'Profits' },\n  { emoji: '✨', label: 'Reports' },\n  { emoji: '🛒', label: 'Orders' },\n  { emoji: '📅', label: 'Events' },\n  { emoji: '🙈', label: 'Debts' },\n  { emoji: '💁‍♀️', label: 'Customers' },\n];\n\nexport function NavbarSearch() {\n  const { classes } = useStyles();\n\n  const mainLinks = links.map((link) => (\n    <UnstyledButton key={link.label} className={classes.mainLink}>\n      <div className={classes.mainLinkInner}>\n        <link.icon size={20} className={classes.mainLinkIcon} stroke={1.5} />\n        <span>{link.label}</span>\n      </div>\n      {link.notifications && (\n        <Badge size=\"sm\" variant=\"filled\" className={classes.mainLinkBadge}>\n          {link.notifications}\n        </Badge>\n      )}\n    </UnstyledButton>\n  ));\n\n  const collectionLinks = collections.map((collection) => (\n    <a\n      href=\"/\"\n      onClick={(event) => event.preventDefault()}\n      key={collection.label}\n      className={classes.collectionLink}\n    >\n      <span style={{ marginRight: rem(9), fontSize: rem(16) }}>{collection.emoji}</span>{' '}\n      {collection.label}\n    </a>\n  ));\n\n  return (\n    <Navbar height={700} width={{ sm: 300 }} p=\"md\" className={classes.navbar}>\n      <Navbar.Section className={classes.section}>\n        <UserButton\n          image=\"https://i.imgur.com/fGxgcDF.png\"\n          name=\"Bob Rulebreaker\"\n          email=\"Product owner\"\n          icon={<IconSelector size=\"0.9rem\" stroke={1.5} />}\n        />\n      </Navbar.Section>\n\n      <TextInput\n        placeholder=\"Search\"\n        size=\"xs\"\n        icon={<IconSearch size=\"0.8rem\" stroke={1.5} />}\n        rightSectionWidth={70}\n        rightSection={<Code className={classes.searchCode}>Ctrl + K</Code>}\n        styles={{ rightSection: { pointerEvents: 'none' } }}\n        mb=\"sm\"\n      />\n\n      <Navbar.Section className={classes.section}>\n        <div className={classes.mainLinks}>{mainLinks}</div>\n      </Navbar.Section>\n\n      <Navbar.Section className={classes.section}>\n        <Group className={classes.collectionsHeader} position=\"apart\">\n          <Text size=\"xs\" weight={500} color=\"dimmed\">\n            Collections\n          </Text>\n          <Tooltip label=\"Create collection\" withArrow position=\"right\">\n            <ActionIcon variant=\"default\" size={18}>\n              <IconPlus size=\"0.8rem\" stroke={1.5} />\n            </ActionIcon>\n          </Tooltip>\n        </Group>\n        <div className={classes.collections}>{collectionLinks}</div>\n      </Navbar.Section>\n    </Navbar>\n  );\n}\n","attributes":{"title":"Navbar with search","category":"navbars","author":"rtivital","withColor":true,"dependencies":["/core/app-shell/","/core/badge/","/core/text-input","/core/text/","/core/group/","/core/action-icon/","/core/tooltip/","@tabler/icons-react"],"canvas":{"center":false}}},{"component":"NavbarSegmented","slug":"navbar-segmented","code":"import { useState } from 'react';\nimport { Navbar, SegmentedControl, Text, createStyles, getStylesRef, rem } from '@mantine/core';\nimport {\n  IconShoppingCart,\n  IconLicense,\n  IconMessage2,\n  IconBellRinging,\n  IconMessages,\n  IconFingerprint,\n  IconKey,\n  IconSettings,\n  Icon2fa,\n  IconUsers,\n  IconFileAnalytics,\n  IconDatabaseImport,\n  IconReceipt2,\n  IconReceiptRefund,\n  IconLogout,\n  IconSwitchHorizontal,\n} from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  navbar: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n  },\n\n  title: {\n    textTransform: 'uppercase',\n    letterSpacing: rem(-0.25),\n  },\n\n  link: {\n    ...theme.fn.focusStyles(),\n    display: 'flex',\n    alignItems: 'center',\n    textDecoration: 'none',\n    fontSize: theme.fontSizes.sm,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[1] : theme.colors.gray[7],\n    padding: `${theme.spacing.xs} ${theme.spacing.sm}`,\n    borderRadius: theme.radius.sm,\n    fontWeight: 500,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n      color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n\n      [`& .${getStylesRef('icon')}`]: {\n        color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n      },\n    },\n  },\n\n  linkIcon: {\n    ref: getStylesRef('icon'),\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[2] : theme.colors.gray[6],\n    marginRight: theme.spacing.sm,\n  },\n\n  linkActive: {\n    '&, &:hover': {\n      backgroundColor: theme.fn.variant({ variant: 'light', color: theme.primaryColor }).background,\n      color: theme.fn.variant({ variant: 'light', color: theme.primaryColor }).color,\n      [`& .${getStylesRef('icon')}`]: {\n        color: theme.fn.variant({ variant: 'light', color: theme.primaryColor }).color,\n      },\n    },\n  },\n\n  footer: {\n    borderTop: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n    }`,\n    paddingTop: theme.spacing.md,\n  },\n}));\n\nconst tabs = {\n  account: [\n    { link: '', label: 'Notifications', icon: IconBellRinging },\n    { link: '', label: 'Billing', icon: IconReceipt2 },\n    { link: '', label: 'Security', icon: IconFingerprint },\n    { link: '', label: 'SSH Keys', icon: IconKey },\n    { link: '', label: 'Databases', icon: IconDatabaseImport },\n    { link: '', label: 'Authentication', icon: Icon2fa },\n    { link: '', label: 'Other Settings', icon: IconSettings },\n  ],\n  general: [\n    { link: '', label: 'Orders', icon: IconShoppingCart },\n    { link: '', label: 'Receipts', icon: IconLicense },\n    { link: '', label: 'Reviews', icon: IconMessage2 },\n    { link: '', label: 'Messages', icon: IconMessages },\n    { link: '', label: 'Customers', icon: IconUsers },\n    { link: '', label: 'Refunds', icon: IconReceiptRefund },\n    { link: '', label: 'Files', icon: IconFileAnalytics },\n  ],\n};\n\nexport function NavbarSegmented() {\n  const { classes, cx } = useStyles();\n  const [section, setSection] = useState<'account' | 'general'>('account');\n  const [active, setActive] = useState('Billing');\n\n  const links = tabs[section].map((item) => (\n    <a\n      className={cx(classes.link, { [classes.linkActive]: item.label === active })}\n      href={item.link}\n      key={item.label}\n      onClick={(event) => {\n        event.preventDefault();\n        setActive(item.label);\n      }}\n    >\n      <item.icon className={classes.linkIcon} stroke={1.5} />\n      <span>{item.label}</span>\n    </a>\n  ));\n\n  return (\n    <Navbar height={840} width={{ sm: 300 }} p=\"md\" className={classes.navbar}>\n      <Navbar.Section>\n        <Text weight={500} size=\"sm\" className={classes.title} color=\"dimmed\" mb=\"xs\">\n          bgluesticker@mantine.dev\n        </Text>\n\n        <SegmentedControl\n          value={section}\n          onChange={(value: 'account' | 'general') => setSection(value)}\n          transitionTimingFunction=\"ease\"\n          fullWidth\n          data={[\n            { label: 'Account', value: 'account' },\n            { label: 'System', value: 'general' },\n          ]}\n        />\n      </Navbar.Section>\n\n      <Navbar.Section grow mt=\"xl\">\n        {links}\n      </Navbar.Section>\n\n      <Navbar.Section className={classes.footer}>\n        <a href=\"#\" className={classes.link} onClick={(event) => event.preventDefault()}>\n          <IconSwitchHorizontal className={classes.linkIcon} stroke={1.5} />\n          <span>Change account</span>\n        </a>\n\n        <a href=\"#\" className={classes.link} onClick={(event) => event.preventDefault()}>\n          <IconLogout className={classes.linkIcon} stroke={1.5} />\n          <span>Logout</span>\n        </a>\n      </Navbar.Section>\n    </Navbar>\n  );\n}\n","attributes":{"title":"Navbar with SegmentedControl","category":"navbars","author":"rtivital","withColor":true,"dependencies":["/core/app-shell/","/core/segmented-control/","/core/text/","@tabler/icons-react"],"canvas":{"center":false}}},{"component":"NavbarSimple","slug":"navbar-simple","code":"import { useState } from 'react';\nimport { createStyles, Navbar, Group, Code, getStylesRef, rem } from '@mantine/core';\nimport {\n  IconBellRinging,\n  IconFingerprint,\n  IconKey,\n  IconSettings,\n  Icon2fa,\n  IconDatabaseImport,\n  IconReceipt2,\n  IconSwitchHorizontal,\n  IconLogout,\n} from '@tabler/icons-react';\nimport { MantineLogo } from '@mantine/ds';\n\nconst useStyles = createStyles((theme) => ({\n  header: {\n    paddingBottom: theme.spacing.md,\n    marginBottom: `calc(${theme.spacing.md} * 1.5)`,\n    borderBottom: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[2]\n    }`,\n  },\n\n  footer: {\n    paddingTop: theme.spacing.md,\n    marginTop: theme.spacing.md,\n    borderTop: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[2]\n    }`,\n  },\n\n  link: {\n    ...theme.fn.focusStyles(),\n    display: 'flex',\n    alignItems: 'center',\n    textDecoration: 'none',\n    fontSize: theme.fontSizes.sm,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[1] : theme.colors.gray[7],\n    padding: `${theme.spacing.xs} ${theme.spacing.sm}`,\n    borderRadius: theme.radius.sm,\n    fontWeight: 500,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n      color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n\n      [`& .${getStylesRef('icon')}`]: {\n        color: theme.colorScheme === 'dark' ? theme.white : theme.black,\n      },\n    },\n  },\n\n  linkIcon: {\n    ref: getStylesRef('icon'),\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[2] : theme.colors.gray[6],\n    marginRight: theme.spacing.sm,\n  },\n\n  linkActive: {\n    '&, &:hover': {\n      backgroundColor: theme.fn.variant({ variant: 'light', color: theme.primaryColor }).background,\n      color: theme.fn.variant({ variant: 'light', color: theme.primaryColor }).color,\n      [`& .${getStylesRef('icon')}`]: {\n        color: theme.fn.variant({ variant: 'light', color: theme.primaryColor }).color,\n      },\n    },\n  },\n}));\n\nconst data = [\n  { link: '', label: 'Notifications', icon: IconBellRinging },\n  { link: '', label: 'Billing', icon: IconReceipt2 },\n  { link: '', label: 'Security', icon: IconFingerprint },\n  { link: '', label: 'SSH Keys', icon: IconKey },\n  { link: '', label: 'Databases', icon: IconDatabaseImport },\n  { link: '', label: 'Authentication', icon: Icon2fa },\n  { link: '', label: 'Other Settings', icon: IconSettings },\n];\n\nexport function NavbarSimple() {\n  const { classes, cx } = useStyles();\n  const [active, setActive] = useState('Billing');\n\n  const links = data.map((item) => (\n    <a\n      className={cx(classes.link, { [classes.linkActive]: item.label === active })}\n      href={item.link}\n      key={item.label}\n      onClick={(event) => {\n        event.preventDefault();\n        setActive(item.label);\n      }}\n    >\n      <item.icon className={classes.linkIcon} stroke={1.5} />\n      <span>{item.label}</span>\n    </a>\n  ));\n\n  return (\n    <Navbar height={700} width={{ sm: 300 }} p=\"md\">\n      <Navbar.Section grow>\n        <Group className={classes.header} position=\"apart\">\n          <MantineLogo size={28} />\n          <Code sx={{ fontWeight: 700 }}>v3.1.2</Code>\n        </Group>\n        {links}\n      </Navbar.Section>\n\n      <Navbar.Section className={classes.footer}>\n        <a href=\"#\" className={classes.link} onClick={(event) => event.preventDefault()}>\n          <IconSwitchHorizontal className={classes.linkIcon} stroke={1.5} />\n          <span>Change account</span>\n        </a>\n\n        <a href=\"#\" className={classes.link} onClick={(event) => event.preventDefault()}>\n          <IconLogout className={classes.linkIcon} stroke={1.5} />\n          <span>Logout</span>\n        </a>\n      </Navbar.Section>\n    </Navbar>\n  );\n}\n","attributes":{"title":"Simple navbar","category":"navbars","author":"rtivital","withColor":true,"dependencies":["/core/app-shell/","/core/group/","/core/code/","@tabler/icons-react"],"canvas":{"center":false}}},{"component":"NavbarSimpleColored","slug":"navbar-simple-colored","code":"import { useState } from 'react';\nimport { createStyles, Navbar, Group, Code, getStylesRef, rem } from '@mantine/core';\nimport {\n  IconBellRinging,\n  IconFingerprint,\n  IconKey,\n  IconSettings,\n  Icon2fa,\n  IconDatabaseImport,\n  IconReceipt2,\n  IconSwitchHorizontal,\n  IconLogout,\n} from '@tabler/icons-react';\nimport { MantineLogo } from '@mantine/ds';\n\nconst useStyles = createStyles((theme) => ({\n  navbar: {\n    backgroundColor: theme.fn.variant({ variant: 'filled', color: theme.primaryColor }).background,\n  },\n\n  version: {\n    backgroundColor: theme.fn.lighten(\n      theme.fn.variant({ variant: 'filled', color: theme.primaryColor }).background!,\n      0.1\n    ),\n    color: theme.white,\n    fontWeight: 700,\n  },\n\n  header: {\n    paddingBottom: theme.spacing.md,\n    marginBottom: `calc(${theme.spacing.md} * 1.5)`,\n    borderBottom: `${rem(1)} solid ${theme.fn.lighten(\n      theme.fn.variant({ variant: 'filled', color: theme.primaryColor }).background!,\n      0.1\n    )}`,\n  },\n\n  footer: {\n    paddingTop: theme.spacing.md,\n    marginTop: theme.spacing.md,\n    borderTop: `${rem(1)} solid ${theme.fn.lighten(\n      theme.fn.variant({ variant: 'filled', color: theme.primaryColor }).background!,\n      0.1\n    )}`,\n  },\n\n  link: {\n    ...theme.fn.focusStyles(),\n    display: 'flex',\n    alignItems: 'center',\n    textDecoration: 'none',\n    fontSize: theme.fontSizes.sm,\n    color: theme.white,\n    padding: `${theme.spacing.xs} ${theme.spacing.sm}`,\n    borderRadius: theme.radius.sm,\n    fontWeight: 500,\n\n    '&:hover': {\n      backgroundColor: theme.fn.lighten(\n        theme.fn.variant({ variant: 'filled', color: theme.primaryColor }).background!,\n        0.1\n      ),\n    },\n  },\n\n  linkIcon: {\n    ref: getStylesRef('icon'),\n    color: theme.white,\n    opacity: 0.75,\n    marginRight: theme.spacing.sm,\n  },\n\n  linkActive: {\n    '&, &:hover': {\n      backgroundColor: theme.fn.lighten(\n        theme.fn.variant({ variant: 'filled', color: theme.primaryColor }).background!,\n        0.15\n      ),\n      [`& .${getStylesRef('icon')}`]: {\n        opacity: 0.9,\n      },\n    },\n  },\n}));\n\nconst data = [\n  { link: '', label: 'Notifications', icon: IconBellRinging },\n  { link: '', label: 'Billing', icon: IconReceipt2 },\n  { link: '', label: 'Security', icon: IconFingerprint },\n  { link: '', label: 'SSH Keys', icon: IconKey },\n  { link: '', label: 'Databases', icon: IconDatabaseImport },\n  { link: '', label: 'Authentication', icon: Icon2fa },\n  { link: '', label: 'Other Settings', icon: IconSettings },\n];\n\nexport function NavbarSimpleColored() {\n  const { classes, cx } = useStyles();\n  const [active, setActive] = useState('Billing');\n\n  const links = data.map((item) => (\n    <a\n      className={cx(classes.link, { [classes.linkActive]: item.label === active })}\n      href={item.link}\n      key={item.label}\n      onClick={(event) => {\n        event.preventDefault();\n        setActive(item.label);\n      }}\n    >\n      <item.icon className={classes.linkIcon} stroke={1.5} />\n      <span>{item.label}</span>\n    </a>\n  ));\n\n  return (\n    <Navbar height={700} width={{ sm: 300 }} p=\"md\" className={classes.navbar}>\n      <Navbar.Section grow>\n        <Group className={classes.header} position=\"apart\">\n          <MantineLogo size={28} inverted />\n          <Code className={classes.version}>v3.1.2</Code>\n        </Group>\n        {links}\n      </Navbar.Section>\n\n      <Navbar.Section className={classes.footer}>\n        <a href=\"#\" className={classes.link} onClick={(event) => event.preventDefault()}>\n          <IconSwitchHorizontal className={classes.linkIcon} stroke={1.5} />\n          <span>Change account</span>\n        </a>\n\n        <a href=\"#\" className={classes.link} onClick={(event) => event.preventDefault()}>\n          <IconLogout className={classes.linkIcon} stroke={1.5} />\n          <span>Logout</span>\n        </a>\n      </Navbar.Section>\n    </Navbar>\n  );\n}\n","attributes":{"title":"Simple navbar","category":"navbars","author":"rtivital","withColor":true,"dependencies":["/core/app-shell/","/core/group/","/core/code/","@tabler/icons-react"],"canvas":{"center":false}}},{"component":"NotFoundImage","slug":"not-found-image","code":"import {\n  createStyles,\n  Image,\n  Container,\n  Title,\n  Text,\n  Button,\n  SimpleGrid,\n  rem,\n} from '@mantine/core';\nimport image from './image.svg';\n\nconst useStyles = createStyles((theme) => ({\n  root: {\n    paddingTop: rem(80),\n    paddingBottom: rem(80),\n  },\n\n  title: {\n    fontWeight: 900,\n    fontSize: rem(34),\n    marginBottom: theme.spacing.md,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n\n    [theme.fn.smallerThan('sm')]: {\n      fontSize: rem(32),\n    },\n  },\n\n  control: {\n    [theme.fn.smallerThan('sm')]: {\n      width: '100%',\n    },\n  },\n\n  mobileImage: {\n    [theme.fn.largerThan('sm')]: {\n      display: 'none',\n    },\n  },\n\n  desktopImage: {\n    [theme.fn.smallerThan('sm')]: {\n      display: 'none',\n    },\n  },\n}));\n\nexport function NotFoundImage() {\n  const { classes } = useStyles();\n\n  return (\n    <Container className={classes.root}>\n      <SimpleGrid spacing={80} cols={2} breakpoints={[{ maxWidth: 'sm', cols: 1, spacing: 40 }]}>\n        <Image src={image.src} className={classes.mobileImage} />\n        <div>\n          <Title className={classes.title}>Something is not right...</Title>\n          <Text color=\"dimmed\" size=\"lg\">\n            Page you are trying to open does not exist. You may have mistyped the address, or the\n            page has been moved to another URL. If you think this is an error contact support.\n          </Text>\n          <Button variant=\"outline\" size=\"md\" mt=\"xl\" className={classes.control}>\n            Get back to home page\n          </Button>\n        </div>\n        <Image src={image.src} className={classes.desktopImage} />\n      </SimpleGrid>\n    </Container>\n  );\n}\n","attributes":{"title":"404 page with image","category":"error-pages","author":"rtivital","withColor":true,"responsive":true,"dependencies":["/core/image/","/core/simple-grid/","/core/text/","/core/title/","/core/container/","/core/button/"],"canvas":{"center":false}}},{"component":"NotFoundTitle","slug":"not-found-title","code":"import { createStyles, Title, Text, Button, Container, Group, rem } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  root: {\n    paddingTop: rem(80),\n    paddingBottom: rem(80),\n  },\n\n  label: {\n    textAlign: 'center',\n    fontWeight: 900,\n    fontSize: rem(220),\n    lineHeight: 1,\n    marginBottom: `calc(${theme.spacing.xl} * 1.5)`,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[2],\n\n    [theme.fn.smallerThan('sm')]: {\n      fontSize: rem(120),\n    },\n  },\n\n  title: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    textAlign: 'center',\n    fontWeight: 900,\n    fontSize: rem(38),\n\n    [theme.fn.smallerThan('sm')]: {\n      fontSize: rem(32),\n    },\n  },\n\n  description: {\n    maxWidth: rem(500),\n    margin: 'auto',\n    marginTop: theme.spacing.xl,\n    marginBottom: `calc(${theme.spacing.xl} * 1.5)`,\n  },\n}));\n\nexport function NotFoundTitle() {\n  const { classes } = useStyles();\n\n  return (\n    <Container className={classes.root}>\n      <div className={classes.label}>404</div>\n      <Title className={classes.title}>You have found a secret place.</Title>\n      <Text color=\"dimmed\" size=\"lg\" align=\"center\" className={classes.description}>\n        Unfortunately, this is only a 404 page. You may have mistyped the address, or the page has\n        been moved to another URL.\n      </Text>\n      <Group position=\"center\">\n        <Button variant=\"subtle\" size=\"md\">\n          Take me back to home page\n        </Button>\n      </Group>\n    </Container>\n  );\n}\n","attributes":{"title":"404 page","category":"error-pages","author":"rtivital","withColor":true,"responsive":true,"dependencies":["/core/title/","/core/text/","/core/container/","/core/button/","/core/group/"],"canvas":{"center":false}}},{"component":"NothingFoundBackground","slug":"nothing-found-background","code":"import { createStyles, Container, Title, Text, Button, Group, rem } from '@mantine/core';\nimport { Illustration } from './Illustration';\n\nconst useStyles = createStyles((theme) => ({\n  root: {\n    paddingTop: rem(80),\n    paddingBottom: rem(80),\n  },\n\n  inner: {\n    position: 'relative',\n  },\n\n  image: {\n    ...theme.fn.cover(),\n    opacity: 0.75,\n  },\n\n  content: {\n    paddingTop: rem(220),\n    position: 'relative',\n    zIndex: 1,\n\n    [theme.fn.smallerThan('sm')]: {\n      paddingTop: rem(120),\n    },\n  },\n\n  title: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    textAlign: 'center',\n    fontWeight: 900,\n    fontSize: rem(38),\n\n    [theme.fn.smallerThan('sm')]: {\n      fontSize: rem(32),\n    },\n  },\n\n  description: {\n    maxWidth: rem(540),\n    margin: 'auto',\n    marginTop: theme.spacing.xl,\n    marginBottom: `calc(${theme.spacing.xl} * 1.5)`,\n  },\n}));\n\nexport function NothingFoundBackground() {\n  const { classes } = useStyles();\n\n  return (\n    <Container className={classes.root}>\n      <div className={classes.inner}>\n        <Illustration className={classes.image} />\n        <div className={classes.content}>\n          <Title className={classes.title}>Nothing to see here</Title>\n          <Text color=\"dimmed\" size=\"lg\" align=\"center\" className={classes.description}>\n            Page you are trying to open does not exist. You may have mistyped the address, or the\n            page has been moved to another URL. If you think this is an error contact support.\n          </Text>\n          <Group position=\"center\">\n            <Button size=\"md\">Take me back to home page</Button>\n          </Group>\n        </div>\n      </div>\n    </Container>\n  );\n}\n","attributes":{"title":"404 as background image","category":"error-pages","author":"rtivital","withColor":true,"responsive":true,"dependencies":["/core/title/","/core/text/","/core/container/","/core/group/","/core/button/"],"canvas":{"center":false}}},{"component":"PasswordStrength","slug":"password-strength","code":"import { Box, Progress, PasswordInput, Group, Text, Center } from '@mantine/core';\nimport { useInputState } from '@mantine/hooks';\nimport { IconCheck, IconX } from '@tabler/icons-react';\n\nfunction PasswordRequirement({ meets, label }: { meets: boolean; label: string }) {\n  return (\n    <Text color={meets ? 'teal' : 'red'} mt={5} size=\"sm\">\n      <Center inline>\n        {meets ? <IconCheck size=\"0.9rem\" stroke={1.5} /> : <IconX size=\"0.9rem\" stroke={1.5} />}\n        <Box ml={7}>{label}</Box>\n      </Center>\n    </Text>\n  );\n}\n\nconst requirements = [\n  { re: /[0-9]/, label: 'Includes number' },\n  { re: /[a-z]/, label: 'Includes lowercase letter' },\n  { re: /[A-Z]/, label: 'Includes uppercase letter' },\n  { re: /[$&+,:;=?@#|'<>.^*()%!-]/, label: 'Includes special symbol' },\n];\n\nfunction getStrength(password: string) {\n  let multiplier = password.length > 5 ? 0 : 1;\n\n  requirements.forEach((requirement) => {\n    if (!requirement.re.test(password)) {\n      multiplier += 1;\n    }\n  });\n\n  return Math.max(100 - (100 / (requirements.length + 1)) * multiplier, 0);\n}\n\nexport function PasswordStrength() {\n  const [value, setValue] = useInputState('');\n  const strength = getStrength(value);\n  const checks = requirements.map((requirement, index) => (\n    <PasswordRequirement key={index} label={requirement.label} meets={requirement.re.test(value)} />\n  ));\n  const bars = Array(4)\n    .fill(0)\n    .map((_, index) => (\n      <Progress\n        styles={{ bar: { transitionDuration: '0ms' } }}\n        value={\n          value.length > 0 && index === 0 ? 100 : strength >= ((index + 1) / 4) * 100 ? 100 : 0\n        }\n        color={strength > 80 ? 'teal' : strength > 50 ? 'yellow' : 'red'}\n        key={index}\n        size={4}\n      />\n    ));\n\n  return (\n    <div>\n      <PasswordInput\n        value={value}\n        onChange={setValue}\n        placeholder=\"Your password\"\n        label=\"Password\"\n        required\n      />\n\n      <Group spacing={5} grow mt=\"xs\" mb=\"md\">\n        {bars}\n      </Group>\n\n      <PasswordRequirement label=\"Has at least 6 characters\" meets={value.length > 5} />\n      {checks}\n    </div>\n  );\n}\n","attributes":{"title":"Password with strength meter","category":"inputs","author":"rtivital","dependencies":["/core/password-input/","/core/progress/","/core/text/","/core/box/","/core/center/","/core/group/","@tabler/icons-react"],"canvas":{"center":true,"maxWidth":320}}},{"component":"ProgressCard","slug":"progress-card","code":"import { Text, Progress, Card } from '@mantine/core';\n\nexport function ProgressCard() {\n  return (\n    <Card\n      withBorder\n      radius=\"md\"\n      padding=\"xl\"\n      sx={(theme) => ({\n        backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n      })}\n    >\n      <Text fz=\"xs\" tt=\"uppercase\" fw={700} c=\"dimmed\">\n        Monthly goal\n      </Text>\n      <Text fz=\"lg\" fw={500}>\n        $5.431 / $10.000\n      </Text>\n      <Progress value={54.31} mt=\"md\" size=\"lg\" radius=\"xl\" />\n    </Card>\n  );\n}\n","attributes":{"title":"Progress card","category":"stats","author":"rtivital","changelog":"september-2022","withColor":true,"dimmed":true,"dependencies":["/core/text/","/core/card/","/core/progress/"],"canvas":{"center":true,"maxWidth":380}}},{"component":"ProgressCardColored","slug":"progress-card-colored","code":"import { Text, Progress, Card, createStyles } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  card: {\n    backgroundColor: theme.fn.primaryColor(),\n  },\n\n  title: {\n    color: theme.fn.rgba(theme.white, 0.65),\n  },\n\n  stats: {\n    color: theme.white,\n  },\n\n  progressBar: {\n    backgroundColor: theme.white,\n  },\n\n  progressTrack: {\n    backgroundColor: theme.fn.rgba(theme.white, 0.4),\n  },\n}));\n\nexport function ProgressCardColored() {\n  const { classes } = useStyles();\n  return (\n    <Card withBorder radius=\"md\" p=\"xl\" className={classes.card}>\n      <Text fz=\"xs\" tt=\"uppercase\" fw={700} className={classes.title}>\n        Monthly goal\n      </Text>\n      <Text fz=\"lg\" fw={500} className={classes.stats}>\n        $5.431 / $10.000\n      </Text>\n      <Progress\n        value={54.31}\n        mt=\"md\"\n        size=\"lg\"\n        radius=\"xl\"\n        classNames={{\n          root: classes.progressTrack,\n          bar: classes.progressBar,\n        }}\n      />\n    </Card>\n  );\n}\n","attributes":{"title":"Progress card with color","category":"stats","author":"rtivital","changelog":"september-2022","withColor":true,"dimmed":true,"dependencies":["/core/text/","/core/card/","/core/progress/"],"canvas":{"center":true,"maxWidth":380}}},{"component":"QuantityInput","slug":"quantity-input","code":"import { useRef, useState } from 'react';\nimport { createStyles, NumberInput, NumberInputHandlers, ActionIcon, rem } from '@mantine/core';\nimport { IconPlus, IconMinus } from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: `${rem(6)} ${theme.spacing.xs}`,\n    borderRadius: theme.radius.sm,\n    border: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? 'transparent' : theme.colors.gray[3]\n    }`,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[5] : theme.white,\n\n    '&:focus-within': {\n      borderColor: theme.colors[theme.primaryColor][6],\n    },\n  },\n\n  control: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n    border: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? 'transparent' : theme.colors.gray[3]\n    }`,\n\n    '&:disabled': {\n      borderColor: theme.colorScheme === 'dark' ? 'transparent' : theme.colors.gray[3],\n      opacity: 0.8,\n      backgroundColor: 'transparent',\n    },\n  },\n\n  input: {\n    textAlign: 'center',\n    paddingRight: `${theme.spacing.sm} !important`,\n    paddingLeft: `${theme.spacing.sm} !important`,\n    height: rem(28),\n    flex: 1,\n  },\n}));\n\ninterface QuantityInputProps {\n  min?: number;\n  max?: number;\n}\n\nexport function QuantityInput({ min = 1, max = 10 }: QuantityInputProps) {\n  const { classes } = useStyles();\n  const handlers = useRef<NumberInputHandlers>(null);\n  const [value, setValue] = useState<number | ''>(1);\n\n  return (\n    <div className={classes.wrapper}>\n      <ActionIcon<'button'>\n        size={28}\n        variant=\"transparent\"\n        onClick={() => handlers.current?.decrement()}\n        disabled={value === min}\n        className={classes.control}\n        onMouseDown={(event) => event.preventDefault()}\n      >\n        <IconMinus size=\"1rem\" stroke={1.5} />\n      </ActionIcon>\n\n      <NumberInput\n        variant=\"unstyled\"\n        min={min}\n        max={max}\n        handlersRef={handlers}\n        value={value}\n        onChange={setValue}\n        classNames={{ input: classes.input }}\n      />\n\n      <ActionIcon<'button'>\n        size={28}\n        variant=\"transparent\"\n        onClick={() => handlers.current?.increment()}\n        disabled={value === max}\n        className={classes.control}\n        onMouseDown={(event) => event.preventDefault()}\n      >\n        <IconPlus size=\"1rem\" stroke={1.5} />\n      </ActionIcon>\n    </div>\n  );\n}\n","attributes":{"title":"Number input with custom controls","category":"inputs","author":"rtivital","dependencies":[],"canvas":{"center":true,"maxWidth":140}}},{"component":"SegmentedToggle","slug":"segmented-toggle","code":"import { useMantineColorScheme, SegmentedControl, Group, Center, Box } from '@mantine/core';\nimport { IconSun, IconMoon } from '@tabler/icons-react';\n\nexport function SegmentedToggle() {\n  const { colorScheme, toggleColorScheme } = useMantineColorScheme();\n\n  return (\n    <Group position=\"center\" my=\"xl\">\n      <SegmentedControl\n        value={colorScheme}\n        onChange={(value: 'light' | 'dark') => toggleColorScheme(value)}\n        data={[\n          {\n            value: 'light',\n            label: (\n              <Center>\n                <IconSun size=\"1rem\" stroke={1.5} />\n                <Box ml={10}>Light</Box>\n              </Center>\n            ),\n          },\n          {\n            value: 'dark',\n            label: (\n              <Center>\n                <IconMoon size=\"1rem\" stroke={1.5} />\n                <Box ml={10}>Dark</Box>\n              </Center>\n            ),\n          },\n        ]}\n      />\n    </Group>\n  );\n}\n","attributes":{"title":"Segmented color scheme toggle","category":"color-scheme","author":"rtivital","dependencies":["/core/segmented-control/","/core/center/","/core/box/","@tabler/icons-react"],"canvas":{"center":false}}},{"component":"ServerError","slug":"server-error","code":"import { createStyles, Title, Text, Button, Container, Group, rem } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  root: {\n    paddingTop: rem(80),\n    paddingBottom: rem(120),\n    backgroundColor: theme.fn.variant({ variant: 'filled', color: theme.primaryColor }).background,\n  },\n\n  label: {\n    textAlign: 'center',\n    fontWeight: 900,\n    fontSize: rem(220),\n    lineHeight: 1,\n    marginBottom: `calc(${theme.spacing.xl} * 1.5)`,\n    color: theme.colors[theme.primaryColor][3],\n\n    [theme.fn.smallerThan('sm')]: {\n      fontSize: rem(120),\n    },\n  },\n\n  title: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    textAlign: 'center',\n    fontWeight: 900,\n    fontSize: rem(38),\n    color: theme.white,\n\n    [theme.fn.smallerThan('sm')]: {\n      fontSize: rem(32),\n    },\n  },\n\n  description: {\n    maxWidth: rem(540),\n    margin: 'auto',\n    marginTop: theme.spacing.xl,\n    marginBottom: `calc(${theme.spacing.xl} * 1.5)`,\n    color: theme.colors[theme.primaryColor][1],\n  },\n}));\n\nexport function ServerError() {\n  const { classes } = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Container>\n        <div className={classes.label}>500</div>\n        <Title className={classes.title}>Something bad just happened...</Title>\n        <Text size=\"lg\" align=\"center\" className={classes.description}>\n          Our servers could not handle your request. Don&apos;t worry, our development team was\n          already notified. Try refreshing the page.\n        </Text>\n        <Group position=\"center\">\n          <Button variant=\"white\" size=\"md\">\n            Refresh the page\n          </Button>\n        </Group>\n      </Container>\n    </div>\n  );\n}\n","attributes":{"title":"500 page","category":"error-pages","author":"rtivital","withColor":true,"responsive":true,"dependencies":["/core/title/","/core/text/","/core/button/","/core/group/","/core/container/"],"canvas":{"center":false}}},{"component":"ServerOverload","slug":"server-overload","code":"import { createStyles, Container, Title, Text, Button, Group, rem } from '@mantine/core';\nimport { Illustration } from './Illustration';\n\nconst useStyles = createStyles((theme) => ({\n  root: {\n    paddingTop: rem(120),\n    paddingBottom: rem(120),\n    backgroundColor: theme.fn.variant({ variant: 'filled', color: theme.primaryColor }).background,\n  },\n\n  inner: {\n    position: 'relative',\n  },\n\n  image: {\n    ...theme.fn.cover(),\n    opacity: 0.65,\n  },\n\n  content: {\n    paddingTop: rem(220),\n    position: 'relative',\n    zIndex: 1,\n\n    [theme.fn.smallerThan('sm')]: {\n      paddingTop: rem(120),\n    },\n  },\n\n  title: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    textAlign: 'center',\n    fontWeight: 900,\n    fontSize: rem(38),\n    color: theme.white,\n\n    [theme.fn.smallerThan('sm')]: {\n      fontSize: rem(32),\n    },\n  },\n\n  description: {\n    maxWidth: rem(460),\n    margin: 'auto',\n    marginTop: theme.spacing.xl,\n    marginBottom: `calc(${theme.spacing.xl} * 1.5)`,\n    color: theme.colors[theme.primaryColor][1],\n  },\n}));\n\nexport function ServerOverload() {\n  const { classes } = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Container>\n        <div className={classes.inner}>\n          <Illustration className={classes.image} />\n          <div className={classes.content}>\n            <Title className={classes.title}>All of our servers are busy</Title>\n            <Text size=\"lg\" align=\"center\" className={classes.description}>\n              We cannot handle your request right now, please wait for a couple of minutes and\n              refresh the page. Our team is already working on this issue.\n            </Text>\n            <Group position=\"center\">\n              <Button size=\"md\" variant=\"white\">\n                Refresh the page\n              </Button>\n            </Group>\n          </div>\n        </div>\n      </Container>\n    </div>\n  );\n}\n","attributes":{"title":"503 page","category":"error-pages","author":"rtivital","withColor":true,"responsive":true,"dependencies":["/core/title/","/core/text/","/core/button/","/core/group/","/core/container/"],"canvas":{"center":false}}},{"component":"SliderHover","slug":"slider-hover","code":"import { Slider } from '@mantine/core';\nimport { useHover } from '@mantine/hooks';\n\nexport function SliderHover() {\n  const { hovered, ref } = useHover();\n\n  return (\n    <Slider\n      defaultValue={40}\n      min={10}\n      max={90}\n      ref={ref}\n      label={null}\n      styles={{\n        thumb: {\n          transition: 'opacity 150ms ease',\n          opacity: hovered ? 1 : 0,\n        },\n\n        dragging: {\n          opacity: 1,\n        },\n      }}\n    />\n  );\n}\n","attributes":{"title":"Slider with thumb visible on hover","category":"sliders","author":"rtivital","withColor":true,"dependencies":["/core/slider/"],"canvas":{"center":true,"maxWidth":420}}},{"component":"SliderIcon","slug":"slider-icon","code":"import { Slider, RangeSlider } from '@mantine/core';\nimport { IconHeart, IconHeartBroken } from '@tabler/icons-react';\n\nconst styles = { thumb: { borderWidth: 2, height: 26, width: 26, padding: 3 } };\n\nexport function SliderIcon() {\n  return (\n    <>\n      <Slider\n        thumbChildren={<IconHeart size=\"1rem\" stroke={1.5} />}\n        color=\"red\"\n        label={null}\n        defaultValue={40}\n        styles={styles}\n      />\n\n      <RangeSlider\n        mt=\"xl\"\n        styles={styles}\n        color=\"red\"\n        label={null}\n        defaultValue={[20, 60]}\n        thumbChildren={[\n          <IconHeart size=\"1rem\" stroke={1.5} key=\"1\" />,\n          <IconHeartBroken size=\"1rem\" stroke={1.5} key=\"2\" />,\n        ]}\n      />\n    </>\n  );\n}\n","attributes":{"title":"Slider with icon thumb","category":"sliders","author":"rtivital","dependencies":["/core/slider/","@tabler/icons-react"],"canvas":{"center":true,"maxWidth":420}}},{"component":"SliderInput","slug":"slider-input","code":"import { useState } from 'react';\nimport { createStyles, NumberInput, Slider, rem } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    position: 'relative',\n  },\n\n  input: {\n    height: 'auto',\n    paddingTop: rem(22),\n    paddingBottom: rem(3),\n    borderBottomRightRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n\n  label: {\n    position: 'absolute',\n    pointerEvents: 'none',\n    paddingLeft: theme.spacing.sm,\n    paddingTop: `calc(${theme.spacing.sm} / 2)`,\n    zIndex: 1,\n  },\n\n  slider: {\n    position: 'absolute',\n    width: '100%',\n    bottom: rem(-1),\n  },\n\n  thumb: {\n    width: rem(16),\n    height: rem(16),\n  },\n\n  track: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[3] : theme.colors.gray[4],\n  },\n}));\n\nexport function SliderInput() {\n  const { classes } = useStyles();\n  const [value, setValue] = useState<number | ''>(2200);\n  return (\n    <div className={classes.wrapper}>\n      <NumberInput\n        value={value}\n        onChange={setValue}\n        label=\"Your daily kcal consumption\"\n        placeholder=\"2200 is an average value\"\n        step={50}\n        min={0}\n        max={8000}\n        hideControls\n        classNames={{ input: classes.input, label: classes.label }}\n      />\n      <Slider\n        max={8000}\n        step={50}\n        min={0}\n        label={null}\n        value={value === '' ? 0 : value}\n        onChange={setValue}\n        size={2}\n        radius={0}\n        className={classes.slider}\n        classNames={{ thumb: classes.thumb, track: classes.track }}\n      />\n    </div>\n  );\n}\n","attributes":{"title":"NumberInput with slider","category":"sliders","author":"rtivital","withColor":true,"dependencies":["/core/number-input/","/core/slider/"],"canvas":{"center":true,"maxWidth":420}}},{"component":"SliderLabel","slug":"slider-label","code":"import { createStyles, RangeSlider, rem } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  label: {\n    top: 0,\n    height: rem(28),\n    lineHeight: rem(28),\n    width: rem(34),\n    padding: 0,\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontWeight: 700,\n    backgroundColor: 'transparent',\n  },\n\n  thumb: {\n    backgroundColor: theme.colors[theme.primaryColor][6],\n    height: rem(28),\n    width: rem(34),\n    border: 'none',\n  },\n\n  dragging: {\n    transform: 'translate(-50%, -50%)',\n  },\n}));\n\nexport function SliderLabel() {\n  const { classes } = useStyles();\n  return <RangeSlider labelAlwaysOn defaultValue={[20, 60]} classNames={classes} />;\n}\n","attributes":{"title":"Range slider with labels","category":"sliders","author":"rtivital","withColor":true,"dependencies":[],"canvas":{"center":true,"maxWidth":420}}},{"component":"SliderMarks","slug":"slider-marks","code":"import { createStyles, RangeSlider, rem } from '@mantine/core';\nimport { IconPoint, IconGripVertical } from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  mark: {\n    display: 'none',\n  },\n\n  markWrapper: {\n    marginTop: rem(12),\n  },\n\n  thumb: {\n    width: rem(16),\n    height: rem(28),\n    backgroundColor: theme.white,\n    color: theme.colors.gray[5],\n    border: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[2] : theme.colors.gray[3]\n    }`,\n  },\n}));\n\nconst point = <IconPoint size={10} style={{ marginTop: rem(6) }} stroke={1.5} />;\n\nexport function SliderMarks() {\n  const { classes } = useStyles();\n  return (\n    <RangeSlider\n      mt=\"xl\"\n      mb=\"xl\"\n      classNames={classes}\n      defaultValue={[30, 60]}\n      thumbChildren={<IconGripVertical size=\"1.2rem\" stroke={1.5} />}\n      marks={[\n        { value: 0, label: '0' },\n        { value: 12.5, label: point },\n        { value: 25, label: '25' },\n        { value: 37.5, label: point },\n        { value: 50, label: '50' },\n        { value: 62.5, label: point },\n        { value: 75, label: '75' },\n        { value: 87.5, label: point },\n        { value: 100, label: '100' },\n      ]}\n    />\n  );\n}\n","attributes":{"title":"Slider with marks","category":"sliders","author":"rtivital","withColor":true,"dependencies":["/core/slider/"],"canvas":{"center":true,"maxWidth":420}}},{"component":"SliderWhite","slug":"slider-white","code":"import { createStyles, Slider, rem } from '@mantine/core';\nimport { IconGripHorizontal } from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  thumb: {\n    border: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[2] : theme.colors.gray[3]\n    }`,\n    width: rem(28),\n    height: rem(22),\n    color: theme.colors.gray[5],\n    backgroundColor: theme.white,\n    borderRadius: theme.radius.sm,\n  },\n}));\n\nexport function SliderWhite() {\n  const { classes } = useStyles();\n  return (\n    <Slider\n      classNames={classes}\n      thumbChildren={<IconGripHorizontal size=\"1.2rem\" stroke={1.5} />}\n      defaultValue={40}\n      label={null}\n    />\n  );\n}\n","attributes":{"title":"Slider with white thumb","category":"sliders","author":"rtivital","withColor":true,"dependencies":["/core/slider/"],"canvas":{"center":true,"maxWidth":420}}},{"component":"SocialButtons","slug":"social-buttons","code":"import { Button, ButtonProps, Group } from '@mantine/core';\nimport { GithubIcon, DiscordIcon, TwitterIcon } from '@mantine/ds';\nimport { GoogleIcon } from './GoogleIcon';\nimport { FacebookIcon } from './FacebookIcon';\n\nexport function GoogleButton(props: ButtonProps) {\n  return <Button leftIcon={<GoogleIcon />} variant=\"default\" color=\"gray\" {...props} />;\n}\n\nexport function FacebookButton(props: ButtonProps) {\n  return (\n    <Button\n      leftIcon={<FacebookIcon />}\n      sx={(theme) => ({\n        backgroundColor: '#4267B2',\n        color: '#fff',\n        '&:not([data-disabled]):hover': {\n          backgroundColor: theme.fn.darken('#4267B2', 0.1),\n        },\n      })}\n      {...props}\n    />\n  );\n}\n\nexport function DiscordButton(props: ButtonProps) {\n  return (\n    <Button\n      leftIcon={<DiscordIcon size=\"1rem\" />}\n      sx={(theme) => ({\n        backgroundColor: theme.colorScheme === 'dark' ? '#5865F2' : '#5865F2',\n        '&:not([data-disabled]):hover': {\n          backgroundColor:\n            theme.colorScheme === 'dark'\n              ? theme.fn.lighten('#5865F2', 0.05)\n              : theme.fn.darken('#5865F2', 0.05),\n        },\n      })}\n      {...props}\n    />\n  );\n}\n\n// Twitter button as anchor\nexport function TwitterButton(props: ButtonProps & React.ComponentPropsWithoutRef<'a'>) {\n  return (\n    <Button\n      component=\"a\"\n      leftIcon={<TwitterIcon size=\"1rem\" color=\"#00ACEE\" />}\n      variant=\"default\"\n      {...props}\n    />\n  );\n}\n\nexport function GithubButton(props: ButtonProps) {\n  return (\n    <Button\n      {...props}\n      leftIcon={<GithubIcon size=\"1rem\" />}\n      sx={(theme) => ({\n        backgroundColor: theme.colors.dark[theme.colorScheme === 'dark' ? 9 : 6],\n        color: '#fff',\n        '&:hover': {\n          backgroundColor: theme.colors.dark[theme.colorScheme === 'dark' ? 9 : 6],\n        },\n      })}\n    />\n  );\n}\n\nexport function SocialButtons() {\n  return (\n    <Group position=\"center\" sx={{ padding: 15 }}>\n      <GoogleButton>Continue with Google</GoogleButton>\n      <TwitterButton href=\"https://twitter.com/mantinedev\" target=\"_blank\">\n        Follow on Twitter\n      </TwitterButton>\n      <FacebookButton>Sign in with Facebook</FacebookButton>\n      <GithubButton>Login with GitHub</GithubButton>\n      <DiscordButton>Join Discord community</DiscordButton>\n    </Group>\n  );\n}\n","attributes":{"title":"Social buttons","category":"buttons","author":"rtivital","dependencies":["/core/button/","/core/group/"],"canvas":{"center":true}}},{"component":"SplitButton","slug":"split-button","code":"import { createStyles, Button, Menu, Group, ActionIcon, rem } from '@mantine/core';\nimport { IconTrash, IconBookmark, IconCalendar, IconChevronDown } from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  button: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n\n  menuControl: {\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n    border: 0,\n    borderLeft: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white\n    }`,\n  },\n}));\n\nexport function SplitButton() {\n  const { classes, theme } = useStyles();\n  const menuIconColor = theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 5 : 6];\n\n  return (\n    <Group noWrap spacing={0}>\n      <Button className={classes.button}>Send</Button>\n      <Menu transitionProps={{ transition: 'pop' }} position=\"bottom-end\" withinPortal>\n        <Menu.Target>\n          <ActionIcon\n            variant=\"filled\"\n            color={theme.primaryColor}\n            size={36}\n            className={classes.menuControl}\n          >\n            <IconChevronDown size=\"1rem\" stroke={1.5} />\n          </ActionIcon>\n        </Menu.Target>\n        <Menu.Dropdown>\n          <Menu.Item icon={<IconCalendar size=\"1rem\" stroke={1.5} color={menuIconColor} />}>\n            Schedule for later\n          </Menu.Item>\n          <Menu.Item icon={<IconBookmark size=\"1rem\" stroke={1.5} color={menuIconColor} />}>\n            Save draft\n          </Menu.Item>\n          <Menu.Item icon={<IconTrash size=\"1rem\" stroke={1.5} color={menuIconColor} />}>\n            Delete\n          </Menu.Item>\n        </Menu.Dropdown>\n      </Menu>\n    </Group>\n  );\n}\n","attributes":{"title":"Split button","category":"buttons","author":"rtivital","dependencies":["/core/button/","/core/menu/","/core/action-icon/","/core/group","@tabler/icons-react"],"canvas":{"center":true,"maxWidth":120}}},{"component":"StatsCard","slug":"stats-card","code":"import { createStyles, ThemeIcon, Progress, Text, Group, Badge, Paper, rem } from '@mantine/core';\nimport { IconSwimming } from '@tabler/icons-react';\n\nconst ICON_SIZE = rem(60);\n\nconst useStyles = createStyles((theme) => ({\n  card: {\n    position: 'relative',\n    overflow: 'visible',\n    padding: theme.spacing.xl,\n    paddingTop: `calc(${theme.spacing.xl} * 1.5 + ${ICON_SIZE} / 3)`,\n  },\n\n  icon: {\n    position: 'absolute',\n    top: `calc(-${ICON_SIZE} / 3)`,\n    left: `calc(50% - ${ICON_SIZE} / 2)`,\n  },\n\n  title: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    lineHeight: 1,\n  },\n}));\n\nexport function StatsCard() {\n  const { classes } = useStyles();\n\n  return (\n    <Paper radius=\"md\" withBorder className={classes.card} mt={`calc(${ICON_SIZE} / 3)`}>\n      <ThemeIcon className={classes.icon} size={ICON_SIZE} radius={ICON_SIZE}>\n        <IconSwimming size=\"2rem\" stroke={1.5} />\n      </ThemeIcon>\n\n      <Text ta=\"center\" fw={700} className={classes.title}>\n        Swimming challenge\n      </Text>\n      <Text c=\"dimmed\" ta=\"center\" fz=\"sm\">\n        32 km / week\n      </Text>\n\n      <Group position=\"apart\" mt=\"xs\">\n        <Text fz=\"sm\" color=\"dimmed\">\n          Progress\n        </Text>\n        <Text fz=\"sm\" color=\"dimmed\">\n          62%\n        </Text>\n      </Group>\n\n      <Progress value={62} mt={5} />\n\n      <Group position=\"apart\" mt=\"md\">\n        <Text fz=\"sm\">20 / 36 km</Text>\n        <Badge size=\"sm\">4 days left</Badge>\n      </Group>\n    </Paper>\n  );\n}\n","attributes":{"title":"Card with progress","category":"stats","author":"rtivital","dimmed":true,"withColor":true,"dependencies":["/core/paper/","/core/theme-icon/","/core/text/","/core/group/","/core/progress/","/core/badge/"],"canvas":{"center":true,"maxWidth":320}}},{"component":"StatsControls","slug":"stats-controls","code":"import { useState } from 'react';\nimport dayjs from 'dayjs';\nimport { createStyles, UnstyledButton, Text, Paper, Group, rem } from '@mantine/core';\nimport {\n  IconSwimming,\n  IconBike,\n  IconRun,\n  IconChevronDown,\n  IconChevronUp,\n} from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  root: {\n    backgroundImage: `linear-gradient(-60deg, ${theme.colors[theme.primaryColor][4]} 0%, ${\n      theme.colors[theme.primaryColor][7]\n    } 100%)`,\n    padding: theme.spacing.xl,\n    borderRadius: theme.radius.md,\n    display: 'flex',\n\n    [theme.fn.smallerThan('xs')]: {\n      flexDirection: 'column',\n    },\n  },\n\n  icon: {\n    marginLeft: 'auto',\n    marginRight: 'auto',\n    marginTop: theme.spacing.lg,\n    color: theme.colors[theme.primaryColor][6],\n  },\n\n  stat: {\n    minWidth: rem(98),\n    paddingTop: theme.spacing.xl,\n    minHeight: rem(140),\n    display: 'flex',\n    flex: 1,\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    backgroundColor: theme.white,\n  },\n\n  label: {\n    textTransform: 'uppercase',\n    fontWeight: 700,\n    fontSize: theme.fontSizes.xs,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    color: theme.colors.gray[6],\n    lineHeight: 1.2,\n  },\n\n  value: {\n    fontSize: theme.fontSizes.sm,\n    fontWeight: 700,\n    color: theme.black,\n  },\n\n  count: {\n    color: theme.colors.gray[6],\n  },\n\n  day: {\n    fontSize: rem(44),\n    fontWeight: 700,\n    color: theme.white,\n    lineHeight: 1,\n    textAlign: 'center',\n    marginBottom: 5,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n  },\n\n  month: {\n    fontSize: theme.fontSizes.sm,\n    color: theme.white,\n    lineHeight: 1,\n    textAlign: 'center',\n  },\n\n  controls: {\n    display: 'flex',\n    flexDirection: 'column',\n    marginRight: `calc(${theme.spacing.xl} * 2)`,\n\n    [theme.fn.smallerThan('xs')]: {\n      flexDirection: 'row',\n      alignItems: 'center',\n      marginRight: 0,\n      marginBottom: theme.spacing.xl,\n    },\n  },\n\n  date: {\n    flex: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n\n  control: {\n    height: rem(28),\n    width: '100%',\n    color: theme.colors[theme.primaryColor][2],\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: theme.radius.md,\n    transition: 'background-color 50ms ease',\n\n    [theme.fn.smallerThan('xs')]: {\n      height: rem(34),\n      width: rem(34),\n    },\n\n    '&:hover': {\n      backgroundColor: theme.colors[theme.primaryColor][5],\n      color: theme.white,\n    },\n  },\n\n  controlIcon: {\n    [theme.fn.smallerThan('xs')]: {\n      transform: 'rotate(-90deg)',\n    },\n  },\n}));\n\nconst data = [\n  { icon: IconRun, label: 'Running' },\n  { icon: IconSwimming, label: 'Swimming' },\n  { icon: IconBike, label: 'Bike' },\n];\n\nexport function StatsControls() {\n  const { classes } = useStyles();\n  const [date, setDate] = useState(new Date(2021, 9, 24));\n\n  const stats = data.map((stat) => (\n    <Paper className={classes.stat} radius=\"md\" shadow=\"md\" p=\"xs\" key={stat.label}>\n      <stat.icon size={32} className={classes.icon} stroke={1.5} />\n      <div>\n        <Text className={classes.label}>{stat.label}</Text>\n        <Text fz=\"xs\" className={classes.count}>\n          <span className={classes.value}>{Math.floor(Math.random() * 6 + 4)}km</span> / 10km\n        </Text>\n      </div>\n    </Paper>\n  ));\n\n  return (\n    <div className={classes.root}>\n      <div className={classes.controls}>\n        <UnstyledButton\n          className={classes.control}\n          onClick={() => setDate((current) => dayjs(current).add(1, 'day').toDate())}\n        >\n          <IconChevronUp size=\"1rem\" className={classes.controlIcon} stroke={1.5} />\n        </UnstyledButton>\n\n        <div className={classes.date}>\n          <Text className={classes.day}>{dayjs(date).format('DD')}</Text>\n          <Text className={classes.month}>{dayjs(date).format('MMMM')}</Text>\n        </div>\n\n        <UnstyledButton\n          className={classes.control}\n          onClick={() => setDate((current) => dayjs(current).subtract(1, 'day').toDate())}\n        >\n          <IconChevronDown size=\"1rem\" className={classes.controlIcon} stroke={1.5} />\n        </UnstyledButton>\n      </div>\n      <Group sx={{ flex: 1 }}>{stats}</Group>\n    </div>\n  );\n}\n","attributes":{"title":"Stats with controls","category":"stats","author":"rtivital","withColor":true,"responsive":true,"dependencies":["/core/button/#unstyled-button","/core/text/","/core/paper/","/core/group/","@tabler/icons-react"],"canvas":{"center":true,"maxWidth":500}}},{"component":"StatsGrid","slug":"stats-grid","code":"import { createStyles, Group, Paper, SimpleGrid, Text, rem } from '@mantine/core';\nimport {\n  IconUserPlus,\n  IconDiscount2,\n  IconReceipt2,\n  IconCoin,\n  IconArrowUpRight,\n  IconArrowDownRight,\n} from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  root: {\n    padding: `calc(${theme.spacing.xl} * 1.5)`,\n  },\n\n  value: {\n    fontSize: rem(24),\n    fontWeight: 700,\n    lineHeight: 1,\n  },\n\n  diff: {\n    lineHeight: 1,\n    display: 'flex',\n    alignItems: 'center',\n  },\n\n  icon: {\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[3] : theme.colors.gray[4],\n  },\n\n  title: {\n    fontWeight: 700,\n    textTransform: 'uppercase',\n  },\n}));\n\nconst icons = {\n  user: IconUserPlus,\n  discount: IconDiscount2,\n  receipt: IconReceipt2,\n  coin: IconCoin,\n};\n\ninterface StatsGridProps {\n  data: { title: string; icon: keyof typeof icons; value: string; diff: number }[];\n}\n\nexport function StatsGrid({ data }: StatsGridProps) {\n  const { classes } = useStyles();\n  const stats = data.map((stat) => {\n    const Icon = icons[stat.icon];\n    const DiffIcon = stat.diff > 0 ? IconArrowUpRight : IconArrowDownRight;\n\n    return (\n      <Paper withBorder p=\"md\" radius=\"md\" key={stat.title}>\n        <Group position=\"apart\">\n          <Text size=\"xs\" color=\"dimmed\" className={classes.title}>\n            {stat.title}\n          </Text>\n          <Icon className={classes.icon} size=\"1.4rem\" stroke={1.5} />\n        </Group>\n\n        <Group align=\"flex-end\" spacing=\"xs\" mt={25}>\n          <Text className={classes.value}>{stat.value}</Text>\n          <Text color={stat.diff > 0 ? 'teal' : 'red'} fz=\"sm\" fw={500} className={classes.diff}>\n            <span>{stat.diff}%</span>\n            <DiffIcon size=\"1rem\" stroke={1.5} />\n          </Text>\n        </Group>\n\n        <Text fz=\"xs\" c=\"dimmed\" mt={7}>\n          Compared to previous month\n        </Text>\n      </Paper>\n    );\n  });\n  return (\n    <div className={classes.root}>\n      <SimpleGrid\n        cols={4}\n        breakpoints={[\n          { maxWidth: 'md', cols: 2 },\n          { maxWidth: 'xs', cols: 1 },\n        ]}\n      >\n        {stats}\n      </SimpleGrid>\n    </div>\n  );\n}\n","attributes":{"title":"Stats grid","category":"stats","author":"rtivital","responsive":true,"dimmed":true,"dependencies":["/core/group/","/core/paper/","/core/simple-grid/","/core/text/","@tabler/icons-react"],"props":{"data":[{"title":"Revenue","icon":"receipt","value":"13,456","diff":34},{"title":"Profit","icon":"coin","value":"4,145","diff":-13},{"title":"Coupons usage","icon":"discount","value":"745","diff":18},{"title":"New customers","icon":"user","value":"188","diff":-30}]},"canvas":{"center":false}}},{"component":"StatsGridIcons","slug":"stats-grid-icons","code":"import { createStyles, Group, Paper, Text, ThemeIcon, SimpleGrid } from '@mantine/core';\nimport { IconArrowUpRight, IconArrowDownRight } from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  root: {\n    padding: `calc(${theme.spacing.xl} * 1.5)`,\n  },\n\n  label: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n  },\n}));\n\ninterface StatsGridIconsProps {\n  data: { title: string; value: string; diff: number }[];\n}\n\nexport function StatsGridIcons({ data }: StatsGridIconsProps) {\n  const { classes } = useStyles();\n  const stats = data.map((stat) => {\n    const DiffIcon = stat.diff > 0 ? IconArrowUpRight : IconArrowDownRight;\n\n    return (\n      <Paper withBorder p=\"md\" radius=\"md\" key={stat.title}>\n        <Group position=\"apart\">\n          <div>\n            <Text c=\"dimmed\" tt=\"uppercase\" fw={700} fz=\"xs\" className={classes.label}>\n              {stat.title}\n            </Text>\n            <Text fw={700} fz=\"xl\">\n              {stat.value}\n            </Text>\n          </div>\n          <ThemeIcon\n            color=\"gray\"\n            variant=\"light\"\n            sx={(theme) => ({ color: stat.diff > 0 ? theme.colors.teal[6] : theme.colors.red[6] })}\n            size={38}\n            radius=\"md\"\n          >\n            <DiffIcon size=\"1.8rem\" stroke={1.5} />\n          </ThemeIcon>\n        </Group>\n        <Text c=\"dimmed\" fz=\"sm\" mt=\"md\">\n          <Text component=\"span\" c={stat.diff > 0 ? 'teal' : 'red'} fw={700}>\n            {stat.diff}%\n          </Text>{' '}\n          {stat.diff > 0 ? 'increase' : 'decrease'} compared to last month\n        </Text>\n      </Paper>\n    );\n  });\n\n  return (\n    <div className={classes.root}>\n      <SimpleGrid cols={3} breakpoints={[{ maxWidth: 'sm', cols: 1 }]}>\n        {stats}\n      </SimpleGrid>\n    </div>\n  );\n}\n","attributes":{"title":"Stats grid with diff icons","category":"stats","author":"rtivital","responsive":true,"dimmed":true,"dependencies":["/core/group/","/core/paper/","/core/text/","/core/theme-icon/","/core/simple-grid/","@tabler/icons-react"],"props":{"data":[{"title":"Revenue","value":"$13,456","diff":34},{"title":"Profit","value":"$4,145","diff":-13},{"title":"Coupons usage","value":"745","diff":18}]},"canvas":{"center":false}}},{"component":"StatsGroup","slug":"stats-group","code":"import { createStyles, Text, rem } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  root: {\n    display: 'flex',\n    backgroundImage: `linear-gradient(-60deg, ${theme.colors[theme.primaryColor][4]} 0%, ${\n      theme.colors[theme.primaryColor][7]\n    } 100%)`,\n    padding: `calc(${theme.spacing.xl} * 1.5)`,\n    borderRadius: theme.radius.md,\n\n    [theme.fn.smallerThan('sm')]: {\n      flexDirection: 'column',\n    },\n  },\n\n  title: {\n    color: theme.white,\n    textTransform: 'uppercase',\n    fontWeight: 700,\n    fontSize: theme.fontSizes.sm,\n  },\n\n  count: {\n    color: theme.white,\n    fontSize: rem(32),\n    lineHeight: 1,\n    fontWeight: 700,\n    marginBottom: theme.spacing.md,\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n  },\n\n  description: {\n    color: theme.colors[theme.primaryColor][0],\n    fontSize: theme.fontSizes.sm,\n    marginTop: rem(5),\n  },\n\n  stat: {\n    flex: 1,\n\n    '& + &': {\n      paddingLeft: theme.spacing.xl,\n      marginLeft: theme.spacing.xl,\n      borderLeft: `${rem(1)} solid ${theme.colors[theme.primaryColor][3]}`,\n\n      [theme.fn.smallerThan('sm')]: {\n        paddingLeft: 0,\n        marginLeft: 0,\n        borderLeft: 0,\n        paddingTop: theme.spacing.xl,\n        marginTop: theme.spacing.xl,\n        borderTop: `${rem(1)} solid ${theme.colors[theme.primaryColor][3]}`,\n      },\n    },\n  },\n}));\n\ninterface StatsGroupProps {\n  data: { title: string; stats: string; description: string }[];\n}\n\nexport function StatsGroup({ data }: StatsGroupProps) {\n  const { classes } = useStyles();\n  const stats = data.map((stat) => (\n    <div key={stat.title} className={classes.stat}>\n      <Text className={classes.count}>{stat.stats}</Text>\n      <Text className={classes.title}>{stat.title}</Text>\n      <Text className={classes.description}>{stat.description}</Text>\n    </div>\n  ));\n  return <div className={classes.root}>{stats}</div>;\n}\n","attributes":{"title":"Grouped stats","category":"stats","author":"rtivital","withColor":true,"responsive":true,"dependencies":["/core/text/"],"props":{"data":[{"title":"Page views","stats":"456,133","description":"24% more than in the same month last year, 33% more that two years ago"},{"title":"New users","stats":"2,175","description":"13% less compared to last month, new user engagement up by 6%"},{"title":"Completed orders","stats":"1,994","description":"1994 orders were completed this month, 97% satisfaction rate"}]},"canvas":{"center":true,"maxWidth":920}}},{"component":"StatsRing","slug":"stats-ring","code":"import { RingProgress, Text, SimpleGrid, Paper, Center, Group } from '@mantine/core';\nimport { IconArrowUpRight, IconArrowDownRight } from '@tabler/icons-react';\n\ninterface StatsRingProps {\n  data: {\n    label: string;\n    stats: string;\n    progress: number;\n    color: string;\n    icon: 'up' | 'down';\n  }[];\n}\n\nconst icons = {\n  up: IconArrowUpRight,\n  down: IconArrowDownRight,\n};\n\nexport function StatsRing({ data }: StatsRingProps) {\n  const stats = data.map((stat) => {\n    const Icon = icons[stat.icon];\n    return (\n      <Paper withBorder radius=\"md\" p=\"xs\" key={stat.label}>\n        <Group>\n          <RingProgress\n            size={80}\n            roundCaps\n            thickness={8}\n            sections={[{ value: stat.progress, color: stat.color }]}\n            label={\n              <Center>\n                <Icon size=\"1.4rem\" stroke={1.5} />\n              </Center>\n            }\n          />\n\n          <div>\n            <Text color=\"dimmed\" size=\"xs\" transform=\"uppercase\" weight={700}>\n              {stat.label}\n            </Text>\n            <Text weight={700} size=\"xl\">\n              {stat.stats}\n            </Text>\n          </div>\n        </Group>\n      </Paper>\n    );\n  });\n\n  return (\n    <SimpleGrid cols={3} breakpoints={[{ maxWidth: 'sm', cols: 1 }]}>\n      {stats}\n    </SimpleGrid>\n  );\n}\n","attributes":{"title":"Stats with ring progress","category":"stats","author":"rtivital","responsive":true,"dimmed":true,"dependencies":["/core/paper/","/core/ring-progress/","/core/center/","/core/text/","/core/group","/core/paper/","/core/simple-grid/","@tabler/icons-react"],"props":{"data":[{"label":"Page views","stats":"456,578","progress":65,"color":"teal","icon":"up"},{"label":"New users","stats":"2,550","progress":72,"color":"blue","icon":"up"},{"label":"Orders","stats":"4,735","progress":52,"color":"red","icon":"down"}]},"canvas":{"center":true,"maxWidth":840}}},{"component":"StatsRingCard","slug":"stats-ring-card","code":"import { createStyles, Text, Card, RingProgress, Group, rem } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  card: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n  },\n\n  label: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    fontWeight: 700,\n    lineHeight: 1,\n  },\n\n  lead: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    fontWeight: 700,\n    fontSize: rem(22),\n    lineHeight: 1,\n  },\n\n  inner: {\n    display: 'flex',\n\n    [theme.fn.smallerThan('xs')]: {\n      flexDirection: 'column',\n    },\n  },\n\n  ring: {\n    flex: 1,\n    display: 'flex',\n    justifyContent: 'flex-end',\n\n    [theme.fn.smallerThan('xs')]: {\n      justifyContent: 'center',\n      marginTop: theme.spacing.md,\n    },\n  },\n}));\n\ninterface StatsRingCardProps {\n  title: string;\n  completed: number;\n  total: number;\n  stats: {\n    value: number;\n    label: string;\n  }[];\n}\n\nexport function StatsRingCard({ title, completed, total, stats }: StatsRingCardProps) {\n  const { classes, theme } = useStyles();\n  const items = stats.map((stat) => (\n    <div key={stat.label}>\n      <Text className={classes.label}>{stat.value}</Text>\n      <Text size=\"xs\" color=\"dimmed\">\n        {stat.label}\n      </Text>\n    </div>\n  ));\n\n  return (\n    <Card withBorder p=\"xl\" radius=\"md\" className={classes.card}>\n      <div className={classes.inner}>\n        <div>\n          <Text fz=\"xl\" className={classes.label}>\n            {title}\n          </Text>\n          <div>\n            <Text className={classes.lead} mt={30}>\n              {completed}\n            </Text>\n            <Text fz=\"xs\" color=\"dimmed\">\n              Completed\n            </Text>\n          </div>\n          <Group mt=\"lg\">{items}</Group>\n        </div>\n\n        <div className={classes.ring}>\n          <RingProgress\n            roundCaps\n            thickness={6}\n            size={150}\n            sections={[{ value: (completed / total) * 100, color: theme.primaryColor }]}\n            label={\n              <div>\n                <Text ta=\"center\" fz=\"lg\" className={classes.label}>\n                  {((completed / total) * 100).toFixed(0)}%\n                </Text>\n                <Text ta=\"center\" fz=\"xs\" c=\"dimmed\">\n                  Completed\n                </Text>\n              </div>\n            }\n          />\n        </div>\n      </div>\n    </Card>\n  );\n}\n","attributes":{"title":"Stats card with progress","category":"app-cards","author":"rtivital","withColor":true,"responsive":true,"dimmed":true,"dependencies":["/core/card/","/core/text/","/core/group/","/core/ring-progress/"],"props":{"title":"Project tasks","completed":1887,"total":2334,"stats":[{"value":447,"label":"Remaining"},{"value":76,"label":"In progress"}]},"canvas":{"center":true,"maxWidth":420}}},{"component":"StatsSegments","slug":"stats-segments","code":"import { createStyles, Progress, Box, Text, Group, Paper, SimpleGrid, rem } from '@mantine/core';\nimport { IconArrowUpRight, IconDeviceAnalytics } from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  progressLabel: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    lineHeight: 1,\n    fontSize: theme.fontSizes.sm,\n  },\n\n  stat: {\n    borderBottom: `${rem(3)} solid`,\n    paddingBottom: rem(5),\n  },\n\n  statCount: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    lineHeight: 1.3,\n  },\n\n  diff: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    display: 'flex',\n    alignItems: 'center',\n  },\n\n  icon: {\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[3] : theme.colors.gray[4],\n  },\n}));\n\ninterface StatsSegmentsProps {\n  total: string;\n  diff: number;\n  data: {\n    label: string;\n    count: string;\n    part: number;\n    color: string;\n  }[];\n}\n\nexport function StatsSegments({ total, diff, data }: StatsSegmentsProps) {\n  const { classes } = useStyles();\n\n  const segments = data.map((segment) => ({\n    value: segment.part,\n    color: segment.color,\n    label: segment.part > 10 ? `${segment.part}%` : undefined,\n  }));\n\n  const descriptions = data.map((stat) => (\n    <Box key={stat.label} sx={{ borderBottomColor: stat.color }} className={classes.stat}>\n      <Text tt=\"uppercase\" fz=\"xs\" c=\"dimmed\" fw={700}>\n        {stat.label}\n      </Text>\n\n      <Group position=\"apart\" align=\"flex-end\" spacing={0}>\n        <Text fw={700}>{stat.count}</Text>\n        <Text c={stat.color} fw={700} size=\"sm\" className={classes.statCount}>\n          {stat.part}%\n        </Text>\n      </Group>\n    </Box>\n  ));\n\n  return (\n    <Paper withBorder p=\"md\" radius=\"md\">\n      <Group position=\"apart\">\n        <Group align=\"flex-end\" spacing=\"xs\">\n          <Text fz=\"xl\" fw={700}>\n            {total}\n          </Text>\n          <Text c=\"teal\" className={classes.diff} fz=\"sm\" fw={700}>\n            <span>{diff}%</span>\n            <IconArrowUpRight size=\"1rem\" style={{ marginBottom: rem(4) }} stroke={1.5} />\n          </Text>\n        </Group>\n        <IconDeviceAnalytics size=\"1.4rem\" className={classes.icon} stroke={1.5} />\n      </Group>\n\n      <Text c=\"dimmed\" fz=\"sm\">\n        Page views compared to previous month\n      </Text>\n\n      <Progress\n        sections={segments}\n        size={34}\n        classNames={{ label: classes.progressLabel }}\n        mt={40}\n      />\n      <SimpleGrid cols={3} breakpoints={[{ maxWidth: 'xs', cols: 1 }]} mt=\"xl\">\n        {descriptions}\n      </SimpleGrid>\n    </Paper>\n  );\n}\n","attributes":{"title":"Stats with segments","category":"stats","author":"rtivital","responsive":true,"dimmed":true,"dependencies":["/core/progress/","/core/box/","/core/text/","/core/group/","/core/paper/","/core/simple-grid/","@tabler/icons-react"],"props":{"total":"345,765","diff":18,"data":[{"label":"Mobile","count":"204,001","part":59,"color":"#47d6ab"},{"label":"Desktop","count":"121,017","part":35,"color":"#03141a"},{"label":"Tablet","count":"31,118","part":6,"color":"#4fcdf7"}]},"canvas":{"center":true,"maxWidth":440}}},{"component":"Subgrid","slug":"subgrid","code":"import { SimpleGrid, Skeleton, Container, Stack, useMantineTheme, px } from '@mantine/core';\n\nconst getChild = (height: number) => <Skeleton height={height} radius=\"md\" animate={false} />;\nconst BASE_HEIGHT = 360;\nconst getSubHeight = (children: number, spacing: number) =>\n  BASE_HEIGHT / children - spacing * ((children - 1) / children);\n\nexport function Subgrid() {\n  const theme = useMantineTheme();\n  return (\n    <Container my=\"md\">\n      <SimpleGrid cols={4} breakpoints={[{ maxWidth: 'xs', cols: 1 }]}>\n        {getChild(BASE_HEIGHT)}\n        <Stack>\n          {getChild(getSubHeight(2, px(theme.spacing.md)))}\n          {getChild(getSubHeight(2, px(theme.spacing.md)))}\n        </Stack>\n        <Stack>\n          {getChild(getSubHeight(3, px(theme.spacing.md)))}\n          {getChild(getSubHeight(3, px(theme.spacing.md)))}\n          {getChild(getSubHeight(3, px(theme.spacing.md)))}\n        </Stack>\n        {getChild(BASE_HEIGHT)}\n      </SimpleGrid>\n    </Container>\n  );\n}\n","attributes":{"title":"Grid with vertical items","category":"grids","author":"rtivital","responsive":true,"dependencies":["/core/simple-grid/","/core/skeleton/","/core/container/"],"canvas":{"center":false}}},{"component":"SwitchToggle","slug":"switch-toggle","code":"import { Switch, Group, useMantineColorScheme, useMantineTheme } from '@mantine/core';\nimport { IconSun, IconMoonStars } from '@tabler/icons-react';\n\nexport function SwitchToggle() {\n  const { colorScheme, toggleColorScheme } = useMantineColorScheme();\n  const theme = useMantineTheme();\n\n  return (\n    <Group position=\"center\" my={30}>\n      <Switch\n        checked={colorScheme === 'dark'}\n        onChange={() => toggleColorScheme()}\n        size=\"lg\"\n        onLabel={<IconSun color={theme.white} size=\"1.25rem\" stroke={1.5} />}\n        offLabel={<IconMoonStars color={theme.colors.gray[6]} size=\"1.25rem\" stroke={1.5} />}\n      />\n    </Group>\n  );\n}\n","attributes":{"title":"Color scheme toggle","category":"color-scheme","author":"rtivital","withColor":true,"dependencies":["/core/switch/","@tabler/icons-react"],"canvas":{"center":false}}},{"component":"SwitchesCard","slug":"switches-card","code":"import { createStyles, Card, Group, Switch, Text, rem } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  card: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n  },\n\n  item: {\n    '& + &': {\n      paddingTop: theme.spacing.sm,\n      marginTop: theme.spacing.sm,\n      borderTop: `${rem(1)} solid ${\n        theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[2]\n      }`,\n    },\n  },\n\n  switch: {\n    '& *': {\n      cursor: 'pointer',\n    },\n  },\n\n  title: {\n    lineHeight: 1,\n  },\n}));\n\ninterface SwitchesCardProps {\n  title: string;\n  description: string;\n  data: {\n    title: string;\n    description: string;\n  }[];\n}\n\nexport function SwitchesCard({ title, description, data }: SwitchesCardProps) {\n  const { classes } = useStyles();\n\n  const items = data.map((item) => (\n    <Group position=\"apart\" className={classes.item} noWrap spacing=\"xl\">\n      <div>\n        <Text>{item.title}</Text>\n        <Text size=\"xs\" color=\"dimmed\">\n          {item.description}\n        </Text>\n      </div>\n      <Switch onLabel=\"ON\" offLabel=\"OFF\" className={classes.switch} size=\"lg\" />\n    </Group>\n  ));\n\n  return (\n    <Card withBorder radius=\"md\" p=\"xl\" className={classes.card}>\n      <Text fz=\"lg\" className={classes.title} fw={500}>\n        {title}\n      </Text>\n      <Text fz=\"xs\" c=\"dimmed\" mt={3} mb=\"xl\">\n        {description}\n      </Text>\n      {items}\n    </Card>\n  );\n}\n","attributes":{"title":"Card with switches","category":"app-cards","author":"rtivital","withColor":true,"responsive":true,"dimmed":true,"dependencies":[],"props":{"title":"Configure notifications","description":"Choose what notifications you want to receive","data":[{"title":"Messages","description":"Direct messages you have received from other users"},{"title":"Review requests","description":"Code review requests from your team members"},{"title":"Comments","description":"Daily digest with comments on your posts"},{"title":"Recommendations","description":"Digest with best community posts from previous week"}]},"canvas":{"center":true,"maxWidth":540}}},{"component":"TableOfContents","slug":"table-of-contents","code":"import { createStyles, Box, Text, Group, rem } from '@mantine/core';\nimport { IconListSearch } from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  link: {\n    ...theme.fn.focusStyles(),\n    display: 'block',\n    textDecoration: 'none',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.black,\n    lineHeight: 1.2,\n    fontSize: theme.fontSizes.sm,\n    padding: theme.spacing.xs,\n    borderTopRightRadius: theme.radius.sm,\n    borderBottomRightRadius: theme.radius.sm,\n    borderLeft: `${rem(1)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[3]\n    }`,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n    },\n  },\n\n  linkActive: {\n    fontWeight: 500,\n    borderLeftColor: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 6 : 7],\n    color: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 2 : 7],\n\n    '&, &:hover': {\n      backgroundColor:\n        theme.colorScheme === 'dark'\n          ? theme.fn.rgba(theme.colors[theme.primaryColor][9], 0.25)\n          : theme.colors[theme.primaryColor][0],\n    },\n  },\n}));\n\ninterface TableOfContentsProps {\n  links: { label: string; link: string; order: number }[];\n  active: string;\n}\n\nexport function TableOfContents({ links, active }: TableOfContentsProps) {\n  const { classes, cx } = useStyles();\n  const items = links.map((item) => (\n    <Box<'a'>\n      component=\"a\"\n      href={item.link}\n      onClick={(event) => event.preventDefault()}\n      key={item.label}\n      className={cx(classes.link, { [classes.linkActive]: active === item.link })}\n      sx={(theme) => ({ paddingLeft: `calc(${item.order} * ${theme.spacing.md})` })}\n    >\n      {item.label}\n    </Box>\n  ));\n\n  return (\n    <div>\n      <Group mb=\"md\">\n        <IconListSearch size=\"1.1rem\" stroke={1.5} />\n        <Text>Table of contents</Text>\n      </Group>\n      {items}\n    </div>\n  );\n}\n","attributes":{"title":"Table of contents","category":"toc","author":"rtivital","withColor":true,"dependencies":["/core/box/","/core/text/","/core/text/","@tabler/icons-react"],"props":{"active":"#overlays","links":[{"label":"Usage","link":"#usage","order":1},{"label":"Position and placement","link":"#position","order":1},{"label":"With other overlays","link":"#overlays","order":1},{"label":"Manage focus","link":"#focus","order":1},{"label":"Examples","link":"#1","order":1},{"label":"Show on focus","link":"#2","order":2},{"label":"Show on hover","link":"#3","order":2},{"label":"With form","link":"#4","order":2}]},"canvas":{"center":true,"maxWidth":280}}},{"component":"TableOfContentsFloating","slug":"table-of-contents-floating","code":"import { useState } from 'react';\nimport { createStyles, Box, Text, Group, rem } from '@mantine/core';\nimport { IconListSearch } from '@tabler/icons-react';\n\nconst LINK_HEIGHT = 38;\nconst INDICATOR_SIZE = 10;\nconst INDICATOR_OFFSET = (LINK_HEIGHT - INDICATOR_SIZE) / 2;\n\nconst useStyles = createStyles((theme) => ({\n  link: {\n    ...theme.fn.focusStyles(),\n    display: 'block',\n    textDecoration: 'none',\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.black,\n    lineHeight: rem(LINK_HEIGHT),\n    fontSize: theme.fontSizes.sm,\n    height: rem(LINK_HEIGHT),\n    borderTopRightRadius: theme.radius.sm,\n    borderBottomRightRadius: theme.radius.sm,\n    borderLeft: `${rem(2)} solid ${\n      theme.colorScheme === 'dark' ? theme.colors.dark[4] : theme.colors.gray[2]\n    }`,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n    },\n  },\n\n  linkActive: {\n    fontWeight: 500,\n    color: theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 3 : 7],\n  },\n\n  links: {\n    position: 'relative',\n  },\n\n  indicator: {\n    transition: 'transform 150ms ease',\n    border: `${rem(2)} solid ${\n      theme.colors[theme.primaryColor][theme.colorScheme === 'dark' ? 3 : 7]\n    }`,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n    height: rem(INDICATOR_SIZE),\n    width: rem(INDICATOR_SIZE),\n    borderRadius: rem(INDICATOR_SIZE),\n    position: 'absolute',\n    left: `calc(-${rem(INDICATOR_SIZE)} / 2 + ${rem(1)})`,\n  },\n}));\n\ninterface TableOfContentsFloatingProps {\n  links: { label: string; link: string; order: number }[];\n}\n\nexport function TableOfContentsFloating({ links }: TableOfContentsFloatingProps) {\n  const { classes, cx } = useStyles();\n  const [active, setActive] = useState(2);\n\n  const items = links.map((item, index) => (\n    <Box<'a'>\n      component=\"a\"\n      href={item.link}\n      onClick={(event) => {\n        event.preventDefault();\n        setActive(index);\n      }}\n      key={item.label}\n      className={cx(classes.link, { [classes.linkActive]: active === index })}\n      sx={(theme) => ({ paddingLeft: `calc(${item.order} * ${theme.spacing.lg})` })}\n    >\n      {item.label}\n    </Box>\n  ));\n\n  return (\n    <div>\n      <Group mb=\"md\">\n        <IconListSearch size=\"1.1rem\" stroke={1.5} />\n        <Text>Table of contents</Text>\n      </Group>\n      <div className={classes.links}>\n        <div\n          className={classes.indicator}\n          style={{ transform: `translateY(${rem(active * LINK_HEIGHT + INDICATOR_OFFSET)})` }}\n        />\n        {items}\n      </div>\n    </div>\n  );\n}\n","attributes":{"title":"Table of contents indicator","category":"toc","author":"rtivital","withColor":true,"dependencies":["/core/box/","/core/text/","/core/text/","@tabler/icons-react"],"props":{"links":[{"label":"Usage","link":"#usage","order":1},{"label":"Position and placement","link":"#position","order":1},{"label":"With other overlays","link":"#overlays","order":1},{"label":"Manage focus","link":"#focus","order":1},{"label":"Examples","link":"#1","order":1},{"label":"Show on focus","link":"#2","order":2},{"label":"Show on hover","link":"#3","order":2},{"label":"With form","link":"#4","order":2}]},"canvas":{"center":true,"maxWidth":280}}},{"component":"TableReviews","slug":"table-reviews","code":"import { createStyles, Table, Progress, Anchor, Text, Group, ScrollArea, rem } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  progressBar: {\n    '&:not(:first-of-type)': {\n      borderLeft: `${rem(3)} solid ${\n        theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white\n      }`,\n    },\n  },\n}));\n\ninterface TableReviewsProps {\n  data: {\n    title: string;\n    author: string;\n    year: number;\n    reviews: { positive: number; negative: number };\n  }[];\n}\n\nexport function TableReviews({ data }: TableReviewsProps) {\n  const { classes, theme } = useStyles();\n\n  const rows = data.map((row) => {\n    const totalReviews = row.reviews.negative + row.reviews.positive;\n    const positiveReviews = (row.reviews.positive / totalReviews) * 100;\n    const negativeReviews = (row.reviews.negative / totalReviews) * 100;\n\n    return (\n      <tr key={row.title}>\n        <td>\n          <Anchor component=\"button\" fz=\"sm\">\n            {row.title}\n          </Anchor>\n        </td>\n        <td>{row.year}</td>\n        <td>\n          <Anchor component=\"button\" fz=\"sm\">\n            {row.author}\n          </Anchor>\n        </td>\n        <td>{Intl.NumberFormat().format(totalReviews)}</td>\n        <td>\n          <Group position=\"apart\">\n            <Text fz=\"xs\" c=\"teal\" weight={700}>\n              {positiveReviews.toFixed(0)}%\n            </Text>\n            <Text fz=\"xs\" c=\"red\" weight={700}>\n              {negativeReviews.toFixed(0)}%\n            </Text>\n          </Group>\n          <Progress\n            classNames={{ bar: classes.progressBar }}\n            sections={[\n              {\n                value: positiveReviews,\n                color: theme.colorScheme === 'dark' ? theme.colors.teal[9] : theme.colors.teal[6],\n              },\n              {\n                value: negativeReviews,\n                color: theme.colorScheme === 'dark' ? theme.colors.red[9] : theme.colors.red[6],\n              },\n            ]}\n          />\n        </td>\n      </tr>\n    );\n  });\n\n  return (\n    <ScrollArea>\n      <Table sx={{ minWidth: 800 }} verticalSpacing=\"xs\">\n        <thead>\n          <tr>\n            <th>Book title</th>\n            <th>Year</th>\n            <th>Author</th>\n            <th>Reviews</th>\n            <th>Reviews distribution</th>\n          </tr>\n        </thead>\n        <tbody>{rows}</tbody>\n      </Table>\n    </ScrollArea>\n  );\n}\n","attributes":{"title":"Table with progress","category":"tables","author":"rtivital","dependencies":["/core/table/","/core/progress/","/core/text/","/core/group/","/core/scroll-area/"],"props":{"data":[{"title":"Foundation","author":"Isaac Asimov","year":1951,"reviews":{"positive":2223,"negative":259}},{"title":"Frankenstein","author":"Mary Shelley","year":1818,"reviews":{"positive":5677,"negative":1265}},{"title":"Solaris","author":"Stanislaw Lem","year":1961,"reviews":{"positive":3487,"negative":1845}},{"title":"Dune","author":"Frank Herbert","year":1965,"reviews":{"positive":8576,"negative":663}},{"title":"The Left Hand of Darkness","author":"Ursula K. Le Guin","year":1969,"reviews":{"positive":6631,"negative":993}},{"title":"A Scanner Darkly","author":"Philip K Dick","year":1977,"reviews":{"positive":8124,"negative":1847}}]},"canvas":{"center":true,"maxWidth":920}}},{"component":"TableScrollArea","slug":"table-scroll-area","code":"import { useState } from 'react';\nimport { createStyles, Table, ScrollArea, rem } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  header: {\n    position: 'sticky',\n    top: 0,\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n    transition: 'box-shadow 150ms ease',\n\n    '&::after': {\n      content: '\"\"',\n      position: 'absolute',\n      left: 0,\n      right: 0,\n      bottom: 0,\n      borderBottom: `${rem(1)} solid ${\n        theme.colorScheme === 'dark' ? theme.colors.dark[3] : theme.colors.gray[2]\n      }`,\n    },\n  },\n\n  scrolled: {\n    boxShadow: theme.shadows.sm,\n  },\n}));\n\ninterface TableScrollAreaProps {\n  data: { name: string; email: string; company: string }[];\n}\n\nexport function TableScrollArea({ data }: TableScrollAreaProps) {\n  const { classes, cx } = useStyles();\n  const [scrolled, setScrolled] = useState(false);\n\n  const rows = data.map((row) => (\n    <tr key={row.name}>\n      <td>{row.name}</td>\n      <td>{row.email}</td>\n      <td>{row.company}</td>\n    </tr>\n  ));\n\n  return (\n    <ScrollArea h={300} onScrollPositionChange={({ y }) => setScrolled(y !== 0)}>\n      <Table miw={700}>\n        <thead className={cx(classes.header, { [classes.scrolled]: scrolled })}>\n          <tr>\n            <th>Name</th>\n            <th>Email</th>\n            <th>Company</th>\n          </tr>\n        </thead>\n        <tbody>{rows}</tbody>\n      </Table>\n    </ScrollArea>\n  );\n}\n","attributes":{"title":"Table with sticky header","category":"tables","author":"rtivital","dependencies":["/core/table/","/core/scroll-area/"],"props":{"data":[{"name":"Athena Weissnat","company":"Little - Rippin","email":"Elouise.Prohaska@yahoo.com"},{"name":"Deangelo Runolfsson","company":"Greenfelder - Krajcik","email":"Kadin_Trantow87@yahoo.com"},{"name":"Danny Carter","company":"Kohler and Sons","email":"Marina3@hotmail.com"},{"name":"Trace Tremblay PhD","company":"Crona, Aufderhar and Senger","email":"Antonina.Pouros@yahoo.com"},{"name":"Derek Dibbert","company":"Gottlieb LLC","email":"Abagail29@hotmail.com"},{"name":"Viola Bernhard","company":"Funk, Rohan and Kreiger","email":"Jamie23@hotmail.com"},{"name":"Austin Jacobi","company":"Botsford - Corwin","email":"Genesis42@yahoo.com"},{"name":"Hershel Mosciski","company":"Okuneva, Farrell and Kilback","email":"Idella.Stehr28@yahoo.com"},{"name":"Mylene Ebert","company":"Kirlin and Sons","email":"Hildegard17@hotmail.com"},{"name":"Lou Trantow","company":"Parisian - Lemke","email":"Hillard.Barrows1@hotmail.com"},{"name":"Dariana Weimann","company":"Schowalter - Donnelly","email":"Colleen80@gmail.com"},{"name":"Dr. Christy Herman","company":"VonRueden - Labadie","email":"Lilyan98@gmail.com"},{"name":"Katelin Schuster","company":"Jacobson - Smitham","email":"Erich_Brekke76@gmail.com"},{"name":"Melyna Macejkovic","company":"Schuster LLC","email":"Kylee4@yahoo.com"},{"name":"Pinkie Rice","company":"Wolf, Trantow and Zulauf","email":"Fiona.Kutch@hotmail.com"},{"name":"Brain Kreiger","company":"Lueilwitz Group","email":"Rico98@hotmail.com"},{"name":"Myrtice McGlynn","company":"Feest, Beahan and Johnston","email":"Julius_Tremblay29@hotmail.com"},{"name":"Chester Carter PhD","company":"Gaylord - Labadie","email":"Jensen_McKenzie@hotmail.com"},{"name":"Mrs. Ericka Bahringer","company":"Conn and Sons","email":"Lisandro56@hotmail.com"},{"name":"Korbin Buckridge Sr.","company":"Mraz, Rolfson and Predovic","email":"Leatha9@yahoo.com"},{"name":"Dr. Daisy Becker","company":"Carter - Mueller","email":"Keaton_Sanford27@gmail.com"},{"name":"Derrick Buckridge Sr.","company":"O'Reilly LLC","email":"Kay83@yahoo.com"},{"name":"Ernie Hickle","company":"Terry, O'Reilly and Farrell","email":"Americo.Leffler89@gmail.com"},{"name":"Jewell Littel","company":"O'Connell Group","email":"Hester.Hettinger9@hotmail.com"},{"name":"Cyrus Howell","company":"Windler, Yost and Fadel","email":"Rick0@gmail.com"},{"name":"Dr. Orie Jast","company":"Hilll - Pacocha","email":"Anna56@hotmail.com"},{"name":"Luisa Murphy","company":"Turner and Sons","email":"Christine32@yahoo.com"},{"name":"Lea Witting","company":"Hodkiewicz Inc","email":"Ford_Kovacek4@yahoo.com"},{"name":"Kelli Runolfsson","company":"Feest - O'Hara","email":"Dimitri87@yahoo.com"},{"name":"Brook Gaylord","company":"Conn, Huel and Nader","email":"Immanuel77@gmail.com"}]},"canvas":{"center":true,"maxWidth":920}}},{"component":"TableSelection","slug":"table-selection","code":"import { useState } from 'react';\nimport { createStyles, Table, Checkbox, ScrollArea, Group, Avatar, Text, rem } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  rowSelected: {\n    backgroundColor:\n      theme.colorScheme === 'dark'\n        ? theme.fn.rgba(theme.colors[theme.primaryColor][7], 0.2)\n        : theme.colors[theme.primaryColor][0],\n  },\n}));\n\ninterface TableSelectionProps {\n  data: { avatar: string; name: string; email: string; job: string; id: string }[];\n}\n\nexport function TableSelection({ data }: TableSelectionProps) {\n  const { classes, cx } = useStyles();\n  const [selection, setSelection] = useState(['1']);\n  const toggleRow = (id: string) =>\n    setSelection((current) =>\n      current.includes(id) ? current.filter((item) => item !== id) : [...current, id]\n    );\n  const toggleAll = () =>\n    setSelection((current) => (current.length === data.length ? [] : data.map((item) => item.id)));\n\n  const rows = data.map((item) => {\n    const selected = selection.includes(item.id);\n    return (\n      <tr key={item.id} className={cx({ [classes.rowSelected]: selected })}>\n        <td>\n          <Checkbox\n            checked={selection.includes(item.id)}\n            onChange={() => toggleRow(item.id)}\n            transitionDuration={0}\n          />\n        </td>\n        <td>\n          <Group spacing=\"sm\">\n            <Avatar size={26} src={item.avatar} radius={26} />\n            <Text size=\"sm\" weight={500}>\n              {item.name}\n            </Text>\n          </Group>\n        </td>\n        <td>{item.email}</td>\n        <td>{item.job}</td>\n      </tr>\n    );\n  });\n\n  return (\n    <ScrollArea>\n      <Table miw={800} verticalSpacing=\"sm\">\n        <thead>\n          <tr>\n            <th style={{ width: rem(40) }}>\n              <Checkbox\n                onChange={toggleAll}\n                checked={selection.length === data.length}\n                indeterminate={selection.length > 0 && selection.length !== data.length}\n                transitionDuration={0}\n              />\n            </th>\n            <th>User</th>\n            <th>Email</th>\n            <th>Job</th>\n          </tr>\n        </thead>\n        <tbody>{rows}</tbody>\n      </Table>\n    </ScrollArea>\n  );\n}\n","attributes":{"title":"Table with selection","category":"tables","author":"rtivital","withColor":true,"dependencies":["/core/table/","/core/text/","/core/checkbox"],"props":{"data":[{"id":"1","avatar":"https://images.unsplash.com/photo-1624298357597-fd92dfbec01d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80","name":"Robert Wolfkisser","job":"Engineer","email":"rob_wolf@gmail.com"},{"id":"2","avatar":"https://images.unsplash.com/photo-1586297135537-94bc9ba060aa?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80","name":"Jill Jailbreaker","job":"Engineer","email":"jj@breaker.com"},{"id":"3","avatar":"https://images.unsplash.com/photo-1632922267756-9b71242b1592?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80","name":"Henry Silkeater","job":"Designer","email":"henry@silkeater.io"},{"id":"4","avatar":"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80","name":"Bill Horsefighter","job":"Designer","email":"bhorsefighter@gmail.com"},{"id":"5","avatar":"https://images.unsplash.com/photo-1630841539293-bd20634c5d72?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80","name":"Jeremy Footviewer","job":"Manager","email":"jeremy@foot.dev"}]},"canvas":{"center":true,"maxWidth":800}}},{"component":"TableSort","slug":"table-sort","code":"import { useState } from 'react';\nimport {\n  createStyles,\n  Table,\n  ScrollArea,\n  UnstyledButton,\n  Group,\n  Text,\n  Center,\n  TextInput,\n  rem,\n} from '@mantine/core';\nimport { keys } from '@mantine/utils';\nimport { IconSelector, IconChevronDown, IconChevronUp, IconSearch } from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  th: {\n    padding: '0 !important',\n  },\n\n  control: {\n    width: '100%',\n    padding: `${theme.spacing.xs} ${theme.spacing.md}`,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[6] : theme.colors.gray[0],\n    },\n  },\n\n  icon: {\n    width: rem(21),\n    height: rem(21),\n    borderRadius: rem(21),\n  },\n}));\n\ninterface RowData {\n  name: string;\n  email: string;\n  company: string;\n}\n\ninterface TableSortProps {\n  data: RowData[];\n}\n\ninterface ThProps {\n  children: React.ReactNode;\n  reversed: boolean;\n  sorted: boolean;\n  onSort(): void;\n}\n\nfunction Th({ children, reversed, sorted, onSort }: ThProps) {\n  const { classes } = useStyles();\n  const Icon = sorted ? (reversed ? IconChevronUp : IconChevronDown) : IconSelector;\n  return (\n    <th className={classes.th}>\n      <UnstyledButton onClick={onSort} className={classes.control}>\n        <Group position=\"apart\">\n          <Text fw={500} fz=\"sm\">\n            {children}\n          </Text>\n          <Center className={classes.icon}>\n            <Icon size=\"0.9rem\" stroke={1.5} />\n          </Center>\n        </Group>\n      </UnstyledButton>\n    </th>\n  );\n}\n\nfunction filterData(data: RowData[], search: string) {\n  const query = search.toLowerCase().trim();\n  return data.filter((item) =>\n    keys(data[0]).some((key) => item[key].toLowerCase().includes(query))\n  );\n}\n\nfunction sortData(\n  data: RowData[],\n  payload: { sortBy: keyof RowData | null; reversed: boolean; search: string }\n) {\n  const { sortBy } = payload;\n\n  if (!sortBy) {\n    return filterData(data, payload.search);\n  }\n\n  return filterData(\n    [...data].sort((a, b) => {\n      if (payload.reversed) {\n        return b[sortBy].localeCompare(a[sortBy]);\n      }\n\n      return a[sortBy].localeCompare(b[sortBy]);\n    }),\n    payload.search\n  );\n}\n\nexport function TableSort({ data }: TableSortProps) {\n  const [search, setSearch] = useState('');\n  const [sortedData, setSortedData] = useState(data);\n  const [sortBy, setSortBy] = useState<keyof RowData | null>(null);\n  const [reverseSortDirection, setReverseSortDirection] = useState(false);\n\n  const setSorting = (field: keyof RowData) => {\n    const reversed = field === sortBy ? !reverseSortDirection : false;\n    setReverseSortDirection(reversed);\n    setSortBy(field);\n    setSortedData(sortData(data, { sortBy: field, reversed, search }));\n  };\n\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.currentTarget;\n    setSearch(value);\n    setSortedData(sortData(data, { sortBy, reversed: reverseSortDirection, search: value }));\n  };\n\n  const rows = sortedData.map((row) => (\n    <tr key={row.name}>\n      <td>{row.name}</td>\n      <td>{row.email}</td>\n      <td>{row.company}</td>\n    </tr>\n  ));\n\n  return (\n    <ScrollArea>\n      <TextInput\n        placeholder=\"Search by any field\"\n        mb=\"md\"\n        icon={<IconSearch size=\"0.9rem\" stroke={1.5} />}\n        value={search}\n        onChange={handleSearchChange}\n      />\n      <Table horizontalSpacing=\"md\" verticalSpacing=\"xs\" miw={700} sx={{ tableLayout: 'fixed' }}>\n        <thead>\n          <tr>\n            <Th\n              sorted={sortBy === 'name'}\n              reversed={reverseSortDirection}\n              onSort={() => setSorting('name')}\n            >\n              Name\n            </Th>\n            <Th\n              sorted={sortBy === 'email'}\n              reversed={reverseSortDirection}\n              onSort={() => setSorting('email')}\n            >\n              Email\n            </Th>\n            <Th\n              sorted={sortBy === 'company'}\n              reversed={reverseSortDirection}\n              onSort={() => setSorting('company')}\n            >\n              Company\n            </Th>\n          </tr>\n        </thead>\n        <tbody>\n          {rows.length > 0 ? (\n            rows\n          ) : (\n            <tr>\n              <td colSpan={Object.keys(data[0]).length}>\n                <Text weight={500} align=\"center\">\n                  Nothing found\n                </Text>\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </Table>\n    </ScrollArea>\n  );\n}\n","attributes":{"title":"Table with search and sort","category":"tables","author":"rtivital","dependencies":["/core/table/","/core/scroll-area/","/core/button/#unstyled-button","/core/group/","/core/text/","/core/center/","/core/text-input/","@tabler/icons-react"],"props":{"data":[{"name":"Athena Weissnat","company":"Little - Rippin","email":"Elouise.Prohaska@yahoo.com"},{"name":"Deangelo Runolfsson","company":"Greenfelder - Krajcik","email":"Kadin_Trantow87@yahoo.com"},{"name":"Danny Carter","company":"Kohler and Sons","email":"Marina3@hotmail.com"},{"name":"Trace Tremblay PhD","company":"Crona, Aufderhar and Senger","email":"Antonina.Pouros@yahoo.com"},{"name":"Derek Dibbert","company":"Gottlieb LLC","email":"Abagail29@hotmail.com"},{"name":"Viola Bernhard","company":"Funk, Rohan and Kreiger","email":"Jamie23@hotmail.com"},{"name":"Austin Jacobi","company":"Botsford - Corwin","email":"Genesis42@yahoo.com"},{"name":"Hershel Mosciski","company":"Okuneva, Farrell and Kilback","email":"Idella.Stehr28@yahoo.com"},{"name":"Mylene Ebert","company":"Kirlin and Sons","email":"Hildegard17@hotmail.com"},{"name":"Lou Trantow","company":"Parisian - Lemke","email":"Hillard.Barrows1@hotmail.com"},{"name":"Dariana Weimann","company":"Schowalter - Donnelly","email":"Colleen80@gmail.com"},{"name":"Dr. Christy Herman","company":"VonRueden - Labadie","email":"Lilyan98@gmail.com"},{"name":"Katelin Schuster","company":"Jacobson - Smitham","email":"Erich_Brekke76@gmail.com"},{"name":"Melyna Macejkovic","company":"Schuster LLC","email":"Kylee4@yahoo.com"},{"name":"Pinkie Rice","company":"Wolf, Trantow and Zulauf","email":"Fiona.Kutch@hotmail.com"},{"name":"Brain Kreiger","company":"Lueilwitz Group","email":"Rico98@hotmail.com"}]},"canvas":{"center":true,"maxWidth":920}}},{"component":"TaskCard","slug":"task-card","code":"import { Card, Avatar, Text, Progress, Badge, Group, ActionIcon } from '@mantine/core';\nimport { MantineLogo } from '@mantine/ds';\nimport { IconUpload } from '@tabler/icons-react';\n\nconst avatars = [\n  'https://avatars.githubusercontent.com/u/10353856?s=460&u=88394dfd67727327c1f7670a1764dc38a8a24831&v=4',\n  'https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=250&q=80',\n  'https://images.unsplash.com/photo-1508214751196-bcfd4ca60f91?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=255&q=80',\n];\n\nexport function TaskCard() {\n  return (\n    <Card withBorder padding=\"lg\" radius=\"md\">\n      <Group position=\"apart\">\n        <MantineLogo type=\"mark\" size=\"2rem\" />\n        <Badge>12 days left</Badge>\n      </Group>\n\n      <Text fz=\"lg\" fw={500} mt=\"md\">\n        5.3 minor release (September 2022)\n      </Text>\n      <Text fz=\"sm\" c=\"dimmed\" mt={5}>\n        Form context management, Switch, Grid and Indicator components improvements, new hook and\n        10+ other changes\n      </Text>\n\n      <Text c=\"dimmed\" fz=\"sm\" mt=\"md\">\n        Tasks completed:{' '}\n        <Text\n          span\n          fw={500}\n          sx={(theme) => ({ color: theme.colorScheme === 'dark' ? theme.white : theme.black })}\n        >\n          23/36\n        </Text>\n      </Text>\n\n      <Progress value={(23 / 36) * 100} mt={5} />\n\n      <Group position=\"apart\" mt=\"md\">\n        <Avatar.Group spacing=\"sm\">\n          <Avatar src={avatars[0]} radius=\"xl\" />\n          <Avatar src={avatars[1]} radius=\"xl\" />\n          <Avatar src={avatars[2]} radius=\"xl\" />\n          <Avatar radius=\"xl\">+5</Avatar>\n        </Avatar.Group>\n        <ActionIcon variant=\"default\">\n          <IconUpload size=\"1.1rem\" />\n        </ActionIcon>\n      </Group>\n    </Card>\n  );\n}\n","attributes":{"title":"Tasks card","category":"app-cards","dimmed":true,"changelog":"september-2022","author":"rtivital","withColor":true,"dependencies":[],"canvas":{"center":true,"maxWidth":360}}},{"component":"UserButton","slug":"user-button","code":"import {\n  UnstyledButton,\n  UnstyledButtonProps,\n  Group,\n  Avatar,\n  Text,\n  createStyles,\n} from '@mantine/core';\nimport { IconChevronRight } from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  user: {\n    display: 'block',\n    width: '100%',\n    padding: theme.spacing.md,\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[0] : theme.black,\n\n    '&:hover': {\n      backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.colors.gray[0],\n    },\n  },\n}));\n\ninterface UserButtonProps extends UnstyledButtonProps {\n  image: string;\n  name: string;\n  email: string;\n  icon?: React.ReactNode;\n}\n\nexport function UserButton({ image, name, email, icon, ...others }: UserButtonProps) {\n  const { classes } = useStyles();\n\n  return (\n    <UnstyledButton className={classes.user} {...others}>\n      <Group>\n        <Avatar src={image} radius=\"xl\" />\n\n        <div style={{ flex: 1 }}>\n          <Text size=\"sm\" weight={500}>\n            {name}\n          </Text>\n\n          <Text color=\"dimmed\" size=\"xs\">\n            {email}\n          </Text>\n        </div>\n\n        {icon || <IconChevronRight size=\"0.9rem\" stroke={1.5} />}\n      </Group>\n    </UnstyledButton>\n  );\n}\n","attributes":{"title":"User button","category":"users","author":"rtivital","dependencies":["/core/button/#unstyled-button","/core/text/","/core/avatar/"],"props":{"image":"https://images.unsplash.com/photo-1508214751196-bcfd4ca60f91?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=255&q=80","name":"Harriette Spoonlicker","email":"hspoonlicker@outlook.com"},"canvas":{"center":true,"maxWidth":320}}},{"component":"UserCardImage","slug":"user-card-image","code":"import { createStyles, Card, Avatar, Text, Group, Button, rem } from '@mantine/core';\n\nconst useStyles = createStyles((theme) => ({\n  card: {\n    backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white,\n  },\n\n  avatar: {\n    border: `${rem(2)} solid ${theme.colorScheme === 'dark' ? theme.colors.dark[7] : theme.white}`,\n  },\n}));\n\ninterface UserCardImageProps {\n  image: string;\n  avatar: string;\n  name: string;\n  job: string;\n  stats: { label: string; value: string }[];\n}\n\nexport function UserCardImage({ image, avatar, name, job, stats }: UserCardImageProps) {\n  const { classes, theme } = useStyles();\n\n  const items = stats.map((stat) => (\n    <div key={stat.label}>\n      <Text ta=\"center\" fz=\"lg\" fw={500}>\n        {stat.value}\n      </Text>\n      <Text ta=\"center\" fz=\"sm\" c=\"dimmed\">\n        {stat.label}\n      </Text>\n    </div>\n  ));\n\n  return (\n    <Card withBorder padding=\"xl\" radius=\"md\" className={classes.card}>\n      <Card.Section sx={{ backgroundImage: `url(${image})`, height: 140 }} />\n      <Avatar src={avatar} size={80} radius={80} mx=\"auto\" mt={-30} className={classes.avatar} />\n      <Text ta=\"center\" fz=\"lg\" fw={500} mt=\"sm\">\n        {name}\n      </Text>\n      <Text ta=\"center\" fz=\"sm\" c=\"dimmed\">\n        {job}\n      </Text>\n      <Group mt=\"md\" position=\"center\" spacing={30}>\n        {items}\n      </Group>\n      <Button\n        fullWidth\n        radius=\"md\"\n        mt=\"xl\"\n        size=\"md\"\n        color={theme.colorScheme === 'dark' ? undefined : 'dark'}\n      >\n        Follow\n      </Button>\n    </Card>\n  );\n}\n","attributes":{"title":"User card with image","category":"users","author":"rtivital","dimmed":true,"dependencies":["/core/card/"],"props":{"image":"https://images.unsplash.com/photo-1488590528505-98d2b5aba04b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=500&q=80","avatar":"https://images.unsplash.com/photo-1623582854588-d60de57fa33f?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80","name":"Bill Headbanger","job":"Fullstack engineer","stats":[{"value":"34K","label":"Followers"},{"value":"187","label":"Follows"},{"value":"1.6K","label":"Posts"}]},"canvas":{"center":true,"maxWidth":300}}},{"component":"UserInfoAction","slug":"user-info-action","code":"import { Avatar, Text, Button, Paper } from '@mantine/core';\n\ninterface UserInfoActionProps {\n  avatar: string;\n  name: string;\n  email: string;\n  job: string;\n}\n\nexport function UserInfoAction({ avatar, name, email, job }: UserInfoActionProps) {\n  return (\n    <Paper\n      radius=\"md\"\n      withBorder\n      p=\"lg\"\n      sx={(theme) => ({\n        backgroundColor: theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.white,\n      })}\n    >\n      <Avatar src={avatar} size={120} radius={120} mx=\"auto\" />\n      <Text ta=\"center\" fz=\"lg\" weight={500} mt=\"md\">\n        {name}\n      </Text>\n      <Text ta=\"center\" c=\"dimmed\" fz=\"sm\">\n        {email} • {job}\n      </Text>\n\n      <Button variant=\"default\" fullWidth mt=\"md\">\n        Send message\n      </Button>\n    </Paper>\n  );\n}\n","attributes":{"title":"User card with action","category":"users","author":"rtivital","dimmed":true,"dependencies":["/core/button/","/core/text/","/core/avatar/"],"props":{"avatar":"https://images.unsplash.com/photo-1508214751196-bcfd4ca60f91?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=255&q=80","name":"Jane Fingerlicker","email":"jfingerlicker@me.io","job":"Art director"},"canvas":{"center":true,"maxWidth":320}}},{"component":"UserInfoIcons","slug":"user-info-icons","code":"import { createStyles, Avatar, Text, Group } from '@mantine/core';\nimport { IconPhoneCall, IconAt } from '@tabler/icons-react';\n\nconst useStyles = createStyles((theme) => ({\n  icon: {\n    color: theme.colorScheme === 'dark' ? theme.colors.dark[3] : theme.colors.gray[5],\n  },\n\n  name: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n  },\n}));\n\ninterface UserInfoIconsProps {\n  avatar: string;\n  name: string;\n  title: string;\n  phone: string;\n  email: string;\n}\n\nexport function UserInfoIcons({ avatar, name, title, phone, email }: UserInfoIconsProps) {\n  const { classes } = useStyles();\n  return (\n    <div>\n      <Group noWrap>\n        <Avatar src={avatar} size={94} radius=\"md\" />\n        <div>\n          <Text fz=\"xs\" tt=\"uppercase\" fw={700} c=\"dimmed\">\n            {title}\n          </Text>\n\n          <Text fz=\"lg\" fw={500} className={classes.name}>\n            {name}\n          </Text>\n\n          <Group noWrap spacing={10} mt={3}>\n            <IconAt stroke={1.5} size=\"1rem\" className={classes.icon} />\n            <Text fz=\"xs\" c=\"dimmed\">\n              {email}\n            </Text>\n          </Group>\n\n          <Group noWrap spacing={10} mt={5}>\n            <IconPhoneCall stroke={1.5} size=\"1rem\" className={classes.icon} />\n            <Text fz=\"xs\" c=\"dimmed\">\n              {phone}\n            </Text>\n          </Group>\n        </div>\n      </Group>\n    </div>\n  );\n}\n","attributes":{"title":"User info with icons","category":"users","author":"rtivital","dependencies":["/core/avatar/","/core/group/","/core/text/","@tabler/icons-react"],"props":{"avatar":"https://images.unsplash.com/photo-1633332755192-727a05c4013d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80","title":"Software engineer","name":"Robert Glassbreaker","email":"robert@glassbreaker.io","phone":"+11 (876) 890 56 23"},"canvas":{"center":true,"maxWidth":320}}},{"component":"UserMenu","slug":"user-menu","code":"import { Menu, Group, Text, Avatar, useMantineTheme, ActionIcon } from '@mantine/core';\nimport {\n  IconLogout,\n  IconHeart,\n  IconStar,\n  IconMessage,\n  IconSettings,\n  IconPlayerPause,\n  IconTrash,\n  IconSwitchHorizontal,\n  IconChevronRight,\n  IconDots,\n} from '@tabler/icons-react';\n\nexport function UserMenu() {\n  const theme = useMantineTheme();\n  return (\n    <Group position=\"center\">\n      <Menu\n        withArrow\n        width={300}\n        position=\"bottom\"\n        transitionProps={{ transition: 'pop' }}\n        withinPortal\n      >\n        <Menu.Target>\n          <ActionIcon>\n            <IconDots size=\"1rem\" stroke={1.5} />\n          </ActionIcon>\n        </Menu.Target>\n        <Menu.Dropdown>\n          <Menu.Item rightSection={<IconChevronRight size=\"0.9rem\" stroke={1.5} />}>\n            <Group>\n              <Avatar\n                radius=\"xl\"\n                src=\"https://images.unsplash.com/photo-1508214751196-bcfd4ca60f91?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=255&q=80\"\n              />\n\n              <div>\n                <Text weight={500}>Nancy Eggshacker</Text>\n                <Text size=\"xs\" color=\"dimmed\">\n                  neggshaker@mantine.dev\n                </Text>\n              </div>\n            </Group>\n          </Menu.Item>\n\n          <Menu.Divider />\n\n          <Menu.Item icon={<IconHeart size=\"0.9rem\" stroke={1.5} color={theme.colors.red[6]} />}>\n            Liked posts\n          </Menu.Item>\n          <Menu.Item icon={<IconStar size=\"0.9rem\" stroke={1.5} color={theme.colors.yellow[6]} />}>\n            Saved posts\n          </Menu.Item>\n          <Menu.Item icon={<IconMessage size=\"0.9rem\" stroke={1.5} color={theme.colors.blue[6]} />}>\n            Your comments\n          </Menu.Item>\n\n          <Menu.Label>Settings</Menu.Label>\n          <Menu.Item icon={<IconSettings size=\"0.9rem\" stroke={1.5} />}>Account settings</Menu.Item>\n          <Menu.Item icon={<IconSwitchHorizontal size=\"0.9rem\" stroke={1.5} />}>\n            Change account\n          </Menu.Item>\n          <Menu.Item icon={<IconLogout size=\"0.9rem\" stroke={1.5} />}>Logout</Menu.Item>\n\n          <Menu.Divider />\n\n          <Menu.Label>Danger zone</Menu.Label>\n          <Menu.Item icon={<IconPlayerPause size=\"0.9rem\" stroke={1.5} />}>\n            Pause subscription\n          </Menu.Item>\n          <Menu.Item color=\"red\" icon={<IconTrash size=\"0.9rem\" stroke={1.5} />}>\n            Delete account\n          </Menu.Item>\n        </Menu.Dropdown>\n      </Menu>\n    </Group>\n  );\n}\n","attributes":{"title":"User menu","category":"users","author":"rtivital","dependencies":["/core/text/","/core/menu/","/core/avatar/","/core/group/","/core/divider/"],"canvas":{"center":false}}},{"component":"UsersRolesTable","slug":"users-roles-table","code":"import { Avatar, Badge, Table, Group, Text, Select, ScrollArea } from '@mantine/core';\n\ninterface UsersTableProps {\n  data: { avatar: string; name: string; job: string; email: string; role: string }[];\n}\n\nconst rolesData = ['Manager', 'Collaborator', 'Contractor'];\n\nexport function UsersRolesTable({ data }: UsersTableProps) {\n  const rows = data.map((item) => (\n    <tr key={item.name}>\n      <td>\n        <Group spacing=\"sm\">\n          <Avatar size={40} src={item.avatar} radius={40} />\n          <div>\n            <Text fz=\"sm\" fw={500}>\n              {item.name}\n            </Text>\n            <Text fz=\"xs\" c=\"dimmed\">\n              {item.email}\n            </Text>\n          </div>\n        </Group>\n      </td>\n\n      <td>\n        <Select data={rolesData} defaultValue={item.role} variant=\"unstyled\" />\n      </td>\n      <td>{Math.floor(Math.random() * 6 + 5)} days ago</td>\n      <td>\n        {Math.random() > 0.5 ? (\n          <Badge fullWidth>Active</Badge>\n        ) : (\n          <Badge color=\"gray\" fullWidth>\n            Disabled\n          </Badge>\n        )}\n      </td>\n    </tr>\n  ));\n\n  return (\n    <ScrollArea>\n      <Table miw={800} verticalSpacing=\"sm\">\n        <thead>\n          <tr>\n            <th>Employee</th>\n            <th>Role</th>\n            <th>Last active</th>\n            <th>Status</th>\n          </tr>\n        </thead>\n        <tbody>{rows}</tbody>\n      </Table>\n    </ScrollArea>\n  );\n}\n","attributes":{"title":"Table with roles select","category":"users","author":"rtivital","dependencies":["/core/table/","/core/text/","/core/badge/","/core/native-select/","/core/avatar/","/core/scroll-area/"],"props":{"data":[{"avatar":"https://images.unsplash.com/photo-1624298357597-fd92dfbec01d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80","name":"Robert Wolfkisser","job":"Engineer","email":"rob_wolf@gmail.com","role":"Collaborator"},{"avatar":"https://images.unsplash.com/photo-1586297135537-94bc9ba060aa?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80","name":"Jill Jailbreaker","job":"Engineer","email":"jj@breaker.com","role":"Collaborator"},{"avatar":"https://images.unsplash.com/photo-1632922267756-9b71242b1592?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80","name":"Henry Silkeater","job":"Designer","email":"henry@silkeater.io","role":"Contractor"},{"avatar":"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80","name":"Bill Horsefighter","job":"Designer","email":"bhorsefighter@gmail.com","role":"Contractor"},{"avatar":"https://images.unsplash.com/photo-1630841539293-bd20634c5d72?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80","name":"Jeremy Footviewer","job":"Manager","email":"jeremy@foot.dev","role":"Manager"}]},"canvas":{"center":true,"maxWidth":800}}},{"component":"UsersStack","slug":"users-stack","code":"import { Avatar, Table, Group, Text, ActionIcon, Menu, ScrollArea } from '@mantine/core';\nimport {\n  IconPencil,\n  IconMessages,\n  IconNote,\n  IconReportAnalytics,\n  IconTrash,\n  IconDots,\n} from '@tabler/icons-react';\n\ninterface UsersStackProps {\n  data: { avatar: string; name: string; job: string; email: string; rate: number }[];\n}\n\nexport function UsersStack({ data }: UsersStackProps) {\n  const rows = data.map((item) => (\n    <tr key={item.name}>\n      <td>\n        <Group spacing=\"sm\">\n          <Avatar size={40} src={item.avatar} radius={40} />\n          <div>\n            <Text fz=\"sm\" fw={500}>\n              {item.name}\n            </Text>\n            <Text c=\"dimmed\" fz=\"xs\">\n              {item.job}\n            </Text>\n          </div>\n        </Group>\n      </td>\n      <td>\n        <Text fz=\"sm\">{item.email}</Text>\n        <Text fz=\"xs\" c=\"dimmed\">\n          Email\n        </Text>\n      </td>\n      <td>\n        <Text fz=\"sm\">${item.rate.toFixed(1)} / hr</Text>\n        <Text fz=\"xs\" c=\"dimmed\">\n          Rate\n        </Text>\n      </td>\n      <td>\n        <Group spacing={0} position=\"right\">\n          <ActionIcon>\n            <IconPencil size=\"1rem\" stroke={1.5} />\n          </ActionIcon>\n          <Menu\n            transitionProps={{ transition: 'pop' }}\n            withArrow\n            position=\"bottom-end\"\n            withinPortal\n          >\n            <Menu.Target>\n              <ActionIcon>\n                <IconDots size=\"1rem\" stroke={1.5} />\n              </ActionIcon>\n            </Menu.Target>\n            <Menu.Dropdown>\n              <Menu.Item icon={<IconMessages size=\"1rem\" stroke={1.5} />}>Send message</Menu.Item>\n              <Menu.Item icon={<IconNote size=\"1rem\" stroke={1.5} />}>Add note</Menu.Item>\n              <Menu.Item icon={<IconReportAnalytics size=\"1rem\" stroke={1.5} />}>\n                Analytics\n              </Menu.Item>\n              <Menu.Item icon={<IconTrash size=\"1rem\" stroke={1.5} />} color=\"red\">\n                Terminate contract\n              </Menu.Item>\n            </Menu.Dropdown>\n          </Menu>\n        </Group>\n      </td>\n    </tr>\n  ));\n\n  return (\n    <ScrollArea>\n      <Table sx={{ minWidth: 800 }} verticalSpacing=\"md\">\n        <tbody>{rows}</tbody>\n      </Table>\n    </ScrollArea>\n  );\n}\n","attributes":{"title":"Users stack","category":"users","author":"rtivital","dependencies":["/core/table/","/core/text/","/core/menu/","/core/group/","/core/action-icon/","/core/avatar/","/core/scroll-area/","@tabler/icons-react"],"props":{"data":[{"avatar":"https://images.unsplash.com/photo-1624298357597-fd92dfbec01d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80","name":"Robert Wolfkisser","job":"Engineer","email":"rob_wolf@gmail.com","rate":22},{"avatar":"https://images.unsplash.com/photo-1586297135537-94bc9ba060aa?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80","name":"Jill Jailbreaker","job":"Engineer","email":"jj@breaker.com","rate":45},{"avatar":"https://images.unsplash.com/photo-1632922267756-9b71242b1592?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80","name":"Henry Silkeater","job":"Designer","email":"henry@silkeater.io","rate":76},{"avatar":"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80","name":"Bill Horsefighter","job":"Designer","email":"bhorsefighter@gmail.com","rate":15},{"avatar":"https://images.unsplash.com/photo-1630841539293-bd20634c5d72?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80","name":"Jeremy Footviewer","job":"Manager","email":"jeremy@foot.dev","rate":98}]},"canvas":{"center":true,"maxWidth":800}}},{"component":"UsersTable","slug":"users-table","code":"import {\n  Avatar,\n  Badge,\n  Table,\n  Group,\n  Text,\n  ActionIcon,\n  Anchor,\n  ScrollArea,\n  useMantineTheme,\n} from '@mantine/core';\nimport { IconPencil, IconTrash } from '@tabler/icons-react';\n\ninterface UsersTableProps {\n  data: { avatar: string; name: string; job: string; email: string; phone: string }[];\n}\n\nconst jobColors: Record<string, string> = {\n  engineer: 'blue',\n  manager: 'cyan',\n  designer: 'pink',\n};\n\nexport function UsersTable({ data }: UsersTableProps) {\n  const theme = useMantineTheme();\n  const rows = data.map((item) => (\n    <tr key={item.name}>\n      <td>\n        <Group spacing=\"sm\">\n          <Avatar size={30} src={item.avatar} radius={30} />\n          <Text fz=\"sm\" fw={500}>\n            {item.name}\n          </Text>\n        </Group>\n      </td>\n\n      <td>\n        <Badge\n          color={jobColors[item.job.toLowerCase()]}\n          variant={theme.colorScheme === 'dark' ? 'light' : 'outline'}\n        >\n          {item.job}\n        </Badge>\n      </td>\n      <td>\n        <Anchor component=\"button\" size=\"sm\">\n          {item.email}\n        </Anchor>\n      </td>\n      <td>\n        <Text fz=\"sm\" c=\"dimmed\">\n          {item.phone}\n        </Text>\n      </td>\n      <td>\n        <Group spacing={0} position=\"right\">\n          <ActionIcon>\n            <IconPencil size=\"1rem\" stroke={1.5} />\n          </ActionIcon>\n          <ActionIcon color=\"red\">\n            <IconTrash size=\"1rem\" stroke={1.5} />\n          </ActionIcon>\n        </Group>\n      </td>\n    </tr>\n  ));\n\n  return (\n    <ScrollArea>\n      <Table sx={{ minWidth: 800 }} verticalSpacing=\"sm\">\n        <thead>\n          <tr>\n            <th>Employee</th>\n            <th>Job title</th>\n            <th>Email</th>\n            <th>Phone</th>\n            <th />\n          </tr>\n        </thead>\n        <tbody>{rows}</tbody>\n      </Table>\n    </ScrollArea>\n  );\n}\n","attributes":{"title":"Table with users","category":"users","author":"rtivital","dependencies":["/core/table/","/core/text/","/core/badge/","/core/group/","/core/action-icon/","/core/avatar/","/core/scroll-area/","@tabler/icons-react"],"props":{"data":[{"avatar":"https://images.unsplash.com/photo-1624298357597-fd92dfbec01d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80","name":"Robert Wolfkisser","job":"Engineer","email":"rob_wolf@gmail.com","phone":"+44 (452) 886 09 12"},{"avatar":"https://images.unsplash.com/photo-1586297135537-94bc9ba060aa?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80","name":"Jill Jailbreaker","job":"Engineer","email":"jj@breaker.com","phone":"+44 (934) 777 12 76"},{"avatar":"https://images.unsplash.com/photo-1632922267756-9b71242b1592?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80","name":"Henry Silkeater","job":"Designer","email":"henry@silkeater.io","phone":"+44 (901) 384 88 34"},{"avatar":"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80","name":"Bill Horsefighter","job":"Designer","email":"bhorsefighter@gmail.com","phone":"+44 (667) 341 45 22"},{"avatar":"https://images.unsplash.com/photo-1630841539293-bd20634c5d72?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=250&q=80","name":"Jeremy Footviewer","job":"Manager","email":"jeremy@foot.dev","phone":"+44 (881) 245 65 65"}]},"canvas":{"center":true,"maxWidth":800}}}]},"__N_SSG":true}